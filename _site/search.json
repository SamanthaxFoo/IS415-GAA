[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415: Geospatial Analytics and Application",
    "section": "",
    "text": "Hey there! 👋 I’m Samantha Foo, a Year 3 SMU student pursuing a Bachelor in Information Systems (Business Analytics) with a 2nd Major in Data Science & Analytics. I’m a huge data enthusiast, a FOOdie and I enjoy exploring new places/cities!\nJoin me on this data odyssey as I conquer Geospatial Analytics! 🌱\n\n\n\n\n\nSep 22, 2024\nFoo Jia Yi Samantha\n\nTake Home Exercise 1\nSpatial & Spatio-Temporal Point Pattern Analysis of Myanmar’s Armed Conflicts\n\n\n\n\nAug 16, 2024\nFoo Jia Yi Samantha\n\nHands-on Exercise 1\nGeospatial Wrangling with R\n\n\n\n\n\n\nAug 22, 2024\nFoo Jia Yi Samantha\n\nHands-on Exercise 2\nChoropleth Mapping and GeoVisualisation with R\n\n\n\n\nAug 27, 2024\nFoo Jia Yi Samantha\n\nHands-on Exercise 3\n1st and 2nd Order Spatial Point Patterns Analysis Methods\n\n\n\n\nSep 10, 2024\nFoo Jia Yi Samantha\n\nHands-on Exercise 5\nSpatial Weights and Applications\n\n\n\n\nSep 18, 2024\nFoo Jia Yi Samantha\n\nHands-on Exercise 6\nGlobal and Local Measures of Spatial Autocorrelation\n\n\n\n\nAug 19, 2024\nFoo Jia Yi Samantha\n\nIn-class Exercise 1\nSet up RStudio and Create a Quarto Document\n\n\n\n\nAug 26, 2024\nFoo Jia Yi Samantha\n\nIn-class Exercise 2\nImporting Libraries and Data into R, and Performing Data Wrangling\n\n\n\n\nSep 2, 2024\nFoo Jia Yi Samantha\n\nIn-class Exercise 3\nCovering Errors in Hands-on Exercise 3 and Importing ACLED Datasets\n\n\n\n\nSep 10, 2024\nFoo Jia Yi Samantha\n\nIn-class Exercise 4\nExploring Spatio-Temporal Kernel Density Estimation\n\n\n\n\nSep 18, 2024\nFoo Jia Yi Samantha\n\nIn-class Exercise 5\nExploring Geographically Weighted Models\n\n\n\n\nSep 18, 2024\nFoo Jia Yi Samantha\n\nIn-class Exercise 6\nGlobal and Local Measures of Spatial Autocorrelation: sfdep methods"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "IS415: Geospatial Analytics and Application",
    "section": "",
    "text": "Hey there! 👋 I’m Samantha Foo, a Year 3 SMU student pursuing a Bachelor in Information Systems (Business Analytics) with a 2nd Major in Data Science & Analytics. I’m a huge data enthusiast, a FOOdie and I enjoy exploring new places/cities!\nJoin me on this data odyssey as I conquer Geospatial Analytics! 🌱"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "IS415: Geospatial Analytics and Application",
    "section": "",
    "text": "University of California, San Diego | San Diego, CA PhD in Mathematics | Sept 2011 - June 2015\nMacalester College | St. Paul MA B.A in Economics | Sept 2007 - June 2011"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "IS415: Geospatial Analytics and Application",
    "section": "",
    "text": "Wengo Analytics | Head Data Scientist | April 2018 - present\nGeoScynce | Chief Analyst | Sept 2012 - April 2018"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Hands-on Exercise"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "1. Getting Started",
    "text": "1. Getting Started\nIn this hands-on exercise, I will be performing geospatial data science tasks in R by using the sf and tidyverse R packages. By the end of this hands-on exercise, I would have acquired the following competencies:\n\ninstalling and loading sf and tidyverse packages into R environment,\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#lets-set-up",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#lets-set-up",
    "title": "Hands-on Exercise 1",
    "section": "2. Let’s Set Up!",
    "text": "2. Let’s Set Up!\n\n2.1 Data Acquisition\nData are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. With that said, I have extracted the data sets from the following four sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\nI will be tapping on these vastly available, public data from the government and private sectors for future exercises ahead!\n\n\n\n2.2 Set Up the Folders\nThis is the file structure for containing the data files that I have extracted in the previous step. The Hands-on_Ex1 folder consists of a data sub-folder, and is further separated by the geospatial and aspatial folders.\n\n\n\n\n\n\n\n2.3 Installing R Packages\nIn this exercise, I will be using these two R packages\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nTidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\nWith that said, I installed the required packages using the code chunk below.\n\npacman::p_load(sf, tidyverse)\n\n\np_load is a function of the pacman package that is used to install and load sf and tidyverse packages into our R environment."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data-into-r",
    "title": "Hands-on Exercise 1",
    "section": "3. Importing Geospatial Data into R",
    "text": "3. Importing Geospatial Data into R\nIn this section, I will import the following geospatial data into R by using st_read() of the sf package:\n\nMP14_SUBZONE_WEB_PL: a polygon feature layer in ESRI shapefile format,\nCyclingPath: a line feature layer in ESRI shapefile format, and\nPreSchool: a point feature layer in kml file format.\n\n\n3.1 Importing Polygon Feature Data in .shp Format\nThe code chunk below uses st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile (.shp) into R as a polygon feature data frame.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n🔎 Observations: the mpsz simple feature data frame contains 323 multipolygon features, 15 fields and is in the SVY21 projected coordinates system.\n\n\n💡 Note: dsn defines folder path and layer defines file name (AKA a shapefile, no need any extension like .shp)\n\n\n\n3.2 Importing Polyline Feature Data in .shp Format\nThe code chunk below imports CyclingPath shapefile (.shp) into R as a polyline feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n🔎 Observations: the cyclingpath linestring feature data frame contains 3138 features and 2 fields and it is in the SVY21 projected coordinates system.\n\n\n\n3.3 Importing GIS Point Feature Data in .kml Format\nThe code chunk below imports PreSchoolsLocation.kml kml format into R as a point feature data frame.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n🔎 Observations: the PreSchoolsLocation.kml point feature data frame contains 2290 point features, 2 fields and is in the WGS84 projected coordinates"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-aspatial-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-aspatial-data-into-r",
    "title": "Hands-on Exercise 1",
    "section": "4. Importing Aspatial Data into R",
    "text": "4. Importing Aspatial Data into R\n\n4.1 Importing Aspatial Data\nNotice that the listings data set is in csv file format. Instead of st_read(), we’ll use read_csv() from the readr package to import listings.csv.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nThis outputs an R object called listings which is a tibble data frame.\n\nLet’s take a peak into our listings tibble data frame.\n\nglimpse(listings)\n\nRows: 3,540\nColumns: 18\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ latitude                       &lt;dbl&gt; 1.34537, 1.34754, 1.34531, 1.29015, 1.2…\n$ longitude                      &lt;dbl&gt; 103.9589, 103.9596, 103.9610, 103.8081,…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n\n\n\n🔎 Observations: there are 3540 rows and 18 columns (not features and fields like in our simple data feature frame!)\n\n\n💡 Note: we’ll be using the latitude and longitude fields in the next phase. These fields appear to be adopting the WGS84 geographic coordinate system.\n\n\n\n4.2 Converting Aspatial Data\nNext, we’ll convert listing (a non-geospatial tabular data frame) into a simple feature data frame by using st_as_sf() from the sf package.\n\n💡 Note: a non-simple feature data frame will simply not have a “geometry” column. Use class(listings) as a simple test - if it outputs data.frame, tbl_df, tbl, etc and no sf, then it’s not a simple feature data frame!\n\n\nlistings_sf &lt;- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs=4326) %&gt;% st_transform(crs = 3414)\n\n\ncoordscrs%&gt;%\n\n\nIndicates the column name of the x-coordinates, followed by that of the y-coordinates.\n\n\nIndicates the coordinates system in epsg format (more info: epsg.io)\n\nEPSG: 4326 is WGS84 Geographic Coordinate System\nEPSG: 3414 is Singapore SVY21 Projected Coordinate System\n\n\n\nTo nest st_transform() and transform the newly created simple feature data frame into SVY21 Projected Coordinate System\n\n\n\nThis gives us the new simple feature data frame, listings_sf:\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\n\n🔎 Observations:\nNotice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been removed from the data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#exploring-contents-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#exploring-contents-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1",
    "section": "5. Exploring Contents of a Simple Feature Data Frame",
    "text": "5. Exploring Contents of a Simple Feature Data Frame\nThere are 3 ways to explore the contents of a simple feature data frame like mpsz!\n\n5.1 Using st_geometry()\nThe sf data.frame contains a geometry column, that is a list of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry().\n\n# Retrieve geometry column\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n🔎 Observations: This MP14_SUBZONE_WEB_PL file consists of 323 features, consisting of multipolygon features.\n\n\n\n5.2 Using glimpse()\nWe use glimpse() from the dplyr package to understand the data type of each fields.\nE.g. FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are in double-precision values.\n\n# Get data types\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n🔎 Observations: This MP14_SUBZONE_WEB_PL file consists of 323 rows and 16 columns with datatypes ranging from integers, characters, date and doubles.\n\n\n\n5.3 Using head()\nWe use head() from the base R package to get the full information of the feature object mpsz. The n value indicates the no. of rows.\n\n# Display top 5 rows of the feature object\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n🔎 Observations: We can notice that the MP14_SUBZONE_WEB_PL file consists of 5 features and 15 fields, with the top 5 rows per column."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1",
    "section": "6. Plotting the Geospatial Data",
    "text": "6. Plotting the Geospatial Data\nIn geospatial data science, looking at feature information is not sufficient. We are also interested in visualising the geospatial features of the sf object, in which plot() will help with that.\n\n# Plot multi-plot of all attributes\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above.\n\nWe can, however, choose to plot the geometry only as such:\n\n# Plot the geometry only\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nOr, plot the sf object using a specific attribute\n\n# Plot a specific attribute\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n💡 Note: plot() is meant for plotting the geospatial object at a high level. For high cartographic quality plot, other R package such as tmap should be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1",
    "section": "7. Working with Projection",
    "text": "7. Working with Projection\nWhat is “map projection”?: it is an important property of geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, I project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\n\n7.1 Assigning EPSG code to a simple feature data frame\nDefine “ESPG code”: a unique identifier to represent coordinate systems.\nCommon issues when importing geospatial data into R : the coordinate system of the source data are either…\n\nMissing (such as due to missing .proj for ESRI shapefile)\nWrongly assigned\n\nTo check the coordinate system of mpsz simple feature data frame, I’ll use st_crs() from the sf package.\n* crs = Coordinate Reference System\n\n# Check coordinate system\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n🔎 Observations Notice the mpsz data is a SVY21 projected coordinate system. However, the ESPG code is wrongly indicated as 9001 in the last few lines. The correct ESPG code for SVY21 should be 3114. Thus, we’ll assign the correct code as such.\n\n\n# Assign new ESPG code\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n# Check that crs has been updated to 3414\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n7.2 Converting Data from Geographic to Projected Coordinate System\nRecall that the geographic coordinate system (e.g., WGS84) is not appropriate for analyses that involve distance/area. Hence, it’s common for us to transform the original data to a projected coordinate system.\nLet’s take a look at the preschool simple feature data frame. It shows that it is in the WGS84 coordinate system, i.e., geographic coordinate system.\n\n# Transform projection\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.8072 1.299333 0)\n\n\nPOINT Z (103.826 1.312839 0)\n\n\nPOINT Z (103.8409 1.348843 0)\n\n\nPOINT Z (103.8048 1.435024 0)\n\n\nPOINT Z (103.839 1.33315 0)\n\n\nNow, we’ll transform preschool’s coordinate system from geographic (WGS84) to projected (SVY21).\n\npreschool3414 &lt;- st_transform(preschool, crs = 3414)\n\n\n🔎 Observations: Notice that the last row shows “Projected CRS” now"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1",
    "section": "8. Geoprocessing with sf Package",
    "text": "8. Geoprocessing with sf Package\nBesides providing functions to handling geospatial data (i.e. importing, exporting, assigning projection, transforming projection etc), sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, I perform two commonly-used geoprocessing functions, namely buffering and point in polygon count.\n\n8.1 Buffering\n📝The scenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. You are tasked to determine the extend of the land needed to be acquired and their total area.\n💡The solution:\nFirstly, st_buffer() of the sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)\n\n\nA higher nQuadSegs value results in a smoother and more accurate circular buffer. The default is 30.\n\nThis is followed by calculating the area of the buffers\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nLastly, sum() of Base R will be used to derive the total land involved\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\n\n8.2 Point-in-polygon count\n📝The scenario: A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\n💡The solution:\nFirstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate the no. of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nYou can check the summary statistics of the newly derived PreSch Count field by using summary() as shown below.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, top_n() of the dplyr package is used.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nNext, I calculate the density of pre-school by planning subzone. I used st_area() of the sf package to derive the area of each planning subzone.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%   st_area()\n\nNext, I used mutate()of the dplyr package to compute the density by using the code chunk below.\n\nmpsz3414 &lt;- mpsz3414 %&gt;% mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1",
    "section": "9. Exploratory Data Analysis (EDA)",
    "text": "9. Exploratory Data Analysis (EDA)\nIn practice, many geospatial analytics start with Exploratory Data Analysis. In this section, I will tap on ggplot2() functions to create functional yet transparent statistical graphs for EDA purposes.\nFirstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nAlthough the syntax is very easy to use, the output is currently far from meeting publication quality. Furthermore, hist() function has limited room for further customisation.\nIn the code chunk below, appropriate ggplot2() functions will be used.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\nUsing ggplot2 method, I plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Hands-on Exercise"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "1. Getting Started",
    "text": "1. Getting Started\nThematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices.\nGeovisualisation works by providing graphical ideation to render a place, phenomenon or a process.\nIn this hands-on exercise, I will learn how to plot functional and truthful chloropleth maps by using the tmap R package. The output of this exercise should look like thisL"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#lets-set-up",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#lets-set-up",
    "title": "Hands-on Exercise 2",
    "section": "2. Let’s Set Up!",
    "text": "2. Let’s Set Up!\n\n2.1 Importing Libraries into R\nIn this hands-on exercise, the key R package use is tmap package in R, alongside these four other R packages:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package. Hence, we will only need to install the tidyverse package.\n\nNow, let’s install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n2.2 Download Data and Set Up Folders\nWe will be using two data sets to create the choropleth maps\n1) Master Plan 2014 Subzone Boundary (Web): geospatial data consisting of the geographical boundary of Singapore at the planning subzone level.\n📅 The data is based on URA Master Plan 2014.\n📁 ESRI shapefile format (i.e. MP14_SUBZONE_WEB_PL)\n🔗 Can be downloaded at data.gov.sg\n2) Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling: aspatial data file. Although it does not contain any coordinates values, the PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n📅 June 2011-2020\n📁 csv format (i.e. respopagesextod2011to2020.csv)\n🔗 Can be downloaded at Department of Statistics, Singapore\nThis is the file structure for containing the data files that I have extracted.\n\n\n\n2.3 Importing Data into R\n\n2.3.1 Importing Geospatial Data into R\nNow, we’ll use the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\n# Import shapefile\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n# Inspect shapefile\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n🔎 Observations: The MP14_SUBZONE_WEB_PL data set consists of 323 features and 15 fields made up of multipolygon features.\n\n\n\n2.3.2 Importing Aspatial (Attribute) Data into R\nFor aspatial datasets like respopagsex2011to2020.csv, we will import into Rstudio using read_csv() function of readr package.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n🔎 Observations: The respopagsex2011to2020.csv data follows the SVY21 projected coordinate which contains 984656 rows and 7 columns"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#data-preparation-and-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#data-preparation-and-wrangling",
    "title": "Hands-on Exercise 2",
    "section": "3. Data Preparation and Wrangling",
    "text": "3. Data Preparation and Wrangling\nBefore a thematic map can be prepared, we will need to prepare a data table with values from 2020 which includes these variables:\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n3.1 Data Wrangling\nIn order to carry out necessary data wrangling and transformation, the following functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n🔎 Observations: Notice that we have filtered our population data from 2020 and successfully grouped them by PA, SZ and AG which sums up the population within each category. I’ve also summed up the rows for ECONOMY ACTIVE, AGED and TOTAL, and created a new DEPENDENCY column which takes the sum of YOUNG and AGED, and then divide that sum by the value of ECONOMY ACTIVE.\n\n\n\n3.2 Joining Geospatial Data and Attribute Data\nBefore we can perform the georelational join, we are required to convert the values in PA and SZ fields to uppercase to ensure consistency with the uppercase values in SUBZONE_N and PLN_AREA_N.\nHence, we will standardise the data values in these two fields.\n\n# Convert to uppercase\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 2",
    "section": "4. Choropleth Mapping Geospatial Data Using tmap",
    "text": "4. Choropleth Mapping Geospatial Data Using tmap\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.\n📖 Scenario: A social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements, i.e. tm_shape()\n\n\n4.1 Method 1: Plotting a Choropleth Map quickly using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\n\n# Plot choropleth map using qtm()\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n💡 Note:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\n4.2 Method 2: Plotting a Choropleth Map quickly using tm_shape()\n\n# Plot choropleth map using tmap's elements\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nStep 1: Drawing a Base Map Using tm_shape()\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\n\ntm_shape(mpsz_pop2020) + tm_polygons()\n\n\n\n\n\n\n\n\n\n💡 Note: tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons.\n\n\n\nStep 2: Drawing a Choropleth Map Using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\nStep 3: Drawing a Choropleth Map Using tm_fill() and tm_border()\nFirstly, we will try to draw a choropleth map by using tm_fill() alone.\n\n💡 Note: tm_polygons() is a wrapper of tm_fill() and tm_border()\ntm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\n\n\n# Add fill\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown below.\n\n# Add boundary\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\n\n💡 Note: Notice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). Default alpha value is 1.\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width (default is 1)\nlty = border line type (default is “solid”)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#data-classification-methods-of-tmap",
    "title": "Hands-on Exercise 2",
    "section": "5. Data Classification Methods of tmap",
    "text": "5. Data Classification Methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\ntmap provides a total ten data classification methods, namely:\n\nfixed,\nsd,\nequal,\npretty (default),\nquantile,\nkmeans,\nhclust,\nbclust,\nfisher,\njenks.\n\n\n\n5.1 Plotting Choropleth Maps with Built-in Classification Methods\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used. The code chunks below uses 5 classes where, n = 5.\n\n💡 There are 10 types of styles: jenks, equal, fixed, sd, pretty (default), quantile, kmeans, fisher, hclust and bclust\n\n\n1) jenks\nFirstly, we’ll use the jenks style method. It is known as natural breaks and is based on natural groupings inherent in the data. Data is clustered into groups that minimise the within-group variance and maximise the between-group variance.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n2) equal\nNext, we will try equal data classification method. This creates a more even distribution as shown.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n💡 Note: not compatible for data that are highly-skewed or with one or two large outliers\n\n\n\n3) sd\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"sd\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n💡 Note: Should only use if the distribution resembles a normal distribution (bell-curve)!\n\n\n\n4) kmeans\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"kmeans\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n5) fisher\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"fisher\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n💡 Note: At a glance, using Fisher and KMeans lead to similar visualisations.\n\n\n\n4) hclust\nhclust is hierarchical clustering used to create a hierarchy of clusters based on their similarity. Each data point starts as an individual cluster and then progressively merges or splits clusters until a stopping criterion is met.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"hclust\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n5) bclust\nbclust is bagged clustering which creates multiple subsets of the original dataset through resampling. Each subset is then used to train an individual clustering model, and the final cluster assignments are obtained by combining the results from all models.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"bclust\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\n\n5.2 Plotting Choropleth Maps with Custom Breaks\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument in tm_fill().\n\n💡 Note: in tmap, the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\n\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nLooking at the summary statistics, the break point can be set to 0.60, 0.70, 0.80, and 0.90. The minimum and maximum breaks must also be included, which are 0 and 100 respectively.\n\n# Using this information, we will now proceed to plot the choropleth map.\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          palette=\"plasma\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\n\n💡 Observations: the legend has now been categorised according to the breaks vector, c(0, 0.60, 0.70, 0.80, 0.90, 1.00).\n\n\n\n5.3 Customising Colour Schemes\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\nTo change the colour, we assign the preferred colour to the palette argument of tm_fill() as shown below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"plasma\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nAdd a “-” prefix to reverse the colour shading.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#controlling-and-customising-map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#controlling-and-customising-map-layouts",
    "title": "Hands-on Exercise 2",
    "section": "6. Controlling and Customising Map Layouts",
    "text": "6. Controlling and Customising Map Layouts\n\n6.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"plasma\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            #legend.height = 0.45, \n            #legend.width = 0.35,\n            legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n6.2 Map Style\nThe layout of the map can also be adjusted using tmap_style(). E.g. Classic\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n💡 Observations: the classic tmap style creates a border with double lines, the colours used are more muted and neutral, and the font has been changed to something more elegant\n\n\n\n6.3 Cartographic Furniture\ntmap also provides arguments to draw other important map elements like compass, scale bar and grid lines.\nTo add compass, scale and gridlines, pay attention to how tm_compass(), tm_scale_bar() and tm_grid() are used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"plasma\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n6.4 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred as facet maps, comprise of many adjacent maps. These facets enable easier visualisation of how spatial relationships change with respect to another variable. Such as, time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\nMethod 1: By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n💡 Observations: two choropleth maps been generated to represent the Young and Aged demographics respectively.\n\nAdditionally, the style and palette arguments can be adjusted accordingly.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nMethod 2: By defining a group-by variable in tm_facets()\ntm_facets() can help to group categorical data like regions and subzone areas such that the generated facet maps will zoom in to the specified variable.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\n💡 Observations: we have generated 5 different choropleth maps that represent the 5 unique regions found in the REGION_N data variable!\n\n\n\nMethod 3: By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"viridis\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"plasma\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n💡 Observations: as compared to the charts generated in Method 1, writing two tm_shape() functions allows us to create two separate choropleth maps produced as seen above."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#mappping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#mappping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 2",
    "section": "7. Mappping Spatial Object Meeting a Selection Criterion",
    "text": "7. Mappping Spatial Object Meeting a Selection Criterion\nMap outputs can also be targeted by using selection functions to meet the selection criterion. For example, we have selected the central region and DEPENDENCY column to plot.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"plasma\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n💡 Note: In order to only display data from the Central Region, we need to filter the mpsz_pop2020 data frame via mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex1/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Test.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Test.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Hands-on Exercise"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Test.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex2/Test.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "1. Getting Started",
    "text": "1. Getting Started\nThematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices.\nGeovisualisation works by providing graphical ideation to render a place, phenomenon or a process.\nIn this hands-on exercise, I will learn how to plot functional and truthful chloropleth maps by using the tmap R package. The output of this exercise should look like thisL"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Test.html#lets-set-up",
    "href": "Hands-on_Ex/Hands-on_Ex2/Test.html#lets-set-up",
    "title": "Hands-on Exercise 2",
    "section": "2. Let’s Set Up!",
    "text": "2. Let’s Set Up!\n\n2.1 Importing Libraries into R\nIn this hands-on exercise, the key R package use is tmap package in R, alongside these four other R packages:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package. Hence, we will only need to install the tidyverse package.\n\nNow, let’s install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n2.2 Download Data and Set Up Folders\nWe will be using two data sets to create the choropleth maps\n1) Master Plan 2014 Subzone Boundary (Web): geospatial data consisting of the geographical boundary of Singapore at the planning subzone level.\n📅 The data is based on URA Master Plan 2014.\n📁 ESRI shapefile format (i.e. MP14_SUBZONE_WEB_PL)\n🔗 Can be downloaded at data.gov.sg\n2) Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling: aspatial data file. Although it does not contain any coordinates values, the PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n📅 June 2011-2020\n📁 csv format (i.e. respopagesextod2011to2020.csv)\n🔗 Can be downloaded at Department of Statistics, Singapore\nThis is the file structure for containing the data files that I have extracted in the previous step.\n\n\n\n2.3 Importing Data into R\n\n2.3.1 Importing Geospatial Data into R\nNow, we’ll use the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\n# Import shapefile\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n# Inspect shapefile\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n🔎 Observations: The MP14_SUBZONE_WEB_PL data set consists of 323 features and 15 fields made up of multipolygon features.\n\n\n\n2.3.2 Importing Aspatial (Attribute) Data into R\nFor aspatial datasets like respopagsex2011to2020.csv, we will import into Rstudio using read_csv() function of readr package.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n🔎 Observations: The respopagsex2011to2020.csv data follows the SVY21 projected coordinate which contains 984656 rows and 7 columns"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Test.html#data-preparation-and-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex2/Test.html#data-preparation-and-wrangling",
    "title": "Hands-on Exercise 2",
    "section": "3. Data Preparation and Wrangling",
    "text": "3. Data Preparation and Wrangling\nBefore a thematic map can be prepared, we will need to prepare a data table with values from 2020 which includes these variables:\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n3.1 Data Wrangling\nIn order to carry out necessary data wrangling and transformation, the following functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n🔎 Observations: Notice that we have filtered our population data from 2020 and successfully grouped them by PA, SZ and AG which sums up the population within each category. I’ve also summed up the rows for ECONOMY ACTIVE, AGED and TOTAL, and created a new DEPENDENCY column which takes the sum of YOUNG and AGED, and then divide that sum by the value of ECONOMY ACTIVE.\n\n\n\n3.2 Joining Geospatial Data and Attribute Data\nBefore we can perform the georelational join, we are required to convert the values in PA and SZ fields to uppercase to ensure consistency with the uppercase values in SUBZONE_N and PLN_AREA_N.\nHence, we will standardise the data values in these two fields.\n\n# Convert to uppercase\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Test.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex2/Test.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 2",
    "section": "4. Choropleth Mapping Geospatial Data Using tmap",
    "text": "4. Choropleth Mapping Geospatial Data Using tmap\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.\n📖 Scenario: A social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n4.1 Method 1: Plotting a Choropleth Map quickly using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n💡 Note:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\n4.2 Method 2: Plotting a Choropleth Map quickly using tmap’s elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n4.3 Drawing a Base Map Using tm_shape()\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\n\ntm_shape(mpsz_pop2020) + tm_polygons()\n\n\n\n\n\n\n\n\n\n💡 Note: tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons.\n\n\n\n4.4 Drawing a Choropleth Map Using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n4.5 Drawing a Choropleth Map Using tm_fill() and tm_border()\nFirstly, we will try to draw a choropleth map by using tm_fill() alone.\n\n💡 Note: tm_polygons() is a wrapper of tm_fill() and tm_border()\ntm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\n\n\n# Add fill\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown below.\n\n# Add boundary\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\n\n💡 Note: Notice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). Default alpha value is 1.\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width (default is 1)\nlty = border line type (default is “solid”)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Test.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex2/Test.html#data-classification-methods-of-tmap",
    "title": "Hands-on Exercise 2",
    "section": "5. Data Classification Methods of tmap",
    "text": "5. Data Classification Methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\ntmap provides a total ten data classification methods, namely:\n\nfixed,\nsd,\nequal,\npretty (default),\nquantile,\nkmeans,\nhclust,\nbclust,\nfisher,\njenks.\n\n\n\n5.1 Plotting Choropleth Maps with Built-in Classification Methods\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used. The code chunks below uses 5 classes where, n = 5.\n\n💡 There are 10 types of styles: jenks, equal, fixed, sd, pretty (default), quantile, kmeans, fisher, hclust and bclust\n\n\n1) jenks\nFirstly, we’ll use the jenks style method. It is known as natural breaks and is based on natural groupings inherent in the data. Data is clustered into groups that minimise the within-group variance and maximises the between-group variance.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n2) equal\nNext, we will try equal data classification method. This creates a more even distribution as shown.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n3) sd\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"sd\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n4) kmeans\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"kmeans\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n5) fisher\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"fisher\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n💡 Note: At a glance, using Fisher and KMeans lead to similar visualisations.\n\n\n\n4) hclust\nhclust is hierarchical clustering used to create a hierarchy of clusters based on their similarity. Each data point starts as an individual cluster and then progressively merges or splits clusters until a stopping criterion is met.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"hclust\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n5) bclust\nbclust is bagged clustering which creates multiple subsets of the original dataset through resampling. Each subset is then used to train an individual clustering model, and the final cluster assignments are obtained by combining the results from all models.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"bclust\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\n\n5.2 Plotting Choropleth Maps with Custom Breaks\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nLooking at the summary statistics, the break point can be set to 0.60, 0.70, 0.80, and 0.90. The minimum and maximum breaks must also be included, which are 0 adn 100 respectively. These would translate to the breaks vector, c(0, 0.60, 0.70, 0.80, 0.90, 1.00).\n\n# Using this information, we will now proceed to plot the choropleth map.\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          palette=\"plasma\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\n\n\n5.3 Customising Colour Schemes\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\nTo change the colour, we assign the preferred colour to the palette argument of tm_fill() as shown below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"plasma\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nAdd a “-” prefix to reverse the colour shading.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Test.html#controlling-and-customising-map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex2/Test.html#controlling-and-customising-map-layouts",
    "title": "Hands-on Exercise 2",
    "section": "6. Controlling and Customising Map Layouts",
    "text": "6. Controlling and Customising Map Layouts\n\n6.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"plasma\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            #legend.height = 0.45, \n            #legend.width = 0.35,\n            legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n6.2 Map Style\nThe layout of the map can also be adjusted using tmap_style(). E.g. Classic\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n\n6.3 Cartographic Furniture\ntmap also provides arguments to draw other important map elements like compass, scale bar and grid lines.\nTo add compass, scale and gridlines, pay attention to how tm_compass(), tm_scale_bar() and tm_grid() are used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"plasma\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n6.4 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred as facet maps, comprise of many adjacent maps. These facets enable easier visualisation of how spatial relationships change with respect to another variable. Such as, time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\nMethod 1: By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\nAdditionally, the style and palette arguments can be adjusted accordingly.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nMethod 2: By defining a group-by variable in tm_facets()\ntm_facets() can help to group categorical data like regions and subzone areas such that the generated facet maps will zoom in to the specified variable.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\n\nMethod 3: By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"viridis\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"plasma\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Test.html#mappping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex2/Test.html#mappping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 2",
    "section": "7. Mappping Spatial Object Meeting a Selection Criterion",
    "text": "7. Mappping Spatial Object Meeting a Selection Criterion\nMap outputs can also be targeted by using selection functions to meet the selection criterion. For example, we have selected the central region and DEPENDENCY column to plot.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"plasma\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/data/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex1/data/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "In-class Exercise"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-libraries-into-r",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-libraries-into-r",
    "title": "In-class Exercise 2",
    "section": "1. Importing Libraries into R",
    "text": "1. Importing Libraries into R\nIn this exercise, we will use the following R packages:\n\nsf, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\ntidyverse for tidying data (https://tidyr.tidyverse.org/)\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-data-sets-into-r",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-data-sets-into-r",
    "title": "In-class Exercise 2",
    "section": "2. Importing Data Sets into R",
    "text": "2. Importing Data Sets into R\nWe will first import the three geospatial data sets into R using st_read() of the sf package.\n\n2.1 Importing Polygon Feature Data in .shp Format\n\n# Import shapefile\nmpsz14_shp &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n# Retrieve geometry column\nst_geometry(mpsz14_shp)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n# Check class\nclass(mpsz14_shp)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\n\n2.2 Importing Polygon Feature Data in .kml Format\n\n# Import KML file\n#mpsz14_kml &lt;- st_read(\"data/geospatial/MP14_SUBZONE_WEB_PL.kml\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-polygon-feature-data-in-.shp-format",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-polygon-feature-data-in-.shp-format",
    "title": "In-class Exercise 2",
    "section": "2.1 Importing Polygon Feature Data in .shp Format",
    "text": "2.1 Importing Polygon Feature Data in .shp Format\n\n# Import shapefile\nmpsz14_shp &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n# Import KML file\nst_write(mpsz14_shp, \n         \"data/geospatial/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n\nWarning in CPL_write_ogr(obj, dsn, layer, driver,\nas.character(dataset_options), : GDAL Error 4: Unable to open\ndata/geospatial/MP14_SUBZONE_WEB_PL.kml to obtain file list.\n\n\nDeleting source `data/geospatial/MP14_SUBZONE_WEB_PL.kml' failed\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/geospatial/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n\nThere are 3 ways to explore the contents of a simple feature data frame like mpsz!\n\n1) Using st_geometry()\nThe sf data.frame contains a geometry column, that is a list of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry().\n\n# Retrieve geometry column \nst_geometry(mpsz14_shp)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n🔎 Observations: This MP14_SUBZONE_WEB_PL file consists of 323 features, consisting of multipolygon features.\n\n\n\n2) Using glimpse()\nWe use glimpse() from the dplyr package to understand the data type of each fields.\nE.g. FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are in double-precision values.\n\n# Get data types \nglimpse(mpsz14_shp)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n🔎 Observations: This MP14_SUBZONE_WEB_PL file consists of 323 rows and 16 columns with datatypes ranging from integers, characters, date and doubles.\n\n\n\n3) Using head()\nWe use head() from the base R package to get the full information of the feature object mpsz. The n value indicates the no. of rows.\n\n# Display top 5 rows of the feature object \nhead(mpsz14_shp, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n🔎 Observations: We can notice that the MP14_SUBZONE_WEB_PL file consists of 5 features and 15 fields, with the top 5 rows per column."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#using-glimpse",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#using-glimpse",
    "title": "In-class Exercise 2",
    "section": "2) Using glimpse()",
    "text": "2) Using glimpse()\nWe use glimpse() from the dplyr package to understand the data type of each fields.\nE.g. FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are in double-precision values.\n\n# Get data types \nglimpse(mpsz14_shp)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n🔎 Observations: This MP14_SUBZONE_WEB_PL file consists of 323 rows and 16 columns with datatypes ranging from integers, characters, date and doubles.\n\n\n3) Using head()\nWe use head() from the base R package to get the full information of the feature object mpsz. The n value indicates the no. of rows.\n\n# Display top 5 rows of the feature object \nhead(mpsz14_shp, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n🔎 Observations: We can notice that the MP14_SUBZONE_WEB_PL file consists of 5 features and 15 fields, with the top 5 rows per column.\n\n\n\n2.2 Importing Polygon Feature Data in .kml Format\n\n# Import KML file\n#mpsz14_kml &lt;- st_read(\"data/geospatial/MP14_SUBZONE_WEB_PL.kml\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-polygon-feature-data-in-.kml-format",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-polygon-feature-data-in-.kml-format",
    "title": "In-class Exercise 2",
    "section": "2.2 Importing Polygon Feature Data in .kml Format",
    "text": "2.2 Importing Polygon Feature Data in .kml Format\n\n💡 Note: delete_dsn = TRUE will help delete the original data before rendering it"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp14_subzone_web_pl-web-polygon-data-in-.shp-format",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp14_subzone_web_pl-web-polygon-data-in-.shp-format",
    "title": "In-class Exercise 2",
    "section": "2.1 Importing MP14_SUBZONE_WEB_PL (Web) Polygon Data in .shp Format",
    "text": "2.1 Importing MP14_SUBZONE_WEB_PL (Web) Polygon Data in .shp Format\n\n# Import shapefile\nmpsz14_shp &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThere are 3 ways to explore the contents of a simple feature data frame like mpsz!\n\n1) Using st_geometry()\nThe sf data.frame contains a geometry column, that is a list of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry().\n\n# Retrieve geometry column \nst_geometry(mpsz14_shp)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n🔎 Observations: This MP14_SUBZONE_WEB_PL file consists of 323 features, consisting of multipolygon features.\n\n\n\n2) Using glimpse()\nWe use glimpse() from the dplyr package to understand the data type of each fields.\nE.g. FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are in double-precision values.\n\n# Get data types \nglimpse(mpsz14_shp)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n🔎 Observations: This MP14_SUBZONE_WEB_PL file consists of 323 rows and 16 columns with datatypes ranging from integers, characters, date and doubles.\n\n\n\n3) Using head()\nWe use head() from the base R package to get the full information of the feature object mpsz. The n value indicates the no. of rows.\n\n# Display top 5 rows of the feature object \nhead(mpsz14_shp, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n🔎 Observations: We can notice that the MP14_SUBZONE_WEB_PL file consists of 5 features and 15 fields, with the top 5 rows per column."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp14_subzone_web_pl-web-polygon-data-in-.kml-format",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp14_subzone_web_pl-web-polygon-data-in-.kml-format",
    "title": "In-class Exercise 2",
    "section": "2.2 Importing MP14_SUBZONE_WEB_PL (Web) Polygon Data in .kml Format",
    "text": "2.2 Importing MP14_SUBZONE_WEB_PL (Web) Polygon Data in .kml Format\nWe use the below code chunk to export mpsz14_shp sf data.frame into kml file which saves the file into our data folder.\n\n# Convert .shp file into .kml\nst_write(mpsz14_shp, \n         \"data/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n\nDeleting source `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n# Import KML file\nmpsz14_kml = st_read(\"data/MP14_SUBZONE_WEB_PL.kml\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data\\MP14_SUBZONE_WEB_PL.kml' \n  using driver `KML'\nSimple feature collection with 323 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n# Display top 5 rows of the feature object \nhead(mpsz14_kml, n=5)  \n\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.8142 ymin: 1.272838 xmax: 103.8725 ymax: 1.291523\nGeodetic CRS:  WGS 84\n  Name Description                       geometry\n1                  MULTIPOLYGON (((103.8647 1....\n2                  MULTIPOLYGON (((103.8431 1....\n3                  MULTIPOLYGON (((103.8507 1....\n4                  MULTIPOLYGON (((103.8255 1....\n5                  MULTIPOLYGON (((103.8194 1....\n\n\n\n💡 Note: delete_dsn = TRUE will help delete the original data before rendering it"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp19_subzone_web_pl-no-sea-.shp-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp19_subzone_web_pl-no-sea-.shp-data",
    "title": "In-class Exercise 2",
    "section": "2.3 Importing MP19_SUBZONE_WEB_PL (No Sea) .shp Data",
    "text": "2.3 Importing MP19_SUBZONE_WEB_PL (No Sea) .shp Data\n\n# Import shapefile\nmpsz19_shp &lt;- st_read(dsn = \"data\", layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n🔎 Observations: We can notice that the data file consists of 332 features and 6 fields, and follows the WGS64 coordinate system. Here we can notice it uses the `ESRI Shapefile’ driver."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp19_subzone_web_pl-no-sea-.kml-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp19_subzone_web_pl-no-sea-.kml-data",
    "title": "In-class Exercise 2",
    "section": "2.4 Importing MP19_SUBZONE_WEB_PL (No Sea) .kml Data",
    "text": "2.4 Importing MP19_SUBZONE_WEB_PL (No Sea) .kml Data\n\n# Convert .shp file into .kml\nst_write(mpsz19_shp, \n         \"data/MP19_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n\nDeleting source `data/MP19_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP19_SUBZONE_WEB_PL' to data source \n  `data/MP19_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 332 features with 6 fields and geometry type Multi Polygon.\n\n# Import KML file\nmpsz19_kml = st_read(\"data/MP19_SUBZONE_WEB_PL.kml\")\n\nReading layer `MP19_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data\\MP19_SUBZONE_WEB_PL.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n# Display top 5 rows of the feature object \nhead(mpsz19_kml, n=5)  \n\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6537 ymin: 1.216215 xmax: 103.8811 ymax: 1.29742\nGeodetic CRS:  WGS 84\n  Name Description                       geometry\n1                  MULTIPOLYGON (((103.8802 1....\n2                  MULTIPOLYGON (((103.8376 1....\n3                  MULTIPOLYGON (((103.8341 1....\n4                  MULTIPOLYGON (((103.7125 1....\n5                  MULTIPOLYGON (((103.8472 1....\n\n\n\n🔎 Observations: We can notice that the datafile also consists of 332 features and 6 fields, and follows the WGS64 coordinate system, but it uses the kml driver accordingly."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp14_subzone_web_pl-web-.shp-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp14_subzone_web_pl-web-.shp-data",
    "title": "In-class Exercise 2",
    "section": "2.1 Importing MP14_SUBZONE_WEB_PL (Web) .shp Data",
    "text": "2.1 Importing MP14_SUBZONE_WEB_PL (Web) .shp Data\n\n# Import shapefile\nmpsz14_shp &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThere are 3 ways to explore the contents of a simple feature data frame like mpsz!\n\n1) Using st_geometry()\nThe sf data.frame contains a geometry column, that is a list of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry().\n\n# Retrieve geometry column \nst_geometry(mpsz14_shp)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n🔎 Observations: This MP14_SUBZONE_WEB_PL file consists of 323 features, consisting of multipolygon features.\n\n\n\n2) Using glimpse()\nWe use glimpse() from the dplyr package to understand the data type of each fields.\nE.g. FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are in double-precision values.\n\n# Get data types \nglimpse(mpsz14_shp)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n🔎 Observations: This MP14_SUBZONE_WEB_PL file consists of 323 rows and 16 columns with datatypes ranging from integers, characters, date and doubles.\n\n\n\n3) Using head()\nWe use head() from the base R package to get the full information of the feature object mpsz. The n value indicates the no. of rows. I will use thiis method for this in-class exercise.\n\n# Display top 5 rows of the feature object \nhead(mpsz14_shp, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n🔎 Observations: We can notice that the MP14_SUBZONE_WEB_PL file consists of 5 features and 15 fields, with the top 5 rows per column."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp14_subzone_web_pl-web-.kml-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-mp14_subzone_web_pl-web-.kml-data",
    "title": "In-class Exercise 2",
    "section": "2.2 Importing MP14_SUBZONE_WEB_PL (Web) .kml Data",
    "text": "2.2 Importing MP14_SUBZONE_WEB_PL (Web) .kml Data\nWe use the below code chunk to export mpsz14_shp sf data.frame into kml file which saves the file into our data folder.\n\n# Convert .shp file into .kml\nst_write(mpsz14_shp, \n         \"data/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n\nDeleting source `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n# Import KML file\nmpsz14_kml = st_read(\"data/MP14_SUBZONE_WEB_PL.kml\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data\\MP14_SUBZONE_WEB_PL.kml' \n  using driver `KML'\nSimple feature collection with 323 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n# Display top 5 rows of the feature object \nhead(mpsz14_kml, n=5)  \n\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.8142 ymin: 1.272838 xmax: 103.8725 ymax: 1.291523\nGeodetic CRS:  WGS 84\n  Name Description                       geometry\n1                  MULTIPOLYGON (((103.8647 1....\n2                  MULTIPOLYGON (((103.8431 1....\n3                  MULTIPOLYGON (((103.8507 1....\n4                  MULTIPOLYGON (((103.8255 1....\n5                  MULTIPOLYGON (((103.8194 1....\n\n\n\n💡 Note: delete_dsn = TRUE will help delete the original data before rendering it"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In-class Exercise"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#in-class-exercise-objectives",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#in-class-exercise-objectives",
    "title": "In-class Exercise 1",
    "section": "In-class Exercise Objectives",
    "text": "In-class Exercise Objectives\nIn this week’s in-class Exercise 1, I explored the setting up of our RStudio and installed all R tools required for this IS314 Geospatial Analytics and Application module."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#steps-taken-in-this-exercise",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#steps-taken-in-this-exercise",
    "title": "In-class Exercise 1",
    "section": "Steps Taken in this Exercise",
    "text": "Steps Taken in this Exercise\nTo create this exercise file, I first created a sub-folder under the In-class_Ex folder and named it In-class_Ex1 and created this Quarto document by executing the following steps:\n\nClick “File” tab\nClick “New File”\nUnder “New File”, select “Quarto Document”\n\n\n🔎 Observations: A new file is added in File Explorer with a .qmd file format. You will need to save the file and label it a name for the file to render and load.\n\nNext, I created the header of this document by adding YAML code that can be indicated using back-ticks ``` &lt;add code here&gt; ```. Within the YAML code, I indicated the document title, writer, publishing date and modifcation date as displayed accordingly in this webpage."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/data/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex2/data/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Hands-on Exercise"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "1. Getting Started",
    "text": "1. Getting Started\nIn this exercise, I will be exploring the basic methods of spatial point pattern analysis - split into two parts.\n\nPart 1: [1st Order Spatial Point Patterns Analysis]\nPart 2: [2nd Order Spatial Point Patterns Analysis]\n\nIn particular, I will be using the spatstat package for this exercise.\n\n💡 What’s spatstat? the spatstat package is a comprehensive package for the analysis of spatial point patterns. It is a very powerful package, but it is also very complex. We will only be using a small subset of the functionality of the package. (More info can be found on this spatstat website)\n\nThe goal of this exercise is to discover the spatial point processes of childecare centres in Singapore by answering the following questions:\n\nAre the childcare centres in Singapore randomly distributed throughout the country?\nIf no, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#lets-set-up",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#lets-set-up",
    "title": "Hands-on Exercise 3",
    "section": "2. Let’s Set Up!",
    "text": "2. Let’s Set Up!\n\n2.1 Importing Libraries into R\nIn this exercise, we will use the following R packages:\n\nsf, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nNow, let’s install and load these packages in RStudio.\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n\n\n\n2.2 Download Data and Set Up Folders\nWe will use 3 data sets for this exercise:\n\nCHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from data.gov.sg and is in geojson format.\nMP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from data.gov.sg.\nCostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.\n\nThis is the file structure for containing the data files that I have extracted."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#import-data-sets-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#import-data-sets-into-r",
    "title": "Hands-on Exercise 3",
    "section": "3. Import Data Sets into R",
    "text": "3. Import Data Sets into R\nWe will first import the three geospatial data sets into R using st_read() of the sf package.\n\nchildcare_sf &lt;- st_read(\"data/aspatial/child-care-services-geojson.geojson\") %&gt;% st_transform(crs = 3414) \n\nReading layer `child-care-services-geojson' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex3\\data\\aspatial\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nsg_sf &lt;- st_read(dsn = \"data/geospatial\", layer=\"CostalOutline\")  \n\nReading layer `CostalOutline' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\nmpsz_sf &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 3",
    "section": "4. Geospatial Data Wrangling",
    "text": "4. Geospatial Data Wrangling\n\n4.1 Standardising Coordinate Systems\nBefore we proceed, let’s check if the geospatial data sets are projected in the same projection system.\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n💡 Observations: Notice that sg_sf and mpsz_sf is in the SVY21 coordinate system format, but their EPSG code is wrongly indicated as 9001, instead of 3414.\n\nLet’s assign the correct ESPG code to mpsz_sf and sg_sf simple feature data frames:\n\nsg_sf &lt;- st_transform(sg_sf, 3414)\nmpsz_sf &lt;- st_transform(mpsz_sf, 3414)\n\n\n\n4.2 Mapping the Geospatial Data Sets\nNext, let’s map the geospatial data sets to show their spatial patterns.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_sf) +\n  qtm(childcare_sf)\n\n\n\n\n\n\n\n\n\n💡 Observations: We can see that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\n\nAlternatively, we can also prepare a pin map by using the code chunk below.\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\n💡 Note: remember to switch back to plot mode after the interactive map as each interactive mode will consume a connection. It is also advised to avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\n\n\n4.3 Converting the Simple Features to sp’s Spatial* Class\nWhen we convert childcare_sf geojson data to a Spatial class, we can observe below that the childcare_sf data is still stored in the Description attribute and has not been fully utilised. In particular, it is in a HTML format\n\nchildcare &lt;- as_Spatial(childcare_sf)\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\nAs such, let us transform this data to make it more meaningful and easier for us to read.\n\nlibrary(xml2)\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nchildcare_validity &lt;- st_is_valid(childcare_sf)\nchildcare_invalid &lt;- which(!childcare_validity)\nif (length(childcare_invalid) &gt; 0) {\n  print(\"ChildCare Invalid!\")\n  print(childcare_sf[childcare_invalid, ])\n} else {\n  print(\"it's valid!\")\n}\n\n[1] \"it's valid!\"\n\n# Ensure the geometry column is preserved\ngeometry_column &lt;- st_geometry(childcare_sf)\nparse_description &lt;- function(html_string) {\n  html &lt;- read_html(html_string)\n  html &lt;- html %&gt;% html_nodes(\"tr\") %&gt;% .[!grepl(\"Attributes\", .)]\n  headers &lt;- html %&gt;% html_nodes(\"th\") %&gt;% html_text(trim = TRUE)\n  values &lt;- html %&gt;% html_nodes(\"td\") %&gt;% html_text(trim = TRUE)\n  \n  # Handle cases where the number of headers and values don't match\n  if (length(headers) != length(values)) {\n    max_length &lt;- max(length(headers), length(values))\n    headers &lt;- c(headers, rep(\"ExtraHeader\", max_length - length(headers)))\n    values &lt;- c(values, rep(\"NULL\", max_length - length(values)))\n  }\n  \n  setNames(values, headers)\n}\n\n# Apply parsing function, unnest the description fields, and remove the original 'Description' column\nchildcare_sf &lt;- childcare_sf %&gt;% \n  mutate(Description_parsed = map(Description, parse_description)) %&gt;%\n  unnest_wider(Description_parsed) %&gt;%\n  select(-Description)  # Remove the original 'Description' column\n\n# Overwrite the 'Name' column with the 'LANDYADDRESSPOINT' column values\nchildcare_sf &lt;- childcare_sf %&gt;%\n  mutate(Name = NAME)  # Overwrite 'Name' with 'LANDYADDRESSPOINT'\n\n# Replace empty strings or NA across all columns with \"NULL\"\nchildcare_sf &lt;- childcare_sf %&gt;%\n  mutate(across(!geometry, ~ ifelse(is.na(.) | . == \"\", \"NULL\", .)))\n\n# Reassign the geometry to the dataframe\nst_geometry(childcare_sf) &lt;- geometry_column\n# Ensure it's still an sf object\nclass(childcare_sf)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nWe will now convert the sf geospatial data frames to sp Spatial* class and display the information of these three Spatial* classes.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 16\nnames       :                    Name, ADDRESSBLOCKHOUSENUMBER, ADDRESSBUILDINGNAME, ADDRESSPOSTALCODE,                                                                       ADDRESSSTREETNAME, ADDRESSTYPE,         DESCRIPTION, HYPERLINK, LANDXADDRESSPOINT, LANDYADDRESSPOINT,                    NAME, PHOTOURL, ADDRESSFLOORNUMBER,          INC_CRC,     FMEL_UPD_D, ... \nmin values  :    3-IN-1 FAMILY CENTRE,                    NULL,                NULL,            018989,                                                  1 & 3, Stratton Road, SINGAPORE 806787,        NULL, Child Care Services,      NULL,                 0,                 0,    3-IN-1 FAMILY CENTRE,     NULL,               NULL, 00A958622500BF89, 20200812221033, ... \nmax values  : ZEE SCHOOLHOUSE PTE LTD,                    NULL,                NULL,            829646, UPPER BASEMENT LEVEL, WEST WING, TERMINAL 1, SINGAPORE CHANGI AIRPORT, SINGAPORE 819642,        NULL,                NULL,      NULL,                 0,                 0, ZEE SCHOOLHOUSE PTE LTD,     NULL,               NULL, FFCFA88A8CE5665A, 20200826094036, ... \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\n\n💡 Observations: each data frame has been converted into their respective Spatial Points and Spatial Polygons data frames.\n\n\n\n4.4 Converting the Spatial* Class Into Generic sp Format, then ppp Object Format\nThe spatstat package requires analytical data in planar point pattern (ppp) object format. As there is no direct way to convert a Spatial* classes into ppp object, we will need to convert the Spatial* classes into a Spatial object first.\n\nStep 1: Convert Spatial* classes into generic Spatial objects\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nHere is a display of the sp objects properties as shown below.\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n💡 Observations: However, notice that the sp objects do not contain information such as, variables, names, min values and max values.\n\n\n\nStep 2: Converting the sp objects into ppp objects\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp &lt;- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\n\nWarning: data contain duplicated points\n\n\nLet’s plot the ppp object to see what it looks like.\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\nWe can also take a quick look at the ppp object properties by using the code chunk below.\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n💡 Observations: Notice the warning message about duplicates. In spatial point patterns analysis, the presence of duplicates is a significant issue as the statistical methodology used is based largely on the assumption that points represent a unique location.\n\n\n\n\n4.5 Handling the duplicates\nWe can check the duplication in a ppp object by using the code chunk below.\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of coincidence point, we will use the multiplicity() function as shown.\n\nmultiplicity(childcare_ppp)\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 128\n\n\n\n💡 Observations: The output shows that there are 338 duplicated point events.\n\nTo view the locations of these duplicate point events, we will plot childcare data accordingly.\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\n\n\n\n\n\n\nNote\n\n\n\n💡 How to identify duplicated points? duplicated points can be discovered by looking at the darker spots.\nThree ways to handle the duplicates:\n\nRemove the duplicates: This is the easiest way to handle the duplicates. However, it is not recommended because it will result in loss of information.\nJittering: Add a small amount of random noise to the duplicated points so they do not occupy the exact same space.\nMake each point unique by adding a unique identifier to each point as marks. This is the most recommended way to handle the duplicates. However, it is also the most tedious way to handle the duplicates.\n\n\n\nWith that said, we will use the second method to handle the duplicates. We will use the jitter() function to add a small amount of random noise to the duplicated points.\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n# Check for duplicate points in the data\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\n4.6 Creating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to convert the sg SpatialPolygon object into owinobject of spatstat.\n\nsg_owin &lt;- as.owin(sg_sf)\n\nThe output can be displayed using the plot() function\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\nand summary() function of base R\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n\n4.7 Combining Point Events Object and owin Object\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the codes below.\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe ppp object outputted from combining both the point and polygon feature is shown below.\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nNext, I plot the newly created childcareSG_ppp object as shown.\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#kernel-density-estimation",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#kernel-density-estimation",
    "title": "Hands-on Exercise 3",
    "section": "5. Kernel Density Estimation",
    "text": "5. Kernel Density Estimation\nIn this section, I will be computing the kernel density estimation (KDE) of childcare services in Singapore by using density() of the spatstat package.\nHere are the following configurations of density():\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is Gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\n5.1 Compute a Kernel Density\nThe code chunk below computes a kernel density by using the\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\nThe plot() function of Base R is then used to display the kernel density derived.\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\n💡 Observations: The density values of the output range from 0 to 0.000035 which is way too small to comprehend!\n💡 Why? It is worth noting that the default unit of measurement of SVY21 is in meter. As a result, the density values computed is in “number of points per square meter”.\n\nAs a side note, one can retrieve the bandwidth used to compute the KDE layer by using the code chunk below.\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\n5.2 Re-scalling KDE values\nTo make the density values more comprehensible, we will rescale the density values from meter to kilometer using rescale().\n\nchildcareSG_ppp.km &lt;- rescale(childcareSG_ppp, 1000, \"km\")\n\nNow, we can re-run the density() function to compute the KDE map.\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\n\n💡 Observations: Notice the output image looks identical to the earlier version, the only changes in the data values (refer to the legend).\n\n\n\n5.3 Working with Different Automatic Bandwidth Methods\nBesides bw.diggle(), there are other automatic bandwidth selection methods that can be used to determine the bandwidth. Such as bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n bw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n bw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n bw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\n\n\n\n\n\n\nNote\n\n\n\nTo use bw.diggle() or bw.ppl()?\nBaddeley et. (2016) suggested to use bw.ppl() when the pattern consists predominantly of tight clusters. While the bw.diggle() method works better when detecting a single tight cluster in the midst of random noise.\n\n\n\n# Let's compare the outputs!\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\n\n\n5.4 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is Gaussian. Nonetheless, there are 3 other options: Epanechnikov, Quartic and Dics.\nLet’s compute these three other kernel density estimations by indicating the kernel method as such.\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\n\n\n\n\n\n\n\n\n\n\n5.5. Fixed and Adaptive KDE\n\n5.5.1 Computing KDE by using fixed bandwidth\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\n\n5.5.2 Computing KDE by using adaptive bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, you will learn how to derive adaptive kernel density estimation by using density.adaptive() of spatstat.\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n\n5.5.3 Converting KDE output into grid object\nThe result is the same, we just convert it so that it is suitable for mapping purposes\n\nkde_raster &lt;- raster(kde_childcareSG.bw)\ngridded_kde_childcareSG_bw &lt;- as(kde_raster, \"SpatialGridDataFrame\")\n\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\nStep 1) Converting gridded output into raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG.bw)\n\nLet us take a look at the properties of kde_childcareSG_bw_raster RasterLayer.\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n💡 Observations: Notice that the CRS property is NA.\n\n\n\nStep 2) Assigning projection systems\nThe code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer.\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n💡 Observations: Notice that the CRS property is now completed.\n\n\n\n\n5.5.4 Visualising KDE Layer output in tmap\nFinally, we will display the KDE raster layer in cartographic quality map using tmap package.\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette=\"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\n\n💡 Observations: Notice that the raster values are encoded explicitly onto the raster pixel using the values in “layer” field.\n\n\n\n5.5.5 Comparing Spatial Point Patterns using KDE\nNext, I will compare the KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\nStep 1) Extracting Study Area\nThe code chunk below will be used to extract the target planning areas.\n\n# Extracting the planning areas\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\nNext, let’s plot the target planning areas.\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\n\nStep 2) Creating owin Object\nNow, we will convert these sf objects into owin objects that is required by spatstat.\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\n\nStep 3) Combining Childcare Points and Study Area\nNext, we run these codes to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nNext, rescale.ppp() function is used to trasnform the unit of measurement from metre to kilometre.\n\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nStep 4) Computing KDE\nThe code chunk below will be used to compute the KDE of these four planning area. The bw.diggle() method is used to derive the bandwidth of each planning area.\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nStep 5) Computing Fixed Bandwidth KDE\nFor comparison purposes with fixed bandwidth KDE, we will use 250m as the bandwidth.\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#fixed-and-adaptive-kde",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#fixed-and-adaptive-kde",
    "title": "Hands-on Exercise 3",
    "section": "5.5. Fixed and Adaptive KDE",
    "text": "5.5. Fixed and Adaptive KDE\n\n5.5.1 Computing KDE by using fixed bandwidth\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\n\n5.5.2 Computing KDE by using adaptive bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, you will learn how to derive adaptive kernel density estimation by using density.adaptive() of spatstat.\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n\n5.5.3 Converting KDE output into grid object\nThe result is the same, we just convert it so that it is suitable for mapping purposes\n\nkde_raster &lt;- raster(kde_childcareSG.bw)\ngridded_kde_childcareSG_bw &lt;- as(kde_raster, \"SpatialGridDataFrame\")\n\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\nStep 1) Converting gridded output into raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG.bw)\n\nLet us take a look at the properties of kde_childcareSG_bw_raster RasterLayer.\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n💡 Observations: Notice that the CRS property is NA.\n\n\n\nStep 2) Assigning projection systems\nThe code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer.\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n💡 Observations: Notice that the CRS property is now completed.\n\n\n\n\n5.5.4 Visualising KDE Layer output in tmap\nFinally, we will display the KDE raster layer in cartographic quality map using tmap package.\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette=\"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\n\n💡 Observations: Notice that the raster values are encoded explicitly onto the raster pixel using the values in “layer” field.\n\n\n\n5.5.5 Comparing Spatial Point Patterns using KDE\nNext, I will compare the KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\nStep 1) Extracting Study Area\nThe code chunk below will be used to extract the target planning areas.\n\n# Extracting the planning areas\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\nNext, let’s plot the target planning areas.\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\n\nStep 2) Creating owin Object\nNow, we will convert these sf objects into owin objects that is required by spatstat.\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\n\nStep 3) Combining Childcare Points and Study Area\nNext, we run these codes to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nNext, rescale.ppp() function is used to trasnform the unit of measurement from metre to kilometre.\n\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nStep 4) Computing KDE\nThe code chunk below will be used to compute the KDE of these four planning area. The bw.diggle() method is used to derive the bandwidth of each planning area.\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nStep 5) Computing Fixed Bandwidth KDE\nFor comparison purposes with fixed bandwidth KDE, we will use 250m as the bandwidth.\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#nearest-neighbour-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#nearest-neighbour-analysis",
    "title": "Hands-on Exercise 3",
    "section": "6. Nearest Neighbour Analysis",
    "text": "6. Nearest Neighbour Analysis\nIn this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\nThe test hypotheses are:\n\nHo = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confident interval will be used.\n\n\n6.1 Testing spatial point patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55631, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\n💡 Observations: The output shows that the p-value is less than 0.05. Therefore, we reject the null hypothesis and conclude that the distribution of childcare services are not randomly distributed. We can also see that the R value is less than 1. This means that the distribution of childcare services are clustered.\n\n\n\n6.2 Clark and Evans Test: Choa Chu Kang planning area\nIn the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.95348, p-value = 0.487\nalternative hypothesis: two-sided\n\n\n\n\n6.3 Clark and Evans Test: Tampines planning area\nIn the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.79145, p-value = 0.0001673\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#analysing-spatial-point-process-using-g-function",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#analysing-spatial-point-process-using-g-function",
    "title": "Hands-on Exercise 3",
    "section": "7. Analysing Spatial Point Process Using G-Function",
    "text": "7. Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using Gest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n7.1 Choa Chu Kang planning area\n\n7.1.1 Computing G-function Estimation\nThe code chunk below is used to compute G-function using Gest() of spatat package.\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n\n7.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n# Monte Carlo test with G-function\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n# Plot\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\n\n\n\n7.2 Tampines planning area\n\n7.2.1 Computing G-function Estimation\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\n\n\n\n\n7.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n# Monte Carlo test with G-function\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n# Plot\nplot(G_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#analysing-spatial-point-process-using-f-function",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#analysing-spatial-point-process-using-f-function",
    "title": "Hands-on Exercise 3",
    "section": "8. Analysing Spatial Point Process Using F-Function",
    "text": "8. Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using Fest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n8.1 Choa Chu Kang planning area\n\n8.1.1 Computing F-function Estimation\nThe code chunk below is used to compute F-function using Fest() of spatat package.\n\n# Computing F-function estimation \nF_CK = Fest(childcare_ck_ppp) \n\n# Plot\nplot(F_CK)\n\n\n\n\n\n\n\n\n\n\n8.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n# Monte Carlo test with F-function\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n# Plot\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\n\n\n\n8.2 Tampines planning area\n\n8.2.1 Computing F-function Estimation\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\n\n\n8.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n# Monte Carlo test with F-function\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n# Plot\nplot(F_CK.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#analysing-spatial-point-process-using-k-function",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#analysing-spatial-point-process-using-k-function",
    "title": "Hands-on Exercise 3",
    "section": "9. Analysing Spatial Point Process Using K-Function",
    "text": "9. Analysing Spatial Point Process Using K-Function\nK-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using Kest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n9.1 Choa Chu Kang planning area\n\n9.1.1 Computing K-function Estimation\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n9.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n# Monte Carlo test with F-function\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n# Plot\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\n\n\n\n9.2 Tampines planning area\n\n9.2.1 Computing K-function Estimation\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n9.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n# Monte Carlo test with F-function\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n# Plot\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#analysing-spatial-point-process-using-l-function",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#analysing-spatial-point-process-using-l-function",
    "title": "Hands-on Exercise 3",
    "section": "10. Analysing Spatial Point Process Using L-Function",
    "text": "10. Analysing Spatial Point Process Using L-Function\nIn this section, I will be computing L-function estimation by using Lest() of spatstat package. I will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n10.1 Choa Chu Kang planning area\n\n10.1.1 Computing L-Function Estimation\nFirstly, let’s compute the L-function estimation for Choa Chu Kang.\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n10.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n# Monte Carlo test with L-function\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n# Plot\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\n\n\n\n10.2 Tampines planning area\n\n10.2.1 Computing L-Function Estimation\nNext, let’s compute the L-function estimation for Tampines.\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n10.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nThe code chunk below will be used to perform the hypothesis testing.\n\n# Monte Carlo test with L-function\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n# Plot\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In-class Exercise"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#issue-1-installing-maptools",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#issue-1-installing-maptools",
    "title": "In-class Exercise 3",
    "section": "Issue #1: Installing maptools",
    "text": "Issue #1: Installing maptools\nmaptools have been retired and binary have been removed from CRAN. However, we can download from Posit Public Package Manager snapshots by using this code chunk below.\n\n# You can use this but it's not encouraged since maptools has depreciated!\ninstall.packages(\"maptools\",\n                 repos = \"https://packagemanager.posit.co/cran/2023-10-13\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#issue-2-creating-coastal-outline-data",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#issue-2-creating-coastal-outline-data",
    "title": "In-class Exercise 3",
    "section": "Issue #2: Creating Coastal Outline Data",
    "text": "Issue #2: Creating Coastal Outline Data\nIn sf package, there are two functions that allow us to combine multiple simple features into one simple features. They are st_ combine() and st_union().\n\nst_combine() returns a single, combined geometry, with no resolved boundaries; returned geometries may well be invalid.\nIf y is missing, st_union(x) returns a single geometry with resolved boundaries, else the geometries for all unioned pairs of xi] and yfil.\n\n\n# Impmort dataset into R\nmpsz_sf &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n# Derive costal outline sf tibble data.frame\nsg_sf &lt;- mpsz_sf %&gt;%\n  st_union()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#issue-3-converting-data-to-spatialgriddataframe",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#issue-3-converting-data-to-spatialgriddataframe",
    "title": "In-class Exercise 3",
    "section": "Issue #3: Converting Data to SpatialGridDataFrame",
    "text": "Issue #3: Converting Data to SpatialGridDataFrame\nSince maptools isn’t installed in the Hands-on Exercise 3, we will need to use another method for converting the results of kde_childcareSG.bw to a Spatial Grid Data Frame.\n\n## This code won't work anymore\n# gridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\n\n## This code should work instead\n# kde_raster &lt;- raster(kde_childcareSG.bw)\n# gridded_kde_childcareSG_bw &lt;- as(kde_raster, \"SpatialGridDataFrame\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1 - Part 1",
    "section": "",
    "text": "The conflict in Myanmar is not just a result of the coup but is deeply rooted in the country’s decades-old complex ethnic and political landscape, characterised by tensions between the central government and various ethnic minority groups, each with its own armed forces. The post-coup violence has exacerbated these long-standing conflicts, leading to a severe humanitarian crisis, with thousands killed, hundreds of thousands displaced, and widespread human rights abuses reported.\n\n\n\nAs such, Geospatial analytics has become a valuable tool for evaluating and comprehending the intricacies of increasing conflicts. This exercise aims to reveal the spatial and spatio-temporal distribution of armed conflict in Myanmar by leveraging spatial point pattern analysis. Additionally, it aims to gain clearer insights into the geographical and logistical patterns of violence throughout the nation.\nBy the end of this take-home exercise, I aim to complete these steps in my spatial point pattern analysis in uncovering the distribution of armed conflict in Myanmar.\n\nUsing appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps.\n\n\n\n\n\n\nThis Armed Conflict Location & Event Data (ACLED) is an independent, impartial, international non-profit organisation which owns an extensive database of violent conflict and protest in countries and territories around the world.\n\nFor the purpose of this exercise, I have downloaded ACLED’s data on Myanmar which includes a series of conflict events, particularly between 1 January 2021 to 30 June 2024.\n🔗 Source: ACLED\n📁 Format: comma separated values (CSV)\nAs the dataset is rather extensive, I will be performing my analysis on armed conflict events in a quarterly basis to streamline my tasks. The data included in this dataset are as follows:\n\n\n\nEvent Type\nACLED categorises events into various types. I will mainly be focusing on these four event types: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\nevent_id_cnty: unique ID for each conflict\nevent_type: category of event e.g. Battle, Violence Against Civilians, Protests, Explosions/Remote Violence, Strategic Developments\nsub_event_type: a more detailed classification within event type\ndisorder_type: classifies the event based on the nature of the disorder e.g. political violence, demonstrations, strategic developments[A1]\ncivilian_targeting: yes/no value, whether event involves specifically targeting civilians\nNote: when “strategic developments” are used in Event Type, it is also used in the disorder type (vice-versa)\n\n\n\nLocation and Geospatial Data\nThe database provides detailed geographic information, pinpointing the exact or approximate locations of conflict events across Myanmar. This includes cities, towns, and rural areas.\n\niso: the country code for Myanmar which uses 104 in this case\nregion: region of conflict within Myanmar\ncountry: indicates Myanmar\nadmin1, admin2, admin3: 1st, 2nd and 3rd level administration division within Myanmar e.g. states, division, sub-division\nlocation: specific geographic location or name of the place where the conflict event occurred\nlatitude: latitude of the conflict event\nlongitude: longitude of the conflict event\ngeo_precision: indicates the level of precision for the geographic coordinates provided\n\n\n\nDate and Time\nACLED records the specific dates and, where possible, times of conflict events.\n\nevent_date: date of conflict\nyear: year of conflict\ntime_precision: accuracy of the date and time information provided\n\n\n\nActors\n\nIndicate the actors involved in the conflict, such as the Tatmadaw (Myanmar’s military), ethnic armed organizations, local militias, civilian protestors, and other groups.\nactor1: primary actor involved in the conflict event. E.g. a government force, rebel group, militia, or any organised entity\nassoc_actor_1: a secondary group that is aligned with or supports the primary actor (Actor1) in the event\ninter1: an interaction code that categorises actor1, could be a government force, rebel group, military force, rioter, civilian, or other entities\ninteraction: combined description of actor1 and actor2 (no particular order of aggression)\n\n\n\nFatalities\n\nfatalities: tracks the number of reported fatalities associated with each conflict event\n\n\n\nOthers\n\nsource: source of information for the conflict event\nsource_scale: scale of the source e.g. local, national, international\nnotes : additional comments\ntags: keywords associated with the conflict event\ntimestamp: date and time when conflict event was entered/updated in the database\n\n\n\n\n\n\n\nI will also be using a geospatial dataset from the Myanmar Information Management Unit (MIMU) in shapefile (.shp) format, specifically of the Myanmar state at the 2nd administrative level with district boundaries.\n🔗 Source: MIMU\n📁 Format: shapefile (.shp)\nMy reason for choosing the district boundary dataset is that we do not want to select a boundary dataset that is too generalised when analysing conflict events since it might not provide sufficient insights to trends where conflict events happen. Neither do we want to analyse a geography that is too detailed (e.g. Admin 3 - townships) since it can be computationally inefficient as seen in the types of boundary data below.\n\n\n\n\n\nI have donwloaded the two data sets and organised them into my folder as follows."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#lets-set-up",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#lets-set-up",
    "title": "Take-home Exercise 1 - Part 1",
    "section": "2. Let’s Set Up!",
    "text": "2. Let’s Set Up!\n\n2.1 Importing Libraries into R\nTo carry out this exercise, I will be using the following R packages:\n\nsf: a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\nspatstat: has a wide range of useful functions for point pattern analysis. In this take-home exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\nraster: reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this take-home exercise, it will be used to convert image output generate by spatstat into raster format.\ntmap / sparr: provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\ntidyverse / dplyr: for transforming and organising data for analysis\nmagick: used for plotting animated map plots into GIFs for the spatio-temporal point pattern analysis\n\nNow, let’s install and load these packages in RStudio.\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse, magick, dplyr)\n\n\n\n2.2 Importing Data Sets into R\n\n1) Armed Conflicts Data\nNext, I will import the downloaded armed conflict data. For aspatial datasets like this, we will import into Rstudio using read_csv() function of the readr package.\n\n# Import armed conflict data\nconflict_data &lt;- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n\nRows: 87746 Columns: 28\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (18): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (10): year, time_precision, inter1, interaction, iso, latitude, longitud...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe 2021-01-01-2024-06-30-Myanmar.csv dataset contains 87746 rows and 28 columns which indicates the presence of 87746 unique armed conflict events in Myanmar.\n\n\nAfter importing the dataset, we can inspect the dataset using the glimpse() function.\n\n# Inspect the conflict data\nglimpse(conflict_data)\n\nRows: 87,746\nColumns: 28\n$ event_id_cnty      &lt;chr&gt; \"MMR64313\", \"MMR64313\", \"MMR64320\", \"MMR64320\", \"MM…\n$ event_date         &lt;chr&gt; \"30 June 2024\", \"30 June 2024\", \"30 June 2024\", \"30…\n$ year               &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 202…\n$ time_precision     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ disorder_type      &lt;chr&gt; \"Political violence\", \"Political violence\", \"Politi…\n$ event_type         &lt;chr&gt; \"Battles\", \"Battles\", \"Battles\", \"Battles\", \"Battle…\n$ sub_event_type     &lt;chr&gt; \"Armed clash\", \"Armed clash\", \"Armed clash\", \"Armed…\n$ actor1             &lt;chr&gt; \"People's Defense Force - Mandalay\", \"Military Forc…\n$ assoc_actor_1      &lt;chr&gt; \"MDA - AGF: Madaya - The Authentic Genes Force; SST…\n$ inter1             &lt;dbl&gt; 3, 1, 3, 1, 3, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 2, 1, …\n$ interaction        &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 10, 13, 13, 10, 12, 12, 12,…\n$ civilian_targeting &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ iso                &lt;dbl&gt; 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1…\n$ region             &lt;chr&gt; \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia…\n$ country            &lt;chr&gt; \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma…\n$ admin1             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Ma…\n$ admin2             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Pyinoolwin\", \"Pyinoolwin\",…\n$ admin3             &lt;chr&gt; \"Patheingyi\", \"Patheingyi\", \"Singu\", \"Singu\", \"Thab…\n$ location           &lt;chr&gt; \"Aung Tha Pyay\", \"Aung Tha Pyay\", \"Pin Lel Gyi\", \"P…\n$ latitude           &lt;dbl&gt; 22.1504, 22.1504, 22.5752, 22.5752, 22.8800, 22.880…\n$ longitude          &lt;dbl&gt; 96.2364, 96.2364, 96.0661, 96.0661, 95.9700, 95.970…\n$ geo_precision      &lt;dbl&gt; 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, …\n$ source             &lt;chr&gt; \"Democratic Voice of Burma; Irrawaddy\", \"Democratic…\n$ source_scale       &lt;chr&gt; \"National\", \"National\", \"National\", \"National\", \"Na…\n$ notes              &lt;chr&gt; \"On 30 June 2024, near Aung Tha Pyay village (Pathe…\n$ fatalities         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, …\n$ tags               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ timestamp          &lt;dbl&gt; 1720552468, 1720552468, 1720552468, 1720552468, 172…\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe event_date field shows that it uses a character datatype instead of date - we will fix this later. Also, we can observe that thelongitude and langitude fields appear to be adopting the WGS84 geographic coordinate system since they are in the -180/180 and -90/90 range respectively.\n\n\n\n\n2) Myanmar Boundary Data\n\n\n\n\n\n\nObservations\n\n\n\nWhen working with Myanmar’s boundary, we need to assign the appropriate coordinate reference system. However, since Myanmar is split into two UTM - West Myanmar (crs: 32646) and East Myanmar (crs: 32647).\n\n\nHence, I will also import the administrative boundary data into a simple features tibble data.frame using st_read() of the sf package and check the number of rows returned for both CRS 32646 and 32647. This function reads the shapefile data and returns an sf object that can be used for further analysis.\n\n\nFind out conflicts count by CRS\nconflict_crs &lt;- st_as_sf(conflict_data, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Count number of conflicts for CRS 32646\nconflict_data_32646 &lt;- st_transform(conflict_crs, crs = 32646)\ncount_32646 &lt;- nrow(conflict_data_32646)\n# Count number of conflicts for CRS 32647\nconflict_data_32647 &lt;- st_transform(conflict_crs, crs = 32647)\ncount_32647 &lt;- nrow(conflict_data_32647)\n\ncrs_counts &lt;- data.frame(\n  CRS = c(\"EPSG: 32646\", \"EPSG: 32647\"),\n  Conflicts_Count = c(count_32646, count_32647)\n)\n\nprint(crs_counts)\n\n\n          CRS Conflicts_Count\n1 EPSG: 32646           87746\n2 EPSG: 32647           87746\n\n\nSince there is no difference in the count, I will decide to focus on UTM zone 47N (EPSG:32647), east of Myanmar, for the purpose of this exercise. The st_transform() function below converts the CRS of the sf object to EPSG:32647.\n\n# Import boundary data\nboundary_sf &lt;- st_read(dsn = \"data/geospatial\",layer = \"mmr_polbnda_adm2_250k_mimu\") %&gt;% st_transform(crs = 32647)\n\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Take-home_Ex\\Take-home_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nIn the code below, we can notice that the ESPG code has been updated to 32647.\n\n# Check for changes\nst_crs(boundary_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nHere, I will use the plot() function which plots the geometry of the sf object. The st_geometry() function is used to extract the geometry of the mpsz_sf object which includes the districts of Myanmar as shown below.\n\npar(mar = c(0,0,0,0))\nplot(st_geometry(boundary_sf))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "title": "Take-home Exercise 1 - Part 1",
    "section": "3. Data Wrangling",
    "text": "3. Data Wrangling\n\n3.1 Fixing Incorrect Datatypes\nRecall that the earlier inspection of the conflict_data tibble data frame revealed that the datatype indicated for event date is wrongly labelled as a character instead of a date format.\nAs such, let’s convert the datatype to the correct ‘date’ format as shown below.\n\n# Convert the datatype for event_date\nconflict_data$event_date &lt;- as.Date(conflict_data$event_date, format = \"%d %B %Y\")\n\n# Check for changes\nhead(conflict_data)\n\n# A tibble: 6 × 28\n  event_id_cnty event_date  year time_precision disorder_type      event_type\n  &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;     \n1 MMR64313      2024-06-30  2024              1 Political violence Battles   \n2 MMR64313      2024-06-30  2024              1 Political violence Battles   \n3 MMR64320      2024-06-30  2024              1 Political violence Battles   \n4 MMR64320      2024-06-30  2024              1 Political violence Battles   \n5 MMR64321      2024-06-30  2024              1 Political violence Battles   \n6 MMR64321      2024-06-30  2024              1 Political violence Battles   \n# ℹ 22 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;,\n#   region &lt;chr&gt;, country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;,\n#   location &lt;chr&gt;, latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, geo_precision &lt;dbl&gt;,\n#   source &lt;chr&gt;, source_scale &lt;chr&gt;, notes &lt;chr&gt;, fatalities &lt;dbl&gt;,\n#   tags &lt;chr&gt;, timestamp &lt;dbl&gt;\n\n\n\n\n3.2 Adding new year_quarter column\nWe will want to create a new column to indicate the specific year and quarter for each conflict event since the spatial analysis will be done later in a quarterly manner.\n\n\nExtract year and quarter\nconflict_data$year_quarter &lt;- paste0(\n  year(conflict_data$event_date), \n  \" Q\", \n  quarter(conflict_data$event_date)\n)\n\n# View the new data column\nunique(conflict_data$year_quarter)\n\n\n [1] \"2024 Q2\" \"2024 Q1\" \"2023 Q4\" \"2023 Q3\" \"2023 Q2\" \"2023 Q1\" \"2022 Q4\"\n [8] \"2022 Q3\" \"2022 Q2\" \"2022 Q1\" \"2021 Q4\" \"2021 Q3\" \"2021 Q2\" \"2021 Q1\"\n\n\n\n\n3.3 Fixing Duplicated Event ID in conflict_data Dataframe\nAs shown, there are presence of duplicates in our dataframe returned by the duplicated() function.\n\n# Check for duplicates\nany(duplicated(conflict_data))\n\n[1] TRUE\n\n\nBased on the duplicated event ID: MMR64313 for instance. We can observe the two records are of the same political violence event happening between two actors on 30/6/2024, between the People’s Defense Force and Military Forces of Myanmar. Upon further research, these two actors are opposing political parties of Myanmar’s ongoing conflict.\n\n# Inspect an instance of the duplciated event IDs\nhead(conflict_data,2)\n\n# A tibble: 2 × 29\n  event_id_cnty event_date  year time_precision disorder_type      event_type\n  &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;     \n1 MMR64313      2024-06-30  2024              1 Political violence Battles   \n2 MMR64313      2024-06-30  2024              1 Political violence Battles   \n# ℹ 23 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;,\n#   region &lt;chr&gt;, country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;,\n#   location &lt;chr&gt;, latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, geo_precision &lt;dbl&gt;,\n#   source &lt;chr&gt;, source_scale &lt;chr&gt;, notes &lt;chr&gt;, fatalities &lt;dbl&gt;,\n#   tags &lt;chr&gt;, timestamp &lt;dbl&gt;, year_quarter &lt;chr&gt;\n\n\n\n\n\n\n\n\nReflection\n\n\n\nShould duplicated data be removed in this analysis?\nA single event (e.g. MMR64313) can have duplicated rows with different actor1 values, typically due to counterattacks from opposing sides, leading to different data entries into the conflict_data dataset.\nHence, I will remove duplicated events found in the conflict_data dataframe as long as the rows have the same event ID indicated.\n\n\nHere, I did another check to ensure there is not more than 2 possible repeated event IDs in the first 20 rows of conflict_data.\n\n\nCheck duplicated events for first 20 rows\nduplicate_counts_first_20 &lt;- conflict_data %&gt;%\n  slice(1:20) %&gt;%            \n  group_by(event_id_cnty) %&gt;% \n  summarize(count = n()) %&gt;%  \n  filter(count &gt; 1)         \n\n# View the result\nprint(duplicate_counts_first_20)\n\n\n# A tibble: 9 × 2\n  event_id_cnty count\n  &lt;chr&gt;         &lt;int&gt;\n1 MMR64313          2\n2 MMR64320          2\n3 MMR64321          2\n4 MMR64323          2\n5 MMR64325          2\n6 MMR64326          2\n7 MMR64328          2\n8 MMR64330          2\n9 MMR64331          2\n\n\nWith that checked, I’ll remove the duplicated rows with a repeated Event ID but will retain the actor1 value and append it to a new actor2 column, assuming two actors are involved in every conflict.\n\n\nRemove duplicated rows\n# Load necessary library\nlibrary(dplyr)\n\n# Retrieve data of duplicated rows and summarize actor2, assoc_actor_2, and inter2\nmerged_duplicates &lt;- conflict_data %&gt;%\n  filter(duplicated(event_id_cnty) | duplicated(event_id_cnty, fromLast = TRUE)) %&gt;%\n  arrange(event_id_cnty) %&gt;%\n  group_by(event_id_cnty) %&gt;%\n  summarize(\n    actor2 = last(actor1)\n  )\n\n# Keep rows without duplicates\nconflict_data_no_duplicates &lt;- conflict_data %&gt;%\n  filter(!duplicated(event_id_cnty))\n\n# Update conflict_data dataframe with new columns from merged_duplicates\nconflict_data &lt;- conflict_data_no_duplicates %&gt;%\n  left_join(merged_duplicates, by = \"event_id_cnty\") %&gt;%\n  mutate(\n    # Ensure actor2 exists after the join, if not fill with actor1\n    actor2 = coalesce(actor2, actor1)\n  )\n\n# View dataframe\nhead(conflict_data[c('event_id_cnty','actor1','actor2')])\n\n\n# A tibble: 6 × 3\n  event_id_cnty actor1                                           actor2         \n  &lt;chr&gt;         &lt;chr&gt;                                            &lt;chr&gt;          \n1 MMR64313      People's Defense Force - Mandalay                Military Force…\n2 MMR64320      People's Defense Force - Mandalay                Military Force…\n3 MMR64321      People's Defense Force - Mandalay                Military Force…\n4 MMR64322      Military Forces of Myanmar (2021-)               Military Force…\n5 MMR64323      PKDF MMU: People's Knight Defense Force - Myinmu Military Force…\n6 MMR64324      Military Forces of Myanmar (2021-)               Military Force…\n\n\nWe can observe that there are no longer any duplicated event IDs in our conflict_data data frame.\n\nany(duplicated(conflict_data))\n\n[1] FALSE\n\n\n\n\n3.4 Converting Aspatial Data to Simple Feature Format\nFor the purpose of this exercise, we will want to integrate and analyse aspatial data in a geographic context. I’ll do a check if conflict_data needs to be converted to a sf data frame - if it outputs anything else but sf, then it’s not a simple feature data frame!\n\nclass(conflict_data)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\n\n\n\nObservations\n\n\n\nWe can see that conflict_data is not a sf data frame. Since a non-simple feature data frame does not have a “geometry” column, we’ll need to convert conflict_data into a simple feature data frame\n\n\nWe can convert conflict_data into a simple feature data frame by using st_as_sf() from the sf package. Addiitionally, we will also need to transform coordinate system from geographic (ESPG: 4326) to projected (ESPG: 32647) using st_transform().\n\n# Convert to simple feature format\nconflict_data_sf &lt;- st_as_sf(conflict_data, coords = c(\"longitude\", \"latitude\"), crs=4326) %&gt;% st_transform(crs = 32647)\n\n# Inspect the changes\nglimpse(conflict_data_sf)\n\nRows: 51,553\nColumns: 29\n$ event_id_cnty      &lt;chr&gt; \"MMR64313\", \"MMR64320\", \"MMR64321\", \"MMR64322\", \"MM…\n$ event_date         &lt;date&gt; 2024-06-30, 2024-06-30, 2024-06-30, 2024-06-30, 20…\n$ year               &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 202…\n$ time_precision     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ disorder_type      &lt;chr&gt; \"Political violence\", \"Political violence\", \"Politi…\n$ event_type         &lt;chr&gt; \"Battles\", \"Battles\", \"Battles\", \"Strategic develop…\n$ sub_event_type     &lt;chr&gt; \"Armed clash\", \"Armed clash\", \"Armed clash\", \"Chang…\n$ actor1             &lt;chr&gt; \"People's Defense Force - Mandalay\", \"People's Defe…\n$ assoc_actor_1      &lt;chr&gt; \"MDA - AGF: Madaya - The Authentic Genes Force; SST…\n$ inter1             &lt;dbl&gt; 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 3, 3, 3, 7, 1, …\n$ interaction        &lt;dbl&gt; 13, 13, 13, 10, 13, 10, 12, 12, 12, 12, 12, 13, 13,…\n$ civilian_targeting &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ iso                &lt;dbl&gt; 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1…\n$ region             &lt;chr&gt; \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia…\n$ country            &lt;chr&gt; \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma…\n$ admin1             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Sagaing\", \"Sag…\n$ admin2             &lt;chr&gt; \"Mandalay\", \"Pyinoolwin\", \"Pyinoolwin\", \"Shwebo\", \"…\n$ admin3             &lt;chr&gt; \"Patheingyi\", \"Singu\", \"Thabeikkyin\", \"Khin-U\", \"My…\n$ location           &lt;chr&gt; \"Aung Tha Pyay\", \"Pin Lel Gyi\", \"Thabeikkyin\", \"Khi…\n$ geo_precision      &lt;dbl&gt; 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, …\n$ source             &lt;chr&gt; \"Democratic Voice of Burma; Irrawaddy\", \"Irrawaddy\"…\n$ source_scale       &lt;chr&gt; \"National\", \"National\", \"National\", \"Subnational-Na…\n$ notes              &lt;chr&gt; \"On 30 June 2024, near Aung Tha Pyay village (Pathe…\n$ fatalities         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ tags               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ timestamp          &lt;dbl&gt; 1720552468, 1720552468, 1720552468, 1720552468, 172…\n$ year_quarter       &lt;chr&gt; \"2024 Q2\", \"2024 Q2\", \"2024 Q2\", \"2024 Q2\", \"2024 Q…\n$ actor2             &lt;chr&gt; \"Military Forces of Myanmar (2021-)\", \"Military For…\n$ geometry           &lt;POINT [m]&gt; POINT (214961 2452068), POINT (198303.2 24994…\n\n\n\n\n\n\n\n\nObservations\n\n\n\nNotice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been removed from the data frame.\n\n\nWe can further inspect the newly created ‘geometry’ column of conflict_data_sf\n\n# Retrieve geometry column\nst_geometry(conflict_data_sf)\n\nGeometry set for 51553 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 5 geometries:\n\n\nPOINT (214961 2452068)\n\n\nPOINT (198303.2 2499463)\n\n\nPOINT (189105.4 2533434)\n\n\nPOINT (160913.9 2522331)\n\n\nPOINT (146213 2428487)\n\n\n\n\n\n\n\n\nObservations\n\n\n\nIt consists of 51,533 features consisting of point geometric features where the underlying datum is in WGS 84 format.\n\n\nTo ensure that the coordinate system is correctly updated, we can use the st_crs() function where we observe that the ESPG code is correctly indicated as 32647.\n\n# Check CRS format\nst_crs(conflict_data_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\n\n\n3.5 Reduce Data File Size\nIn this section, I will reduce the current Myanmar armed conflict dataset as the time taken for computing the kernel density estimates can take up to 30 minutes long which is not computationally efficient.\n\n1) Remove ‘Protests’ and ‘Riots’ Event Types\nI will remove rows in the conflicts_data_sf dataset that don’t focus on the four main event types (Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians), as mentioned in the exercise brief.\n\nconflict_data_sf &lt;- conflict_data_sf %&gt;%\n  filter(!(event_type %in% c(\"Protests\", \"Riots\")))\n\nunique(conflict_data_sf$event_type)\n\n[1] \"Battles\"                    \"Strategic developments\"    \n[3] \"Violence against civilians\" \"Explosions/Remote violence\"\n\n\n\n\n2) Remove unused columns in boundary_sf\nAs seen, there are 8 columns in the simple feature data frame of boundary_sf.\n\n# Inspect first rows of data in boundary_sf\nhead(boundary_sf)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -14915.04 ymin: 1736124 xmax: 187961.7 ymax: 2051144\nProjected CRS: WGS 84 / UTM zone 47N\n  OBJECTID         ST ST_PCODE        DT   DT_PCODE      DT_MMR PCode_V\n1        1 Ayeyarwady   MMR017  Hinthada MMR017D002    ဟင်္သာတခရိုင်     9.4\n2        2 Ayeyarwady   MMR017   Labutta MMR017D004    လပွတ္တာခရိုင်     9.4\n3        3 Ayeyarwady   MMR017    Maubin MMR017D005     မအူပင်ခရိုင်     9.4\n4        4 Ayeyarwady   MMR017 Myaungmya MMR017D003 မြောင်းမြခရိုင်     9.4\n5        5 Ayeyarwady   MMR017   Pathein MMR017D001      ပုသိမ်ခရိုင်     9.4\n6        6 Ayeyarwady   MMR017    Pyapon MMR017D006     ဖျာပုံခရိုင်     9.4\n                        geometry\n1 MULTIPOLYGON (((90859.89 20...\n2 MULTIPOLYGON (((75991.51 17...\n3 MULTIPOLYGON (((115559 1928...\n4 MULTIPOLYGON (((39919.39 18...\n5 MULTIPOLYGON (((-6302.348 1...\n6 MULTIPOLYGON (((93411.72 17...\n\n\nI will remove ’DT_MMR” column as we already have the District Name in English in DT and won’t require the district names in Myanmar Language. Next, we will remove the coded versions of ST (state/region) and DT (district) columns, namely ST_PCODE and DT_PCODE. Additionally, we won’t need the PCode_V column since we will be dropping the PCODE column too.\n\nboundary_sf &lt;- boundary_sf %&gt;% dplyr::select('OBJECTID', 'ST', 'DT','geometry')\nsummary(boundary_sf)\n\n    OBJECTID          ST                 DT                     geometry \n Min.   : 1.00   Length:80          Length:80          MULTIPOLYGON :80  \n 1st Qu.:20.75   Class :character   Class :character   epsg:32647   : 0  \n Median :40.50   Mode  :character   Mode  :character   +proj=utm ...: 0  \n Mean   :40.50                                                           \n 3rd Qu.:60.25                                                           \n Max.   :80.00                                                           \n\n\n\n\n3) Remove unused columns in conflict_data\nI will also remove unnecessary columns of the conflict_data data frame that won’t be used in our spatial analysis later. I’ll rename admin1 to ST (states) and admin2 to DT (districts) for easier reference.\n\n\nRemove unnecessary columns\nconflict_data_sf &lt;- conflict_data_sf %&gt;%\n  select(event_id_cnty, event_date, year_quarter, disorder_type, \n         event_type, location, admin1, admin2, geometry, actor1, actor2,\n         interaction, fatalities) %&gt;%\n  rename(\n    ST = admin1,\n    DT = admin2\n  )\n\nsummary(conflict_data_sf)\n\n\n event_id_cnty        event_date         year_quarter       disorder_type     \n Length:42608       Min.   :2021-01-01   Length:42608       Length:42608      \n Class :character   1st Qu.:2022-01-10   Class :character   Class :character  \n Mode  :character   Median :2022-10-13   Mode  :character   Mode  :character  \n                    Mean   :2022-10-29                                        \n                    3rd Qu.:2023-08-29                                        \n                    Max.   :2024-06-30                                        \n  event_type          location              ST                 DT           \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n          geometry        actor1             actor2           interaction   \n POINT        :42608   Length:42608       Length:42608       Min.   :10.00  \n epsg:32647   :    0   Class :character   Class :character   1st Qu.:13.00  \n +proj=utm ...:    0   Mode  :character   Mode  :character   Median :17.00  \n                                                             Mean   :18.86  \n                                                             3rd Qu.:17.00  \n                                                             Max.   :80.00  \n   fatalities    \n Min.   :  0.00  \n 1st Qu.:  0.00  \n Median :  0.00  \n Mean   :  1.27  \n 3rd Qu.:  1.00  \n Max.   :201.00  \n\n\n\n\n\n3.6 Converting Simple Features Data Frame into ppp Object\nIt is important that we convert conflict_data_sf (a simple feature data frame) into a planer point pattern (ppp) object format, since the spatstat package that we’ll be using for the Spatial Point Pattern Analysis later is specifically designed for working with ppp-formated data. Additionally, I will begin with categorising the ppp objects into their unique year_quarter category.\n\n\nCreate ppp objects based on year_quarter category\n# Create an empty list to store the ppp objects\nppp_list &lt;- list()\n\n# Loop through each unique year_quarter category\nfor (yq in unique(conflict_data_sf$year_quarter)) {\n  # Subset the data for the current year_quarter\n  subset_data_sf &lt;- conflict_data_sf %&gt;% filter(year_quarter == yq)\n  \n  # Convert the subset to a ppp object\n  subset_ppp &lt;- as.ppp(subset_data_sf$geometry)\n  \n  # Add the ppp object to the list\n  ppp_list[[yq]] &lt;- subset_ppp\n}\n\n# Check list\nppp_list\n\n\n$`2024 Q2`\nPlanar point pattern: 2788 points\nwindow: rectangle = [-208804.4, 597543.7] x [1103500.1, 3026504.9] units\n\n$`2024 Q1`\nPlanar point pattern: 3186 points\nwindow: rectangle = [-207135, 591875.9] x [1245380, 3026504.9] units\n\n$`2023 Q4`\nPlanar point pattern: 3627 points\nwindow: rectangle = [-206931.7, 604775.1] x [1103500.1, 3020772.2] units\n\n$`2023 Q3`\nPlanar point pattern: 3010 points\nwindow: rectangle = [-197883.4, 518300.4] x [1103500.1, 3027041.8] units\n\n$`2023 Q2`\nPlanar point pattern: 2745 points\nwindow: rectangle = [-191261.5, 518300.4] x [1103500.1, 3006372.9] units\n\n$`2023 Q1`\nPlanar point pattern: 3101 points\nwindow: rectangle = [-199243.8, 591875.9] x [1103500.1, 3026504.9] units\n\n$`2022 Q4`\nPlanar point pattern: 3296 points\nwindow: rectangle = [-206531.5, 518300.4] x [1103500.1, 2931517.1] units\n\n$`2022 Q3`\nPlanar point pattern: 3486 points\nwindow: rectangle = [-206196.6, 568361.5] x [1103500.1, 3026504.9] units\n\n$`2022 Q2`\nPlanar point pattern: 3580 points\nwindow: rectangle = [-206931.7, 640934.5] x [1103500.1, 3026504.9] units\n\n$`2022 Q1`\nPlanar point pattern: 3563 points\nwindow: rectangle = [-204784, 591875.9] x [1103500.1, 3026504.9] units\n\n$`2021 Q4`\nPlanar point pattern: 3844 points\nwindow: rectangle = [-200024.3, 591875.9] x [1103500.1, 3042960.3] units\n\n$`2021 Q3`\nPlanar point pattern: 2754 points\nwindow: rectangle = [-193181.1, 591875.9] x [1103500.1, 3042960.3] units\n\n$`2021 Q2`\nPlanar point pattern: 2916 points\nwindow: rectangle = [-191409.1, 640934.5] x [1132472.1, 3042960.3] units\n\n$`2021 Q1`\nPlanar point pattern: 712 points\nwindow: rectangle = [-203795.3, 591875.9] x [1375186.1, 3026504.9] units\n\n\nWe can visualise the spread of conflict events across each quarter from January 2021 to June 2024 using the plot() function as shown below.\n\n\nVisualise the spread of conflicts by year_quarter\n# Ensure 'year_quarter' is a factor\nconflict_data_sf$year_quarter &lt;- as.factor(conflict_data_sf$year_quarter)\n\n# Loop through each unique year_quarter and create separate plots\nyear_quarters &lt;- unique(conflict_data_sf$year_quarter)\n\n# Set up a grid layout for multiple plots (adjust 'mfrow' as needed)\npar(mfrow = c(4,4))\npar(mar = c(0,0,1,0))\n\n# Loop through each year_quarter and plot\nfor (yq in year_quarters) {\n  subset_data_sf &lt;- conflict_data_sf[conflict_data_sf$year_quarter == yq, ]\n  conflict_data_ppp &lt;- as.ppp(subset_data_sf$geometry)\n  \n  # Plot each subset ppp object\n  plot(conflict_data_ppp, main = paste(yq))\n}\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nIt is noticeable that there conflict events have occured more frequently since 2021 as points plotted on the graph have gotten darker across 2021 to 2024. We can also observe the possibility of duplicated events occurring from the darker spots in the plot, in which it appears more intense in Myanmar’s central and west regions.\n\n\n\n\n3.7 Creating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area, that is Myanmar’s boundary in this case. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to convert the boundary_data_sf simple feature data frame into an owin object of spatstat.\n\n# Convert to owin object\nmyanmar_owin &lt;- as.owin(boundary_sf)\n\n# Visualise the owin object\nplot(myanmar_owin)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFrom my observations, the as.owin() function converts the boundary_data_sf spatial boundary into a window object that represents the outer boundary of the spatial region and does not handle internal structures or districts we previously saw from the plot of boundary_data_sf.\n\n\nWe can also take a quick look at the owin object properties as shown. I will be converting it to a data frame for the purposes of getting a quick glimpse of the object.\n\n# Summary info of owin object\nowin_df &lt;- as.data.frame(myanmar_owin)\nprint(head(owin_df))\n\n         x       y id sign\n1 56519.39 2741919  1   -1\n2 56917.28 2741947  1   -1\n3 57000.15 2741973  1   -1\n4 57068.51 2741994  1   -1\n5 57221.44 2742142  1   -1\n6 57068.51 2741994  1   -1\n\n\n\n\n3.8 Combining ppp Object and owin Object\nIn this last step of geospatial data wrangling, I will mask all ppp object with the owin object I created earlier to put in place all conflict events within the boundary of Myanmar. Doing so can also optimise the memory usage for large datasets. I’ll also make the density values more comprehensible by re-scaling the density values from metres to kilometres using rescale().\n\nCombine ppp and owin objectCheck results of (E.g. 2024 Q2)\n\n\n\n# Initialize an empty list to store masked ppp objects\nmasked_ppp_list_km &lt;- list()\n\n# Iterate over each ppp object in the list\nfor (quarter in names(ppp_list)) {\n  ppp_obj &lt;- ppp_list[[quarter]]\n  # Mask the ppp object with the owin object\n  masked_ppp &lt;- ppp_obj[myanmar_owin]\n  masked_ppp_km &lt;- rescale(masked_ppp, 1000, \"km\")\n  # Store the masked ppp object in the new list\n  masked_ppp_list_km[[quarter]] &lt;- masked_ppp_km\n}\n\n\n\n\n# Inspect 2024 Q2 masked ppp object\nsummary(masked_ppp_list_km$`2024 Q2`)\n\nPlanar point pattern:  2788 points\nAverage intensity 0.004162974 points per square km\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 16 decimal places\n\nWindow: polygonal boundary\n1077 separate polygons (510 holes)\n                    vertices         area relative.area\npolygon 1 (hole)           9 -4.40155e-08     -6.57e-14\npolygon 2 (hole)           3 -4.82818e-08     -7.21e-14\npolygon 3 (hole)           3 -2.78345e-09     -4.16e-15\npolygon 4 (hole)           3 -4.99415e-09     -7.46e-15\npolygon 5 (hole)           3 -6.70916e-10     -1.00e-15\npolygon 6 (hole)           3 -4.99758e-09     -7.46e-15\npolygon 7 (hole)           6 -3.24429e-09     -4.84e-15\npolygon 8 (hole)          11 -5.35507e-08     -8.00e-14\npolygon 9 (hole)           3 -3.06875e-09     -4.58e-15\npolygon 10 (hole)          3 -7.63672e-09     -1.14e-14\npolygon 11 (hole)          3 -8.61828e-11     -1.29e-16\npolygon 12 (hole)          3 -2.44104e-08     -3.64e-14\npolygon 13 (hole)          3 -4.88141e-11     -7.29e-17\npolygon 14 (hole)          4 -1.74466e-10     -2.61e-16\npolygon 15 (hole)          4 -2.30890e-11     -3.45e-17\npolygon 16 (hole)          4 -6.25346e-14     -9.34e-20\npolygon 17 (hole)          4 -3.68040e-08     -5.50e-14\npolygon 18 (hole)          3 -1.27228e-12     -1.90e-18\npolygon 19 (hole)          4 -1.25504e-09     -1.87e-15\npolygon 20 (hole)          3 -1.56980e-08     -2.34e-14\npolygon 21 (hole)          4 -1.13609e-12     -1.70e-18\npolygon 22 (hole)          4 -8.02868e-08     -1.20e-13\npolygon 23 (hole)          4 -3.98057e-11     -5.94e-17\npolygon 24 (hole)          4 -2.89739e-08     -4.33e-14\npolygon 25 (hole)          5 -7.39370e-08     -1.10e-13\npolygon 26 (hole)          6 -1.08246e-07     -1.62e-13\npolygon 27 (hole)         13 -3.27066e-07     -4.88e-13\npolygon 28 (hole)          3 -3.55050e-09     -5.30e-15\npolygon 29 (hole)          3 -2.84064e-08     -4.24e-14\npolygon 30 (hole)          3 -8.07641e-10     -1.21e-15\npolygon 31 (hole)          4 -5.20948e-09     -7.78e-15\npolygon 32 (hole)          4 -3.21399e-10     -4.80e-16\npolygon 33 (hole)          4 -2.54955e-11     -3.81e-17\npolygon 34 (hole)          3 -4.29638e-10     -6.42e-16\npolygon 35 (hole)          6 -6.02383e-10     -8.99e-16\npolygon 36 (hole)          4 -4.91852e-10     -7.34e-16\npolygon 37                26  2.85778e+00      4.27e-06\npolygon 38 (hole)          3 -6.80850e-13     -1.02e-18\npolygon 39 (hole)          4 -3.09085e-13     -4.62e-19\npolygon 40 (hole)          6 -3.61049e-12     -5.39e-18\npolygon 41 (hole)          7 -5.33310e-12     -7.96e-18\npolygon 42 (hole)          4 -3.62663e-12     -5.42e-18\npolygon 43 (hole)          3 -2.00302e-14     -2.99e-20\npolygon 44 (hole)          3 -2.85255e-12     -4.26e-18\npolygon 45 (hole)          4 -1.15535e-12     -1.73e-18\npolygon 46 (hole)         17 -6.25657e-13     -9.34e-19\npolygon 47 (hole)         20 -1.53263e-11     -2.29e-17\npolygon 48 (hole)          3 -1.42406e-14     -2.13e-20\npolygon 49                 3  0.00000e+00      0.00e+00\npolygon 50 (hole)          4 -2.46048e-12     -3.67e-18\npolygon 51 (hole)          4 -2.93672e-13     -4.39e-19\npolygon 52 (hole)          3 -1.35167e-16     -2.02e-22\npolygon 53 (hole)          3 -3.66243e-13     -5.47e-19\npolygon 54 (hole)         13 -3.22774e-12     -4.82e-18\npolygon 55 (hole)          7 -3.79713e-12     -5.67e-18\npolygon 56 (hole)          4 -6.06083e-13     -9.05e-19\npolygon 57 (hole)          6 -5.94835e-12     -8.88e-18\npolygon 58 (hole)          4 -4.11305e-13     -6.14e-19\npolygon 59 (hole)         12 -7.16981e-12     -1.07e-17\npolygon 60 (hole)          4 -1.96241e-14     -2.93e-20\npolygon 61 (hole)          4 -6.16304e-12     -9.20e-18\npolygon 62 (hole)          4 -2.13366e-13     -3.19e-19\npolygon 63 (hole)          4 -2.21852e-12     -3.31e-18\npolygon 64 (hole)          3 -4.22166e-15     -6.30e-21\npolygon 65 (hole)          5 -6.21282e-13     -9.28e-19\npolygon 66 (hole)          4 -5.02821e-16     -7.51e-22\npolygon 67 (hole)          4 -3.30895e-13     -4.94e-19\npolygon 68 (hole)         17 -1.19462e-11     -1.78e-17\npolygon 69 (hole)          3 -1.27084e-13     -1.90e-19\npolygon 70 (hole)          4 -1.80406e-13     -2.69e-19\npolygon 71 (hole)          8 -3.87178e-12     -5.78e-18\npolygon 72 (hole)          4 -7.14736e-13     -1.07e-18\npolygon 73 (hole)          5 -3.43923e-12     -5.14e-18\npolygon 74                 3  0.00000e+00      0.00e+00\npolygon 75 (hole)          8 -2.57732e-12     -3.85e-18\npolygon 76 (hole)          4 -1.36629e-12     -2.04e-18\npolygon 77 (hole)         13 -1.46870e-11     -2.19e-17\npolygon 78 (hole)          3 -3.08778e-14     -4.61e-20\npolygon 79 (hole)         18 -1.78311e-12     -2.66e-18\npolygon 80 (hole)         28 -1.67874e-11     -2.51e-17\npolygon 81 (hole)          4 -4.46113e-13     -6.66e-19\npolygon 82 (hole)          3 -8.98160e-15     -1.34e-20\npolygon 83 (hole)          4 -1.43028e-12     -2.14e-18\npolygon 84 (hole)          4 -6.38438e-14     -9.53e-20\npolygon 85 (hole)         19 -1.89999e-11     -2.84e-17\npolygon 86 (hole)          4 -1.49124e-13     -2.23e-19\npolygon 87 (hole)          3 -3.68533e-14     -5.50e-20\npolygon 88 (hole)          4 -4.45374e-13     -6.65e-19\npolygon 89 (hole)          4 -4.83479e-13     -7.22e-19\npolygon 90 (hole)         12 -9.32407e-12     -1.39e-17\npolygon 91 (hole)          3 -8.84897e-13     -1.32e-18\npolygon 92 (hole)         12 -8.41711e-12     -1.26e-17\npolygon 93 (hole)          3 -3.73405e-14     -5.58e-20\npolygon 94 (hole)          3 -1.40773e-12     -2.10e-18\npolygon 95 (hole)          4 -7.84182e-13     -1.17e-18\npolygon 96 (hole)          5 -4.10716e-13     -6.13e-19\npolygon 97 (hole)         10 -5.89467e-12     -8.80e-18\npolygon 98 (hole)          3 -3.54370e-15     -5.29e-21\npolygon 99 (hole)         11 -6.90903e-12     -1.03e-17\npolygon 100 (hole)         3 -1.89866e-13     -2.84e-19\npolygon 101 (hole)         3 -3.09480e-15     -4.62e-21\npolygon 102 (hole)         3 -3.95637e-17     -5.91e-23\npolygon 103 (hole)         4 -1.88731e-16     -2.82e-22\npolygon 104 (hole)         3 -5.93215e-17     -8.86e-23\npolygon 105 (hole)         6 -1.10389e-12     -1.65e-18\npolygon 106 (hole)         5 -1.62107e-13     -2.42e-19\npolygon 107 (hole)         4 -6.07269e-13     -9.07e-19\npolygon 108 (hole)         3 -4.17062e-14     -6.23e-20\npolygon 109 (hole)         7 -4.10998e-12     -6.14e-18\npolygon 110 (hole)         7 -2.99640e-12     -4.47e-18\npolygon 111 (hole)         4 -8.08268e-13     -1.21e-18\npolygon 112 (hole)         8 -1.72022e-12     -2.57e-18\npolygon 113 (hole)         3 -5.46853e-13     -8.17e-19\npolygon 114 (hole)         3 -9.21233e-15     -1.38e-20\npolygon 115 (hole)         3 -2.34233e-14     -3.50e-20\npolygon 116 (hole)         9 -1.27183e-12     -1.90e-18\npolygon 117 (hole)         4 -8.58065e-13     -1.28e-18\npolygon 118 (hole)         6 -4.85387e-12     -7.25e-18\npolygon 119 (hole)         6 -4.38024e-12     -6.54e-18\npolygon 120 (hole)         6 -1.18459e-12     -1.77e-18\npolygon 121 (hole)        18 -5.24919e-12     -7.84e-18\npolygon 122                3  0.00000e+00      0.00e+00\npolygon 123 (hole)        10 -3.29610e-12     -4.92e-18\npolygon 124 (hole)         4 -8.31786e-15     -1.24e-20\npolygon 125 (hole)         8 -5.92159e-12     -8.84e-18\npolygon 126 (hole)         4 -2.92352e-15     -4.37e-21\npolygon 127 (hole)         3 -2.22606e-13     -3.32e-19\npolygon 128 (hole)        16 -1.60557e-11     -2.40e-17\npolygon 129 (hole)        10 -4.89387e-12     -7.31e-18\npolygon 130 (hole)         4 -1.48133e-13     -2.21e-19\npolygon 131 (hole)         4 -2.04528e-12     -3.05e-18\npolygon 132 (hole)         4 -4.07107e-13     -6.08e-19\npolygon 133 (hole)         4 -2.13923e-12     -3.19e-18\npolygon 134 (hole)         4 -2.58593e-17     -3.86e-23\npolygon 135 (hole)         3 -8.40799e-14     -1.26e-19\npolygon 136 (hole)         4 -5.03212e-13     -7.51e-19\npolygon 137 (hole)         4 -1.10455e-12     -1.65e-18\npolygon 138 (hole)         4 -3.74743e-14     -5.60e-20\npolygon 139 (hole)         6 -1.42384e-12     -2.13e-18\npolygon 140 (hole)         4 -1.96713e-14     -2.94e-20\npolygon 141 (hole)         4 -7.29770e-13     -1.09e-18\npolygon 142 (hole)         3 -7.99677e-16     -1.19e-21\npolygon 143 (hole)         3 -1.00370e-15     -1.50e-21\npolygon 144 (hole)         3 -9.07286e-16     -1.35e-21\npolygon 145 (hole)         4 -2.63668e-14     -3.94e-20\npolygon 146 (hole)         5 -8.51993e-13     -1.27e-18\npolygon 147 (hole)         4 -3.15631e-13     -4.71e-19\npolygon 148 (hole)         4 -7.89181e-13     -1.18e-18\npolygon 149 (hole)         6 -4.24179e-13     -6.33e-19\npolygon 150 (hole)        16 -1.00987e-11     -1.51e-17\npolygon 151 (hole)         3 -6.53241e-18     -9.75e-24\npolygon 152 (hole)         6 -2.87035e-12     -4.29e-18\npolygon 153 (hole)         3 -2.64530e-15     -3.95e-21\npolygon 154 (hole)         8 -1.99962e-12     -2.99e-18\npolygon 155 (hole)         3 -2.45345e-13     -3.66e-19\npolygon 156 (hole)         3 -3.99767e-14     -5.97e-20\npolygon 157 (hole)         6 -1.08025e-12     -1.61e-18\npolygon 158 (hole)         3 -1.22938e-13     -1.84e-19\npolygon 159 (hole)         5 -3.07870e-13     -4.60e-19\npolygon 160 (hole)        12 -4.81197e-12     -7.19e-18\npolygon 161 (hole)         4 -8.16819e-14     -1.22e-19\npolygon 162 (hole)         3 -1.28714e-12     -1.92e-18\npolygon 163 (hole)         4 -1.87938e-13     -2.81e-19\npolygon 164 (hole)        11 -1.79968e-12     -2.69e-18\npolygon 165 (hole)         3 -5.93827e-15     -8.87e-21\npolygon 166 (hole)         3 -4.50189e-13     -6.72e-19\npolygon 167 (hole)         4 -4.87377e-13     -7.28e-19\npolygon 168 (hole)        13 -1.01705e-11     -1.52e-17\npolygon 169 (hole)         3 -7.37542e-13     -1.10e-18\npolygon 170 (hole)         4 -3.62179e-13     -5.41e-19\npolygon 171                3  9.13135e-19      1.36e-24\npolygon 172 (hole)         8 -1.74082e-12     -2.60e-18\npolygon 173 (hole)         3 -9.31514e-14     -1.39e-19\npolygon 174               43  7.32477e+00      1.09e-05\npolygon 175 (hole)         3 -6.79111e-14     -1.01e-19\npolygon 176 (hole)        19 -1.27551e-11     -1.90e-17\npolygon 177 (hole)         3 -7.65776e-15     -1.14e-20\npolygon 178 (hole)         9 -4.34371e-12     -6.49e-18\npolygon 179 (hole)         4 -7.09328e-15     -1.06e-20\npolygon 180 (hole)         6 -8.43021e-12     -1.26e-17\npolygon 181 (hole)        30 -5.76461e-12     -8.61e-18\npolygon 182 (hole)        12 -5.45083e-12     -8.14e-18\npolygon 183 (hole)        16 -1.90750e-11     -2.85e-17\npolygon 184 (hole)        15 -2.10315e-11     -3.14e-17\npolygon 185 (hole)        52 -3.02970e-11     -4.52e-17\npolygon 186              103  1.86991e+01      2.79e-05\npolygon 187 (hole)        10 -7.40529e-12     -1.11e-17\npolygon 188 (hole)         6 -2.03062e-12     -3.03e-18\npolygon 189 (hole)         7 -1.02421e-12     -1.53e-18\npolygon 190 (hole)         3 -1.32600e-19     -1.98e-25\npolygon 191 (hole)         3 -5.60223e-13     -8.37e-19\npolygon 192 (hole)        10 -2.37610e-12     -3.55e-18\npolygon 193 (hole)         3 -1.90831e-16     -2.85e-22\npolygon 194 (hole)         4 -1.76514e-12     -2.64e-18\npolygon 195 (hole)         3 -1.37598e-16     -2.05e-22\npolygon 196 (hole)         4 -5.28260e-13     -7.89e-19\npolygon 197               37  9.32316e+00      1.39e-05\npolygon 198 (hole)         4 -2.33117e-13     -3.48e-19\npolygon 199 (hole)         4 -6.59209e-13     -9.84e-19\npolygon 200 (hole)         4 -5.12582e-13     -7.65e-19\npolygon 201 (hole)         4 -4.70065e-13     -7.02e-19\npolygon 202 (hole)         3 -2.10303e-13     -3.14e-19\npolygon 203 (hole)         6 -1.36386e-12     -2.04e-18\npolygon 204 (hole)         4 -2.18244e-13     -3.26e-19\npolygon 205 (hole)         4 -3.72475e-13     -5.56e-19\npolygon 206 (hole)         4 -8.32022e-13     -1.24e-18\npolygon 207 (hole)         4 -1.08153e-12     -1.61e-18\npolygon 208 (hole)         3 -5.92333e-17     -8.84e-23\npolygon 209 (hole)         7 -6.03242e-12     -9.01e-18\npolygon 210 (hole)         6 -2.27756e-12     -3.40e-18\npolygon 211 (hole)         4 -1.53368e-12     -2.29e-18\npolygon 212 (hole)         3 -2.33223e-14     -3.48e-20\npolygon 213 (hole)         6 -8.61964e-12     -1.29e-17\npolygon 214              371  2.43869e+02      3.64e-04\npolygon 215 (hole)         4 -8.45587e-13     -1.26e-18\npolygon 216              297  2.84905e+02      4.25e-04\npolygon 217 (hole)         4 -3.40250e-13     -5.08e-19\npolygon 218 (hole)         6 -1.39288e-12     -2.08e-18\npolygon 219 (hole)         4 -1.27223e-13     -1.90e-19\npolygon 220 (hole)         4 -9.59107e-13     -1.43e-18\npolygon 221 (hole)         8 -1.39768e-11     -2.09e-17\npolygon 222 (hole)         3 -3.34368e-14     -4.99e-20\npolygon 223 (hole)         4 -9.58519e-13     -1.43e-18\npolygon 224 (hole)         5 -1.32345e-13     -1.98e-19\npolygon 225 (hole)         4 -5.98296e-13     -8.93e-19\npolygon 226 (hole)         7 -3.05539e-12     -4.56e-18\npolygon 227 (hole)         3 -1.80098e-15     -2.69e-21\npolygon 228 (hole)         9 -6.38785e-12     -9.54e-18\npolygon 229               33  1.68222e+01      2.51e-05\npolygon 230 (hole)         8 -1.04272e-11     -1.56e-17\npolygon 231               33  4.47665e-01      6.68e-07\npolygon 232               19  1.34593e-01      2.01e-07\npolygon 233               39  1.36327e+00      2.04e-06\npolygon 234              137  1.55547e+02      2.32e-04\npolygon 235               36  8.76479e+00      1.31e-05\npolygon 236               79  3.08116e+01      4.60e-05\npolygon 237              388  2.25271e+02      3.36e-04\npolygon 238              316  7.78512e+01      1.16e-04\npolygon 239               13  1.09564e-01      1.64e-07\npolygon 240               18  3.49727e-01      5.22e-07\npolygon 241               31  1.23017e+00      1.84e-06\npolygon 242               16  6.55537e-01      9.79e-07\npolygon 243               24  8.49487e-01      1.27e-06\npolygon 244               30  2.54436e+00      3.80e-06\npolygon 245              336  4.15806e+01      6.21e-05\npolygon 246              330  1.69190e+02      2.53e-04\npolygon 247               47  1.08035e+01      1.61e-05\npolygon 248               39  4.94369e+00      7.38e-06\npolygon 249               23  2.72438e+00      4.07e-06\npolygon 250               33  5.70263e+00      8.52e-06\npolygon 251               90  4.20329e+01      6.28e-05\npolygon 252               28  1.35341e+00      2.02e-06\npolygon 253              225  1.08816e+02      1.62e-04\npolygon 254               33  9.16670e+00      1.37e-05\npolygon 255              192  7.02655e+01      1.05e-04\npolygon 256               49  1.49245e+01      2.23e-05\npolygon 257               98  1.79076e+01      2.67e-05\npolygon 258                6  6.37552e-01      9.52e-07\npolygon 259               49  1.01233e+01      1.51e-05\npolygon 260              141  3.43053e+01      5.12e-05\npolygon 261              195  3.24345e+01      4.84e-05\npolygon 262               51  3.38313e+00      5.05e-06\npolygon 263               34  2.01400e+00      3.01e-06\npolygon 264               13  2.50435e-01      3.74e-07\npolygon 265                9  9.04824e-02      1.35e-07\npolygon 266               34  4.61794e+00      6.90e-06\npolygon 267               17  4.58200e-01      6.84e-07\npolygon 268               15  2.74776e-01      4.10e-07\npolygon 269               21  5.34978e-01      7.99e-07\npolygon 270               19  4.55347e-01      6.80e-07\npolygon 271               71  3.42557e+00      5.11e-06\npolygon 272               24  1.32420e+00      1.98e-06\npolygon 273               15  3.26247e-01      4.87e-07\npolygon 274               39  8.65790e-01      1.29e-06\npolygon 275               43  1.41627e+00      2.11e-06\npolygon 276               24  7.52068e-01      1.12e-06\npolygon 277               96  1.32101e+01      1.97e-05\npolygon 278               38  1.18003e+00      1.76e-06\npolygon 279              429  5.99087e+02      8.95e-04\npolygon 280               13  1.74105e-01      2.60e-07\npolygon 281               19  2.52336e-01      3.77e-07\npolygon 282               16  3.11495e-01      4.65e-07\npolygon 283               11  9.11047e-02      1.36e-07\npolygon 284               12  2.13470e-01      3.19e-07\npolygon 285               17  5.82663e-01      8.70e-07\npolygon 286               56  2.60440e+01      3.89e-05\npolygon 287              107  4.91389e+00      7.34e-06\npolygon 288               51  2.79076e+00      4.17e-06\npolygon 289               89  1.61156e+01      2.41e-05\npolygon 290               28  1.30499e+00      1.95e-06\npolygon 291               11  1.27616e-01      1.91e-07\npolygon 292               34  2.54199e+00      3.80e-06\npolygon 293               27  1.72476e+00      2.58e-06\npolygon 294               37  2.01882e+00      3.01e-06\npolygon 295               23  1.65571e+00      2.47e-06\npolygon 296               33  3.05816e+00      4.57e-06\npolygon 297               14  3.23153e-01      4.83e-07\npolygon 298               91  1.51209e+01      2.26e-05\npolygon 299               12  2.42901e-01      3.63e-07\npolygon 300               11  1.37889e-01      2.06e-07\npolygon 301               58  2.29751e+01      3.43e-05\npolygon 302               48  5.10265e+00      7.62e-06\npolygon 303               22  1.30706e+00      1.95e-06\npolygon 304               15  3.49480e-01      5.22e-07\npolygon 305               17  1.57570e+00      2.35e-06\npolygon 306               34  3.68725e+00      5.51e-06\npolygon 307               34  5.21904e+00      7.79e-06\npolygon 308               24  5.42734e+00      8.10e-06\npolygon 309              422  4.66497e+02      6.97e-04\npolygon 310              142  2.98767e+01      4.46e-05\npolygon 311              132  2.18707e+01      3.27e-05\npolygon 312               19  5.88230e-01      8.78e-07\npolygon 313               22  1.77611e+00      2.65e-06\npolygon 314 (hole)         4 -6.42926e-10     -9.60e-16\npolygon 315               40  4.09952e+00      6.12e-06\npolygon 316 (hole)         3 -2.52076e-09     -3.76e-15\npolygon 317 (hole)        24 -5.61620e-07     -8.39e-13\npolygon 318               28  1.47685e+00      2.21e-06\npolygon 319 (hole)         8 -8.93461e-08     -1.33e-13\npolygon 320 (hole)         8 -1.34123e-07     -2.00e-13\npolygon 321               67  9.99685e+00      1.49e-05\npolygon 322 (hole)         8 -6.36345e-08     -9.50e-14\npolygon 323 (hole)         6 -7.57978e-08     -1.13e-13\npolygon 324 (hole)         3 -4.32022e-12     -6.45e-18\npolygon 325 (hole)         4 -2.24224e-08     -3.35e-14\npolygon 326 (hole)         5 -9.35663e-08     -1.40e-13\npolygon 327 (hole)        13 -1.39251e-07     -2.08e-13\npolygon 328 (hole)         7 -1.46533e-07     -2.19e-13\npolygon 329 (hole)         6 -7.59071e-08     -1.13e-13\npolygon 330 (hole)         7 -5.15915e-09     -7.70e-15\npolygon 331 (hole)        10 -4.09465e-08     -6.11e-14\npolygon 332 (hole)        21 -1.86624e-07     -2.79e-13\npolygon 333 (hole)         3 -1.69684e-08     -2.53e-14\npolygon 334 (hole)         8 -4.08363e-08     -6.10e-14\npolygon 335 (hole)         3 -1.73631e-08     -2.59e-14\npolygon 336 (hole)         5 -1.41820e-08     -2.12e-14\npolygon 337 (hole)        10 -6.15226e-08     -9.19e-14\npolygon 338 (hole)         8 -2.90782e-08     -4.34e-14\npolygon 339 (hole)         8 -6.15579e-08     -9.19e-14\npolygon 340 (hole)         4 -7.46371e-10     -1.11e-15\npolygon 341 (hole)         4 -1.05432e-08     -1.57e-14\npolygon 342 (hole)         4 -8.25148e-09     -1.23e-14\npolygon 343 (hole)         3 -2.59991e-08     -3.88e-14\npolygon 344 (hole)         3 -9.09758e-09     -1.36e-14\npolygon 345 (hole)         3 -1.96869e-08     -2.94e-14\npolygon 346 (hole)         3 -4.01481e-11     -5.99e-17\npolygon 347 (hole)         5 -1.49421e-08     -2.23e-14\npolygon 348 (hole)         4 -9.23861e-09     -1.38e-14\npolygon 349                3  4.91147e-16      7.33e-22\npolygon 350 (hole)         7 -5.73304e-08     -8.56e-14\npolygon 351 (hole)         4 -4.26735e-08     -6.37e-14\npolygon 352 (hole)         7 -1.69748e-08     -2.53e-14\npolygon 353 (hole)         3 -1.05617e-08     -1.58e-14\npolygon 354               25  4.82266e-01      7.20e-07\npolygon 355 (hole)         6 -3.72405e-08     -5.56e-14\npolygon 356 (hole)         7 -3.08332e-08     -4.60e-14\npolygon 357 (hole)         4 -6.69857e-09     -1.00e-14\npolygon 358 (hole)         4 -1.15937e-08     -1.73e-14\npolygon 359 (hole)         4 -3.11046e-09     -4.64e-15\npolygon 360 (hole)        12 -1.45689e-07     -2.18e-13\npolygon 361 (hole)         4 -5.64800e-08     -8.43e-14\npolygon 362 (hole)         3 -1.11188e-08     -1.66e-14\npolygon 363 (hole)         4 -2.60006e-08     -3.88e-14\npolygon 364 (hole)        28 -1.79082e-07     -2.67e-13\npolygon 365 (hole)         4 -1.58213e-10     -2.36e-16\npolygon 366 (hole)         4 -9.07739e-12     -1.36e-17\npolygon 367 (hole)         4 -6.73612e-09     -1.01e-14\npolygon 368               16  4.14093e-01      6.18e-07\npolygon 369 (hole)         4 -5.36782e-09     -8.02e-15\npolygon 370 (hole)         6 -1.51450e-08     -2.26e-14\npolygon 371 (hole)         4 -4.38078e-09     -6.54e-15\npolygon 372 (hole)         4 -1.36409e-08     -2.04e-14\npolygon 373 (hole)         4 -3.84271e-08     -5.74e-14\npolygon 374 (hole)         3 -7.56649e-09     -1.13e-14\npolygon 375 (hole)         4 -8.04108e-09     -1.20e-14\npolygon 376 (hole)         6 -2.53481e-08     -3.78e-14\npolygon 377 (hole)         4 -1.15603e-08     -1.73e-14\npolygon 378 (hole)         3 -2.16577e-09     -3.23e-15\npolygon 379 (hole)         3 -2.87541e-09     -4.29e-15\npolygon 380 (hole)         4 -5.42479e-08     -8.10e-14\npolygon 381 (hole)         3 -4.75090e-09     -7.09e-15\npolygon 382 (hole)         4 -3.45047e-08     -5.15e-14\npolygon 383 (hole)         6 -7.20472e-09     -1.08e-14\npolygon 384 (hole)         4 -2.01300e-08     -3.01e-14\npolygon 385 (hole)         9 -7.99880e-08     -1.19e-13\npolygon 386 (hole)         4 -1.30938e-09     -1.96e-15\npolygon 387 (hole)         9 -1.92423e-08     -2.87e-14\npolygon 388 (hole)         3 -2.44412e-13     -3.65e-19\npolygon 389 (hole)         4 -2.73889e-08     -4.09e-14\npolygon 390 (hole)         3 -1.15109e-08     -1.72e-14\npolygon 391 (hole)         4 -8.77810e-08     -1.31e-13\npolygon 392               26  3.03928e+00      4.54e-06\npolygon 393 (hole)         6 -8.99139e-08     -1.34e-13\npolygon 394 (hole)         7 -1.69870e-07     -2.54e-13\npolygon 395 (hole)        11 -1.85737e-07     -2.77e-13\npolygon 396 (hole)        32 -8.16597e-07     -1.22e-12\npolygon 397 (hole)         7 -6.59191e-08     -9.84e-14\npolygon 398 (hole)         3 -1.48932e-08     -2.22e-14\npolygon 399 (hole)        13 -3.56626e-07     -5.33e-13\npolygon 400 (hole)         3 -1.64295e-12     -2.45e-18\npolygon 401 (hole)         3 -2.03106e-09     -3.03e-15\npolygon 402               14  1.53563e-01      2.29e-07\npolygon 403 (hole)         4 -1.79041e-08     -2.67e-14\npolygon 404 (hole)        15 -2.31620e-07     -3.46e-13\npolygon 405 (hole)         7 -3.46670e-08     -5.18e-14\npolygon 406 (hole)         6 -1.90172e-08     -2.84e-14\npolygon 407 (hole)         6 -3.15828e-08     -4.72e-14\npolygon 408 (hole)        13 -1.40633e-08     -2.10e-14\npolygon 409 (hole)         6 -2.76240e-08     -4.12e-14\npolygon 410 (hole)         3 -3.74153e-08     -5.59e-14\npolygon 411 (hole)         3 -1.16808e-08     -1.74e-14\npolygon 412 (hole)        10 -4.10705e-09     -6.13e-15\npolygon 413 (hole)         4 -6.52777e-09     -9.75e-15\npolygon 414 (hole)         6 -5.03054e-08     -7.51e-14\npolygon 415 (hole)         4 -2.54303e-09     -3.80e-15\npolygon 416 (hole)         3 -1.76691e-10     -2.64e-16\npolygon 417 (hole)         4 -7.90017e-08     -1.18e-13\npolygon 418 (hole)         3 -1.07902e-09     -1.61e-15\npolygon 419 (hole)         3 -8.74115e-10     -1.31e-15\npolygon 420 (hole)        12 -6.41926e-08     -9.59e-14\npolygon 421 (hole)         4 -4.36895e-09     -6.52e-15\npolygon 422 (hole)         4 -1.85182e-08     -2.77e-14\npolygon 423 (hole)        10 -1.21248e-07     -1.81e-13\npolygon 424 (hole)        10 -5.59537e-08     -8.35e-14\npolygon 425 (hole)         4 -2.20079e-08     -3.29e-14\npolygon 426               19  5.08538e-01      7.59e-07\npolygon 427 (hole)         4 -1.45573e-08     -2.17e-14\npolygon 428 (hole)         4 -4.47181e-09     -6.68e-15\npolygon 429               16  1.80565e-01      2.70e-07\npolygon 430 (hole)         3 -9.03958e-14     -1.35e-19\npolygon 431               26  9.75091e-01      1.46e-06\npolygon 432 (hole)         4 -1.90718e-09     -2.85e-15\npolygon 433 (hole)         5 -1.60264e-08     -2.39e-14\npolygon 434 (hole)         4 -1.82919e-08     -2.73e-14\npolygon 435 (hole)         3 -7.26182e-09     -1.08e-14\npolygon 436 (hole)         4 -2.12571e-08     -3.17e-14\npolygon 437 (hole)         4 -2.41922e-09     -3.61e-15\npolygon 438 (hole)         3 -2.80771e-08     -4.19e-14\npolygon 439 (hole)         7 -5.31797e-09     -7.94e-15\npolygon 440 (hole)        16 -1.29582e-07     -1.93e-13\npolygon 441 (hole)         4 -1.88745e-08     -2.82e-14\npolygon 442 (hole)         3 -1.45605e-08     -2.17e-14\npolygon 443 (hole)         3 -2.28810e-08     -3.42e-14\npolygon 444 (hole)         4 -1.59810e-08     -2.39e-14\npolygon 445 (hole)         5 -1.72617e-08     -2.58e-14\npolygon 446 (hole)         3 -4.96859e-09     -7.42e-15\npolygon 447 (hole)        14 -8.85135e-08     -1.32e-13\npolygon 448 (hole)         4 -1.85807e-08     -2.77e-14\npolygon 449 (hole)         4 -8.61250e-09     -1.29e-14\npolygon 450 (hole)         4 -2.06032e-08     -3.08e-14\npolygon 451 (hole)         3 -1.66645e-09     -2.49e-15\npolygon 452 (hole)         7 -1.66808e-08     -2.49e-14\npolygon 453 (hole)         4 -1.67544e-09     -2.50e-15\npolygon 454 (hole)        12 -3.97402e-08     -5.93e-14\npolygon 455 (hole)         4 -4.18178e-08     -6.24e-14\npolygon 456 (hole)         3 -2.93135e-09     -4.38e-15\npolygon 457 (hole)         4 -6.31983e-10     -9.44e-16\npolygon 458 (hole)         3 -8.50840e-13     -1.27e-18\npolygon 459 (hole)         7 -8.42406e-09     -1.26e-14\npolygon 460 (hole)         3 -1.34855e-12     -2.01e-18\npolygon 461 (hole)         6 -1.60663e-08     -2.40e-14\npolygon 462 (hole)         4 -5.66656e-11     -8.46e-17\npolygon 463 (hole)         5 -1.17874e-08     -1.76e-14\npolygon 464 (hole)         3 -1.75180e-14     -2.62e-20\npolygon 465 (hole)         5 -2.62273e-08     -3.92e-14\npolygon 466 (hole)         7 -2.12912e-08     -3.18e-14\npolygon 467 (hole)        11 -4.47347e-08     -6.68e-14\npolygon 468 (hole)         6 -5.00912e-09     -7.48e-15\npolygon 469 (hole)         5 -3.58831e-08     -5.36e-14\npolygon 470 (hole)         3 -1.06446e-09     -1.59e-15\npolygon 471 (hole)         4 -1.50038e-08     -2.24e-14\npolygon 472 (hole)         3 -8.74496e-10     -1.31e-15\npolygon 473 (hole)         7 -3.75991e-08     -5.61e-14\npolygon 474               19  2.15295e-01      3.21e-07\npolygon 475 (hole)         6 -3.71337e-08     -5.54e-14\npolygon 476 (hole)         3 -4.33900e-09     -6.48e-15\npolygon 477 (hole)         7 -8.65067e-08     -1.29e-13\npolygon 478 (hole)         8 -7.76951e-08     -1.16e-13\npolygon 479 (hole)         6 -9.01907e-08     -1.35e-13\npolygon 480 (hole)         8 -1.10404e-07     -1.65e-13\npolygon 481 (hole)         8 -7.38263e-08     -1.10e-13\npolygon 482 (hole)         3 -1.71517e-08     -2.56e-14\npolygon 483               16  3.50061e-01      5.23e-07\npolygon 484 (hole)         3 -1.50971e-14     -2.25e-20\npolygon 485 (hole)         3 -1.78834e-04     -2.67e-10\npolygon 486                3  0.00000e+00      0.00e+00\npolygon 487 (hole)         4 -4.21570e-08     -6.29e-14\npolygon 488 (hole)         7 -1.74178e-07     -2.60e-13\npolygon 489               14  2.11571e-01      3.16e-07\npolygon 490 (hole)         3 -1.05578e-08     -1.58e-14\npolygon 491 (hole)         4 -4.32122e-08     -6.45e-14\npolygon 492               11  1.59536e-01      2.38e-07\npolygon 493 (hole)         4 -3.72418e-08     -5.56e-14\npolygon 494 (hole)         6 -2.87377e-08     -4.29e-14\npolygon 495 (hole)         3 -3.87472e-09     -5.79e-15\npolygon 496 (hole)         6 -1.05664e-08     -1.58e-14\npolygon 497 (hole)         4 -7.04519e-09     -1.05e-14\npolygon 498              111  7.35028e+01      1.10e-04\npolygon 499 (hole)         3 -5.99345e-09     -8.95e-15\npolygon 500 (hole)         3 -2.33491e-08     -3.49e-14\npolygon 501 (hole)         5 -1.14503e-07     -1.71e-13\npolygon 502               19  6.34649e-01      9.48e-07\npolygon 503 (hole)         3 -2.26548e-09     -3.38e-15\npolygon 504 (hole)         4 -5.35016e-08     -7.99e-14\npolygon 505               10  3.74827e-02      5.60e-08\npolygon 506               13  1.37100e-01      2.05e-07\npolygon 507               31  4.47193e+00      6.68e-06\npolygon 508               19  1.23742e+00      1.85e-06\npolygon 509               20  1.79201e+00      2.68e-06\npolygon 510 (hole)         3 -1.64235e-08     -2.45e-14\npolygon 511               16  2.19464e-01      3.28e-07\npolygon 512               11  7.94092e-02      1.19e-07\npolygon 513 (hole)         3 -2.99572e-08     -4.47e-14\npolygon 514 (hole)         3 -8.18639e-09     -1.22e-14\npolygon 515 (hole)         3 -2.81986e-08     -4.21e-14\npolygon 516               14  1.45779e-01      2.18e-07\npolygon 517               31  6.24672e-01      9.33e-07\npolygon 518               11  2.29288e-02      3.42e-08\npolygon 519               18  2.10998e-01      3.15e-07\npolygon 520               26  2.52571e+00      3.77e-06\npolygon 521               16  5.77783e-01      8.63e-07\npolygon 522               26  8.87985e-01      1.33e-06\npolygon 523               13  1.10557e-01      1.65e-07\npolygon 524               21  9.55338e-01      1.43e-06\npolygon 525               32  2.18189e+00      3.26e-06\npolygon 526               18  7.64830e-01      1.14e-06\npolygon 527               34  1.71336e+00      2.56e-06\npolygon 528              115  9.29594e-01      1.39e-06\npolygon 529               68  2.06761e-01      3.09e-07\npolygon 530               40  4.87851e+00      7.28e-06\npolygon 531               10  7.43137e-02      1.11e-07\npolygon 532               17  5.95020e-01      8.88e-07\npolygon 533               21  4.02132e-01      6.00e-07\npolygon 534               21  1.09635e+00      1.64e-06\npolygon 535               14  1.15356e-01      1.72e-07\npolygon 536 (hole)        18 -1.39516e-07     -2.08e-13\npolygon 537               20  3.13610e-01      4.68e-07\npolygon 538              275  3.92648e+02      5.86e-04\npolygon 539               16  2.19612e-01      3.28e-07\npolygon 540               13  2.64858e-01      3.95e-07\npolygon 541               23  1.25549e+00      1.87e-06\npolygon 542                9  1.79312e-01      2.68e-07\npolygon 543               15  2.93132e-01      4.38e-07\npolygon 544               15  5.29892e-01      7.91e-07\npolygon 545               23  4.95351e-01      7.40e-07\npolygon 546 (hole)        10 -2.23148e-07     -3.33e-13\npolygon 547               14  4.41976e-01      6.60e-07\npolygon 548               19  3.32318e-01      4.96e-07\npolygon 549 (hole)         6 -6.70431e-08     -1.00e-13\npolygon 550               16  4.15914e-01      6.21e-07\npolygon 551               22  5.10526e-01      7.62e-07\npolygon 552               48  1.87148e+01      2.79e-05\npolygon 553               18  1.62882e+00      2.43e-06\npolygon 554 (hole)         9 -1.96623e-07     -2.94e-13\npolygon 555               71  2.43615e+01      3.64e-05\npolygon 556              116  5.16444e+01      7.71e-05\npolygon 557               19  1.54144e+00      2.30e-06\npolygon 558               11  2.01013e-01      3.00e-07\npolygon 559 (hole)         4 -1.87899e-08     -2.81e-14\npolygon 560               20  2.31201e+00      3.45e-06\npolygon 561               15  5.94674e-01      8.88e-07\npolygon 562              218  1.56252e+02      2.33e-04\npolygon 563              162  8.80247e+01      1.31e-04\npolygon 564               16  3.69968e-01      5.52e-07\npolygon 565               14  1.61451e-01      2.41e-07\npolygon 566               18  5.54566e-01      8.28e-07\npolygon 567               19  5.07078e-01      7.57e-07\npolygon 568 (hole)         7 -1.85276e-07     -2.77e-13\npolygon 569               57  6.86475e+00      1.03e-05\npolygon 570               15  6.56018e-01      9.80e-07\npolygon 571               21  6.65092e-01      9.93e-07\npolygon 572               15  5.97784e-01      8.93e-07\npolygon 573               37  2.56010e+00      3.82e-06\npolygon 574               13  1.66996e-01      2.49e-07\npolygon 575               20  8.18381e-01      1.22e-06\npolygon 576               21  2.89704e+00      4.33e-06\npolygon 577               15  4.08213e-01      6.10e-07\npolygon 578 (hole)         3 -1.98618e-09     -2.97e-15\npolygon 579              104  4.71547e+01      7.04e-05\npolygon 580               28  3.80443e+00      5.68e-06\npolygon 581               67  3.17343e+01      4.74e-05\npolygon 582              730  9.20735e+02      1.37e-03\npolygon 583               16  2.01576e-01      3.01e-07\npolygon 584               12  1.41506e-01      2.11e-07\npolygon 585               15  4.92125e-01      7.35e-07\npolygon 586               18  1.58128e+00      2.36e-06\npolygon 587 (hole)         7 -6.67005e-08     -9.96e-14\npolygon 588               25  1.94322e+00      2.90e-06\npolygon 589               12  2.51373e-01      3.75e-07\npolygon 590              412  4.47936e+02      6.69e-04\npolygon 591               22  7.57105e-01      1.13e-06\npolygon 592               16  6.97434e-01      1.04e-06\npolygon 593 (hole)         3 -2.86672e-08     -4.28e-14\npolygon 594               39  4.45130e+00      6.65e-06\npolygon 595 (hole)         4 -2.17002e-08     -3.24e-14\npolygon 596 (hole)         3 -1.55741e-08     -2.33e-14\npolygon 597               13  8.83786e-01      1.32e-06\npolygon 598               10  2.06200e-01      3.08e-07\npolygon 599 (hole)         3 -3.50430e-08     -5.23e-14\npolygon 600               76  3.60497e+01      5.38e-05\npolygon 601 (hole)         5 -5.41615e-08     -8.09e-14\npolygon 602               13  4.56433e-01      6.82e-07\npolygon 603               28  2.30613e+00      3.44e-06\npolygon 604 (hole)         4 -1.59313e-08     -2.38e-14\npolygon 605               27  2.50338e+00      3.74e-06\npolygon 606               14  4.69238e-01      7.01e-07\npolygon 607               10  1.69886e-01      2.54e-07\npolygon 608 (hole)         8 -1.09145e-07     -1.63e-13\npolygon 609               16  5.42822e-01      8.11e-07\npolygon 610               10  1.17633e-01      1.76e-07\npolygon 611                8  7.08579e-02      1.06e-07\npolygon 612              144  7.85300e+01      1.17e-04\npolygon 613               37  1.93477e+00      2.89e-06\npolygon 614 (hole)         3 -1.47049e-09     -2.20e-15\npolygon 615               25  5.59996e-01      8.36e-07\npolygon 616 (hole)         8 -1.20535e-07     -1.80e-13\npolygon 617               44  2.86031e+00      4.27e-06\npolygon 618               26  1.26276e+00      1.89e-06\npolygon 619              149  1.37840e+02      2.06e-04\npolygon 620               18  4.84958e-01      7.24e-07\npolygon 621               73  2.93195e+01      4.38e-05\npolygon 622 (hole)         5 -1.99458e-08     -2.98e-14\npolygon 623               45  6.87481e+00      1.03e-05\npolygon 624 (hole)         4 -1.81549e-08     -2.71e-14\npolygon 625               64  1.80880e+01      2.70e-05\npolygon 626               12  8.76879e-01      1.31e-06\npolygon 627               26  2.78381e+00      4.16e-06\npolygon 628               35  8.72326e+00      1.30e-05\npolygon 629               53  1.06237e+01      1.59e-05\npolygon 630               26  5.40467e+00      8.07e-06\npolygon 631              148  1.05037e+02      1.57e-04\npolygon 632               21  8.32798e-01      1.24e-06\npolygon 633               21  2.23023e+00      3.33e-06\npolygon 634                8  6.30805e-01      9.42e-07\npolygon 635               78  3.67603e+01      5.49e-05\npolygon 636               18  1.64745e+00      2.46e-06\npolygon 637               58  1.31747e+01      1.97e-05\npolygon 638               94  1.16837e+01      1.74e-05\npolygon 639               53  3.17801e+00      4.75e-06\npolygon 640              137  8.46454e+00      1.26e-05\npolygon 641               23  4.36507e-01      6.52e-07\npolygon 642               27  9.72136e-01      1.45e-06\npolygon 643               55  1.98854e+00      2.97e-06\npolygon 644               48  1.02651e+01      1.53e-05\npolygon 645               15  3.16153e-01      4.72e-07\npolygon 646               22  8.93201e-01      1.33e-06\npolygon 647               18  2.91538e-01      4.35e-07\npolygon 648               59  3.70736e+00      5.54e-06\npolygon 649               11  1.55205e-01      2.32e-07\npolygon 650               14  1.87401e-01      2.80e-07\npolygon 651               11  6.54128e-02      9.77e-08\npolygon 652               11  8.64659e-02      1.29e-07\npolygon 653               12  2.25129e-01      3.36e-07\npolygon 654               30  2.72178e+00      4.06e-06\npolygon 655 (hole)         3 -2.26252e-06     -3.38e-12\npolygon 656              180  1.80314e+01      2.69e-05\npolygon 657               14  4.01942e-01      6.00e-07\npolygon 658              103  1.33467e+01      1.99e-05\npolygon 659               14  2.07708e-01      3.10e-07\npolygon 660               55  4.38623e+00      6.55e-06\npolygon 661               41  4.69733e+00      7.01e-06\npolygon 662               74  3.92633e+00      5.86e-06\npolygon 663               31  2.79477e+00      4.17e-06\npolygon 664               17  8.74607e-01      1.31e-06\npolygon 665               26  4.50962e-01      6.73e-07\npolygon 666               18  1.15065e+00      1.72e-06\npolygon 667              164  1.48037e+01      2.21e-05\npolygon 668               12  3.17290e-01      4.74e-07\npolygon 669               69  2.59551e+01      3.88e-05\npolygon 670               37  7.85963e-01      1.17e-06\npolygon 671               14  3.37873e-01      5.05e-07\npolygon 672               12  1.77980e-01      2.66e-07\npolygon 673               21  6.46195e-01      9.65e-07\npolygon 674               24  2.69998e+00      4.03e-06\npolygon 675               30  1.00675e+00      1.50e-06\npolygon 676               57  4.22747e+00      6.31e-06\npolygon 677               23  8.63543e-01      1.29e-06\npolygon 678               11  2.01925e-01      3.02e-07\npolygon 679               95  2.88232e+01      4.30e-05\npolygon 680              452  9.64208e+01      1.44e-04\npolygon 681               77  1.72297e+01      2.57e-05\npolygon 682               16  3.33522e-01      4.98e-07\npolygon 683               19  6.82895e-01      1.02e-06\npolygon 684               43  3.95062e+00      5.90e-06\npolygon 685               29  1.00709e+00      1.50e-06\npolygon 686               21  8.90014e-01      1.33e-06\npolygon 687               22  7.93453e-01      1.18e-06\npolygon 688               13  4.52813e-01      6.76e-07\npolygon 689               30  1.49817e+00      2.24e-06\npolygon 690               48  4.23996e+00      6.33e-06\npolygon 691               37  1.20290e+00      1.80e-06\npolygon 692               19  4.85805e-01      7.25e-07\npolygon 693               46  2.18001e+00      3.26e-06\npolygon 694                7  1.33723e-01      2.00e-07\npolygon 695               54  1.82059e+01      2.72e-05\npolygon 696               10  8.57866e-01      1.28e-06\npolygon 697               14  1.98445e-01      2.96e-07\npolygon 698               19  4.68357e-01      6.99e-07\npolygon 699               52  8.57765e+00      1.28e-05\npolygon 700               73  7.91998e+00      1.18e-05\npolygon 701               23  8.19561e+00      1.22e-05\npolygon 702               10  1.06594e-01      1.59e-07\npolygon 703              169  1.39462e+01      2.08e-05\npolygon 704               17  2.55915e-01      3.82e-07\npolygon 705               12  1.81516e-01      2.71e-07\npolygon 706               16  3.68509e-01      5.50e-07\npolygon 707               12  1.24954e-01      1.87e-07\npolygon 708             1012  4.61886e+02      6.90e-04\npolygon 709               15  5.42647e-01      8.10e-07\npolygon 710               12  5.53088e-01      8.26e-07\npolygon 711               24  1.06455e+00      1.59e-06\npolygon 712               14  3.17038e-01      4.73e-07\npolygon 713               17  1.25559e+00      1.87e-06\npolygon 714               16  1.92407e+00      2.87e-06\npolygon 715               80  1.86306e+01      2.78e-05\npolygon 716               11  6.83880e-02      1.02e-07\npolygon 717              166  4.21470e+01      6.29e-05\npolygon 718               22  1.36174e+00      2.03e-06\npolygon 719               31  6.07363e-01      9.07e-07\npolygon 720               10  1.27067e-01      1.90e-07\npolygon 721              164  5.02951e+01      7.51e-05\npolygon 722               17  1.20798e+00      1.80e-06\npolygon 723               59  2.41720e+00      3.61e-06\npolygon 724               12  2.52952e-01      3.78e-07\npolygon 725               14  2.44407e-01      3.65e-07\npolygon 726               43  4.89177e+00      7.30e-06\npolygon 727               40  3.86642e+00      5.77e-06\npolygon 728               23  4.59203e-01      6.86e-07\npolygon 729               14  1.79442e-01      2.68e-07\npolygon 730               13  1.61191e-01      2.41e-07\npolygon 731               43  1.33365e+00      1.99e-06\npolygon 732               75  1.20247e+01      1.80e-05\npolygon 733               17  9.96466e-02      1.49e-07\npolygon 734               22  1.60660e+00      2.40e-06\npolygon 735              730  1.16983e+02      1.75e-04\npolygon 736              129  7.87539e+00      1.18e-05\npolygon 737               22  4.66256e-01      6.96e-07\npolygon 738               19  5.44519e-01      8.13e-07\npolygon 739               16  3.73911e-01      5.58e-07\npolygon 740               88  3.47678e+01      5.19e-05\npolygon 741               46  3.23711e+00      4.83e-06\npolygon 742               47  9.17482e-01      1.37e-06\npolygon 743               14  4.44869e-01      6.64e-07\npolygon 744               43  1.29527e+00      1.93e-06\npolygon 745               65  3.20974e+00      4.79e-06\npolygon 746              306  1.83695e+01      2.74e-05\npolygon 747               17  4.25486e-01      6.35e-07\npolygon 748               29  1.08467e+00      1.62e-06\npolygon 749               26  1.16602e+00      1.74e-06\npolygon 750              135  4.90655e+00      7.33e-06\npolygon 751               23  1.87723e+00      2.80e-06\npolygon 752               21  7.02338e-01      1.05e-06\npolygon 753               30  4.99970e+00      7.47e-06\npolygon 754               21  7.71571e-01      1.15e-06\npolygon 755               13  1.47832e-01      2.21e-07\npolygon 756               26  3.17307e+00      4.74e-06\npolygon 757               17  1.03642e+00      1.55e-06\npolygon 758              100  8.74537e+00      1.31e-05\npolygon 759               11  1.13950e-01      1.70e-07\npolygon 760               26  8.27840e-01      1.24e-06\npolygon 761               17  4.10882e-01      6.14e-07\npolygon 762               13  1.49250e-01      2.23e-07\npolygon 763               35  1.76408e+00      2.63e-06\npolygon 764               15  2.03390e-01      3.04e-07\npolygon 765               18  1.70982e-01      2.55e-07\npolygon 766               32  7.98599e+00      1.19e-05\npolygon 767               27  3.20839e-01      4.79e-07\npolygon 768              539  1.17139e+02      1.75e-04\npolygon 769               51  1.57614e+00      2.35e-06\npolygon 770               19  3.60772e-01      5.39e-07\npolygon 771               58  2.10060e+00      3.14e-06\npolygon 772               13  1.70224e-01      2.54e-07\npolygon 773               11  6.11736e-01      9.13e-07\npolygon 774               35  5.26152e+00      7.86e-06\npolygon 775               16  1.99371e-01      2.98e-07\npolygon 776               14  4.48979e-01      6.70e-07\npolygon 777               25  1.92913e+00      2.88e-06\npolygon 778               16  4.26157e-01      6.36e-07\npolygon 779               46  1.88229e+00      2.81e-06\npolygon 780               17  2.29456e-01      3.43e-07\npolygon 781               36  4.01418e+00      5.99e-06\npolygon 782               57  1.77153e+01      2.65e-05\npolygon 783               20  5.72298e-01      8.55e-07\npolygon 784               14  2.46782e-01      3.68e-07\npolygon 785               29  1.01300e+00      1.51e-06\npolygon 786               90  8.54955e+00      1.28e-05\npolygon 787               21  3.99098e-01      5.96e-07\npolygon 788               12  2.81650e-01      4.21e-07\npolygon 789               52  3.19337e+00      4.77e-06\npolygon 790               13  3.40300e-01      5.08e-07\npolygon 791               29  9.08533e-01      1.36e-06\npolygon 792               20  3.07393e-01      4.59e-07\npolygon 793               19  1.15906e+00      1.73e-06\npolygon 794               17  1.16182e+00      1.73e-06\npolygon 795               21  2.60877e+00      3.90e-06\npolygon 796               15  1.09001e-01      1.63e-07\npolygon 797               37  1.31921e+00      1.97e-06\npolygon 798               53  1.46854e+00      2.19e-06\npolygon 799               59  8.92822e+00      1.33e-05\npolygon 800                9  7.44981e-02      1.11e-07\npolygon 801               14  2.41462e-01      3.61e-07\npolygon 802               96  7.25940e+00      1.08e-05\npolygon 803               11  1.06055e-01      1.58e-07\npolygon 804               49  1.87834e+00      2.80e-06\npolygon 805               23  6.08310e-01      9.08e-07\npolygon 806               50  6.76488e-01      1.01e-06\npolygon 807               22  4.83089e-01      7.21e-07\npolygon 808               17  1.17278e-01      1.75e-07\npolygon 809               13  8.98786e-01      1.34e-06\npolygon 810               43  1.01757e+00      1.52e-06\npolygon 811               52  1.68377e+00      2.51e-06\npolygon 812              348  2.50314e+02      3.74e-04\npolygon 813               43  1.29120e+00      1.93e-06\npolygon 814               71  2.02836e+00      3.03e-06\npolygon 815 (hole)         4 -4.12791e-06     -6.16e-12\npolygon 816              141  4.53240e+00      6.77e-06\npolygon 817               52  3.62008e+00      5.41e-06\npolygon 818               20  7.69539e-01      1.15e-06\npolygon 819               88  8.88904e+00      1.33e-05\npolygon 820               12  1.44668e-01      2.16e-07\npolygon 821               46  2.28026e+00      3.40e-06\npolygon 822               39  4.79165e+00      7.15e-06\npolygon 823               53  2.86736e+00      4.28e-06\npolygon 824               38  3.22508e+00      4.82e-06\npolygon 825               18  4.44863e-01      6.64e-07\npolygon 826               45  1.45134e+00      2.17e-06\npolygon 827               86  2.56400e+01      3.83e-05\npolygon 828              158  1.74510e+01      2.61e-05\npolygon 829               14  2.50383e-01      3.74e-07\npolygon 830              120  7.17019e+00      1.07e-05\npolygon 831              146  2.28448e+01      3.41e-05\npolygon 832              143  2.34472e+01      3.50e-05\npolygon 833               20  3.47415e-01      5.19e-07\npolygon 834 (hole)         4 -4.70080e-12     -7.02e-18\npolygon 835               84  3.86387e+00      5.77e-06\npolygon 836               68  1.10850e+01      1.66e-05\npolygon 837              863  7.47702e+01      1.12e-04\npolygon 838               53  7.54742e+00      1.13e-05\npolygon 839 (hole)         5 -5.07266e-12     -7.57e-18\npolygon 840               64  2.11016e+00      3.15e-06\npolygon 841              103  1.47525e+01      2.20e-05\npolygon 842               26  3.40345e+00      5.08e-06\npolygon 843 (hole)         6 -3.63322e-12     -5.43e-18\npolygon 844 (hole)         8 -7.62695e-12     -1.14e-17\npolygon 845              103  8.40445e+00      1.25e-05\npolygon 846               23  4.92041e-01      7.35e-07\npolygon 847               27  5.53625e-01      8.27e-07\npolygon 848               60  3.56102e+00      5.32e-06\npolygon 849              151  1.51314e+01      2.26e-05\npolygon 850 (hole)         3 -7.39478e-13     -1.10e-18\npolygon 851              708  4.18129e+02      6.24e-04\npolygon 852              120  1.32857e+01      1.98e-05\npolygon 853              856  2.53898e+02      3.79e-04\npolygon 854 (hole)         3 -1.51167e-12     -2.26e-18\npolygon 855 (hole)         3 -4.16327e-13     -6.22e-19\npolygon 856 (hole)         3 -1.81968e-13     -2.72e-19\npolygon 857 (hole)         5 -8.69542e-12     -1.30e-17\npolygon 858               13  2.47298e-01      3.69e-07\npolygon 859 (hole)         5 -7.23071e-12     -1.08e-17\npolygon 860               16  7.35754e-01      1.10e-06\npolygon 861 (hole)         4 -5.36614e-12     -8.01e-18\npolygon 862               21  5.31633e-01      7.94e-07\npolygon 863 (hole)        11 -4.03802e-12     -6.03e-18\npolygon 864 (hole)         8 -8.21058e-12     -1.23e-17\npolygon 865 (hole)         3 -8.94235e-13     -1.34e-18\npolygon 866 (hole)         5 -8.77891e-13     -1.31e-18\npolygon 867               72  1.03185e+01      1.54e-05\npolygon 868 (hole)         4 -1.46473e-12     -2.19e-18\npolygon 869 (hole)         3 -9.57738e-14     -1.43e-19\npolygon 870               38  1.34734e+00      2.01e-06\npolygon 871                8  4.09489e-01      6.11e-07\npolygon 872 (hole)         4 -2.72557e-12     -4.07e-18\npolygon 873               17  2.46995e-01      3.69e-07\npolygon 874 (hole)         3 -4.56587e-13     -6.82e-19\npolygon 875               14  1.42285e-01      2.12e-07\npolygon 876 (hole)         4 -1.74558e-12     -2.61e-18\npolygon 877 (hole)         6 -5.91253e-12     -8.83e-18\npolygon 878 (hole)         4 -1.34510e-13     -2.01e-19\npolygon 879 (hole)         3 -6.12765e-17     -9.15e-23\npolygon 880                9  1.56346e-01      2.33e-07\npolygon 881                4  2.90958e-17      4.34e-23\npolygon 882               42  5.49581e-01      8.21e-07\npolygon 883 (hole)         5 -2.12744e-12     -3.18e-18\npolygon 884 (hole)         3 -5.23582e-12     -7.82e-18\npolygon 885 (hole)         3 -2.43443e-13     -3.64e-19\npolygon 886 (hole)         3 -8.02710e-13     -1.20e-18\npolygon 887 (hole)         6 -1.09890e-11     -1.64e-17\npolygon 888 (hole)         4 -1.53858e-13     -2.30e-19\npolygon 889               59  1.15813e+00      1.73e-06\npolygon 890 (hole)         4 -2.30355e-12     -3.44e-18\npolygon 891               12  1.16845e-01      1.74e-07\npolygon 892               11  6.00122e-02      8.96e-08\npolygon 893               14  1.63465e-01      2.44e-07\npolygon 894                8  4.73674e-02      7.07e-08\npolygon 895               23  6.69330e-01      9.99e-07\npolygon 896 (hole)         3 -1.13772e-13     -1.70e-19\npolygon 897              144  6.48346e+00      9.68e-06\npolygon 898               74  4.79923e+00      7.17e-06\npolygon 899              116  1.02706e+01      1.53e-05\npolygon 900               16  2.74005e-01      4.09e-07\npolygon 901               97  4.72599e+00      7.06e-06\npolygon 902               18  6.15583e-01      9.19e-07\npolygon 903              146  1.38979e+01      2.08e-05\npolygon 904 (hole)         5 -4.08205e-12     -6.10e-18\npolygon 905               32  1.94516e+00      2.90e-06\npolygon 906               26  9.81356e-01      1.47e-06\npolygon 907 (hole)         3 -2.01834e-12     -3.01e-18\npolygon 908 (hole)         4 -9.94985e-13     -1.49e-18\npolygon 909               82  4.39797e+00      6.57e-06\npolygon 910               33  9.36113e-01      1.40e-06\npolygon 911 (hole)         3 -1.40697e-13     -2.10e-19\npolygon 912               47  1.51844e+00      2.27e-06\npolygon 913 (hole)         3 -6.88122e-12     -1.03e-17\npolygon 914              196  2.32689e+01      3.47e-05\npolygon 915 (hole)         3 -2.40592e-12     -3.59e-18\npolygon 916 (hole)         5 -6.19998e-12     -9.26e-18\npolygon 917               53  1.30069e+00      1.94e-06\npolygon 918               70  1.00802e+01      1.51e-05\npolygon 919 (hole)         3 -3.17405e-13     -4.74e-19\npolygon 920               10  5.33870e-01      7.97e-07\npolygon 921              211  2.73026e+01      4.08e-05\npolygon 922               41  1.44141e+00      2.15e-06\npolygon 923                9  5.20220e-01      7.77e-07\npolygon 924              316  6.66808e+01      9.96e-05\npolygon 925               17  7.48505e-01      1.12e-06\npolygon 926               15  1.49799e-01      2.24e-07\npolygon 927               24  4.99500e-01      7.46e-07\npolygon 928               12  2.24463e-01      3.35e-07\npolygon 929              100  1.06028e+01      1.58e-05\npolygon 930               11  1.24267e-01      1.86e-07\npolygon 931              143  1.89581e+01      2.83e-05\npolygon 932               60  7.07802e+00      1.06e-05\npolygon 933              124  1.23476e+01      1.84e-05\npolygon 934               34  5.67625e+00      8.48e-06\npolygon 935              797  1.86955e+02      2.79e-04\npolygon 936               15  7.15891e-01      1.07e-06\npolygon 937               20  1.61624e+00      2.41e-06\npolygon 938               13  1.73955e-01      2.60e-07\npolygon 939               60  2.42590e+00      3.62e-06\npolygon 940               20  3.86365e-01      5.77e-07\npolygon 941              213  3.69421e+01      5.52e-05\npolygon 942               15  4.55574e-01      6.80e-07\npolygon 943               35  1.56058e+00      2.33e-06\npolygon 944               32  1.42419e+00      2.13e-06\npolygon 945               68  2.30711e+00      3.44e-06\npolygon 946              240  5.93935e+01      8.87e-05\npolygon 947              145  1.58875e+01      2.37e-05\npolygon 948               39  3.67239e+00      5.48e-06\npolygon 949               54  3.84847e+00      5.75e-06\npolygon 950               32  1.14073e+00      1.70e-06\npolygon 951               18  3.58549e-01      5.35e-07\npolygon 952               25  8.06470e-01      1.20e-06\npolygon 953               15  2.67818e-01      4.00e-07\npolygon 954               26  1.43681e+00      2.15e-06\npolygon 955               18  3.10061e-01      4.63e-07\npolygon 956               18  4.71644e-01      7.04e-07\npolygon 957               16  5.04146e-01      7.53e-07\npolygon 958               72  7.33720e+00      1.10e-05\npolygon 959               27  1.37772e+00      2.06e-06\npolygon 960               15  3.17217e-01      4.74e-07\npolygon 961               37  1.17498e+00      1.75e-06\npolygon 962               21  7.05388e-01      1.05e-06\npolygon 963              216  2.05399e+01      3.07e-05\npolygon 964               16  2.40093e-01      3.59e-07\npolygon 965               29  1.71282e+00      2.56e-06\npolygon 966               30  1.28695e+00      1.92e-06\npolygon 967               36  2.29670e+00      3.43e-06\npolygon 968              129  1.97698e+01      2.95e-05\npolygon 969               65  2.65969e+00      3.97e-06\npolygon 970              283  3.30575e+01      4.94e-05\npolygon 971               28  7.06271e-01      1.05e-06\npolygon 972               28  5.50158e-01      8.21e-07\npolygon 973               49  2.25015e+00      3.36e-06\npolygon 974               26  1.24280e+00      1.86e-06\npolygon 975               28  9.02794e-01      1.35e-06\npolygon 976               18  4.84064e-01      7.23e-07\npolygon 977               47  2.33442e+00      3.49e-06\npolygon 978               17  2.23835e-01      3.34e-07\npolygon 979               34  7.32504e-01      1.09e-06\npolygon 980               41  7.15538e-01      1.07e-06\npolygon 981               21  5.81687e-01      8.69e-07\npolygon 982               63  3.83819e+00      5.73e-06\npolygon 983               27  1.33192e+00      1.99e-06\npolygon 984               46  2.95028e+00      4.41e-06\npolygon 985               10  1.34210e-01      2.00e-07\npolygon 986               16  2.38274e-01      3.56e-07\npolygon 987               18  4.18536e-01      6.25e-07\npolygon 988               46  1.26584e+00      1.89e-06\npolygon 989               14  2.14679e-01      3.21e-07\npolygon 990               76  3.63371e+00      5.43e-06\npolygon 991              339  4.44685e+01      6.64e-05\npolygon 992              109  6.29786e+00      9.40e-06\npolygon 993               14  2.89570e-01      4.32e-07\npolygon 994               37  9.07704e-01      1.36e-06\npolygon 995               68  3.86104e+00      5.77e-06\npolygon 996              183  1.45458e+01      2.17e-05\npolygon 997               44  1.64355e+00      2.45e-06\npolygon 998               26  1.21667e+00      1.82e-06\npolygon 999               13  1.95710e-01      2.92e-07\npolygon 1000              38  1.44402e+00      2.16e-06\npolygon 1001              14  3.29394e-01      4.92e-07\npolygon 1002              14  1.79828e-01      2.69e-07\npolygon 1003              44  2.11118e+00      3.15e-06\npolygon 1004             643  1.79215e+02      2.68e-04\npolygon 1005              24  1.10979e+00      1.66e-06\npolygon 1006              30  1.57106e+00      2.35e-06\npolygon 1007              46  3.61716e+00      5.40e-06\npolygon 1008              93  7.56340e-01      1.13e-06\npolygon 1009              57  3.07732e+00      4.59e-06\npolygon 1010              18  2.16224e-01      3.23e-07\npolygon 1011              17  5.12388e-01      7.65e-07\npolygon 1012               9  7.44780e-02      1.11e-07\npolygon 1013              57  8.09122e+00      1.21e-05\npolygon 1014              16  4.01323e-01      5.99e-07\npolygon 1015             118  2.90304e+01      4.33e-05\npolygon 1016              22  4.44693e-01      6.64e-07\npolygon 1017              43  2.28763e+00      3.42e-06\npolygon 1018              27  1.15444e+00      1.72e-06\npolygon 1019              25  1.21695e+00      1.82e-06\npolygon 1020              53  4.49228e+00      6.71e-06\npolygon 1021 (hole)        8 -5.14959e-08     -7.69e-14\npolygon 1022 (hole)        3 -1.87101e-12     -2.79e-18\npolygon 1023 (hole)       31 -2.12239e-07     -3.17e-13\npolygon 1024 (hole)        6 -4.99400e-08     -7.46e-14\npolygon 1025 (hole)        8 -1.14003e-07     -1.70e-13\npolygon 1026 (hole)        4 -5.05161e-08     -7.54e-14\npolygon 1027 (hole)        4 -6.87492e-09     -1.03e-14\npolygon 1028 (hole)        6 -5.81106e-12     -8.68e-18\npolygon 1029 (hole)        7 -1.10596e-07     -1.65e-13\npolygon 1030 (hole)       14 -3.52603e-07     -5.26e-13\npolygon 1031 (hole)       14 -1.57740e-07     -2.36e-13\npolygon 1032 (hole)        6 -6.42551e-08     -9.59e-14\npolygon 1033 (hole)        4 -3.16857e-08     -4.73e-14\npolygon 1034 (hole)        8 -7.25950e-08     -1.08e-13\npolygon 1035 (hole)        4 -1.10823e-08     -1.65e-14\npolygon 1036 (hole)        8 -1.54074e-07     -2.30e-13\npolygon 1037 (hole)        4 -5.15531e-09     -7.70e-15\npolygon 1038 (hole)        7 -4.08919e-08     -6.11e-14\npolygon 1039 (hole)        9 -6.45354e-08     -9.64e-14\npolygon 1040 (hole)       13 -6.64876e-08     -9.93e-14\npolygon 1041 (hole)        5 -5.31928e-08     -7.94e-14\npolygon 1042 (hole)        6 -4.67379e-08     -6.98e-14\npolygon 1043 (hole)        4 -2.58840e-08     -3.86e-14\npolygon 1044 (hole)       10 -9.35297e-08     -1.40e-13\npolygon 1045 (hole)        4 -1.76462e-08     -2.63e-14\npolygon 1046 (hole)        4 -5.14884e-08     -7.69e-14\npolygon 1047 (hole)        3 -1.43941e-09     -2.15e-15\npolygon 1048 (hole)        8 -2.11864e-08     -3.16e-14\npolygon 1049 (hole)        4 -3.97950e-09     -5.94e-15\npolygon 1050 (hole)        3 -2.72931e-08     -4.08e-14\npolygon 1051 (hole)        4 -9.91931e-08     -1.48e-13\npolygon 1052 (hole)        9 -4.30090e-08     -6.42e-14\npolygon 1053 (hole)        3 -2.69442e-08     -4.02e-14\npolygon 1054 (hole)        6 -3.65336e-08     -5.46e-14\npolygon 1055 (hole)       10 -5.24779e-08     -7.84e-14\npolygon 1056 (hole)       12 -5.88191e-08     -8.78e-14\npolygon 1057 (hole)        8 -3.34285e-08     -4.99e-14\npolygon 1058 (hole)       18 -1.75177e-07     -2.62e-13\npolygon 1059 (hole)        6 -6.63687e-08     -9.91e-14\npolygon 1060 (hole)        3 -1.24000e-08     -1.85e-14\npolygon 1061 (hole)       10 -1.14560e-07     -1.71e-13\npolygon 1062 (hole)        5 -5.13944e-08     -7.67e-14\npolygon 1063 (hole)       10 -8.30360e-08     -1.24e-13\npolygon 1064 (hole)        4 -1.89513e-08     -2.83e-14\npolygon 1065 (hole)        6 -1.07333e-07     -1.60e-13\npolygon 1066 (hole)        3 -5.80811e-09     -8.67e-15\npolygon 1067              79  1.47390e+01      2.20e-05\npolygon 1068              54  9.35305e+00      1.40e-05\npolygon 1069 (hole)        3 -1.94488e-09     -2.90e-15\npolygon 1070 (hole)       10 -6.90517e-08     -1.03e-13\npolygon 1071 (hole)        4 -1.17368e-08     -1.75e-14\npolygon 1072 (hole)        9 -5.79029e-08     -8.65e-14\npolygon 1073 (hole)        3 -4.78872e-08     -7.15e-14\npolygon 1074 (hole)        3 -5.90058e-09     -8.81e-15\npolygon 1075 (hole)        5 -6.11108e-08     -9.12e-14\npolygon 1076           37606  6.60254e+05      9.86e-01\npolygon 1077 (hole)        5 -2.16281e-12     -3.23e-18\nenclosing rectangle: [-210.0086, 724.6476] x [1072.0263, 3158.4671] km\n                     (934.7 x 2086 km)\nWindow area = 669714 square km\nUnit of length: 1 km\nFraction of frame area: 0.343\n\n\n\n\n\nThe ppp object outputted from combining both the point and polygon feature results in the boundary of Myanmar outlining the plot of conflict events as shown.\n\n# Plot each masked ppp object\npar(mfrow = c(2,3), mar = c(0,0,1,0))\nfor (quarter in names(masked_ppp_list_km)) {\n  plot(masked_ppp_list_km[[quarter]], main = paste(\"Year Quarter:\", quarter))\n}\n\n\n\n\nLet’s also create combined ppp and owin objects by the districts I am interested in this study. We’ll prepare the objects for the districts: Yinmarbin, Shwebo, Pakokku and Mandalay.\n\nYinmarbinShweboPakokkuMandalay\n\n\n\n# Prepare Dataset for Yinmarbin District\nconflict_yinmarbin = filter(conflict_data_sf, DT == \"Yinmarbin\")\nboundary_yinmarbin &lt;- filter(boundary_sf, DT == \"Yinmarbin\")\n\n# Create a combined ppp and owin object\nyinmarbin_owin &lt;- as.owin(boundary_yinmarbin)\nppp_obj &lt;- as.ppp(conflict_yinmarbin$geometry)\n\nppp_obj &lt;- as.ppp(st_geometry(conflict_yinmarbin))\n\n# Handle duplicates\nppp_obj &lt;- rjitter(ppp_obj, retry=TRUE, nsim=1, drop=TRUE)\n\nyinmarbin_ppp_owin &lt;- ppp_obj[yinmarbin_owin]\nyinmarbin_ppp_owin &lt;- rescale(yinmarbin_ppp_owin, 1000, \"km\")\n\n\n\n\n# Prepare Dataset for Shwebo District\nconflict_shwebo = filter(conflict_data_sf, DT == \"Shwebo\")\nboundary_shwebo &lt;- filter(boundary_sf, DT == \"Shwebo\")\n\n# Create a combined ppp and owin object\nshwebo_owin &lt;- as.owin(boundary_shwebo)\nppp_obj &lt;- as.ppp(conflict_shwebo$geometry)\n\n# Handle duplicates\nppp_obj &lt;- rjitter(ppp_obj, retry=TRUE, nsim=1, drop=TRUE)\n\nshwebo_ppp_owin &lt;- ppp_obj[shwebo_owin]\nshwebo_ppp_owin &lt;- rescale(shwebo_ppp_owin, 1000, \"km\")\n\n\n\n\n# Prepare Dataset for Pakokku District\nconflict_pakokku = filter(conflict_data_sf, DT == \"Pakokku\")\nboundary_pakokku &lt;- filter(boundary_sf, DT == \"Pakokku\")\n\n# Create a combined ppp and owin object\npakokku_owin &lt;- as.owin(boundary_pakokku)\nppp_obj &lt;- as.ppp(conflict_pakokku$geometry)\n\n# Handle duplicates\nppp_obj &lt;- rjitter(ppp_obj, retry=TRUE, nsim=1, drop=TRUE)\n\npakokku_ppp_owin &lt;- ppp_obj[pakokku_owin]\npakokku_ppp_owin &lt;- rescale(pakokku_ppp_owin, 1000, \"km\")\n\n\n\n\n# Prepare Dataset for Mandalay District\nconflict_mandalay = filter(conflict_data_sf, DT == \"Mandalay\")\nboundary_mandalay &lt;- filter(boundary_sf, DT == \"Mandalay\")\n\n# Create a combined ppp and owin object\nmandalay_owin &lt;- as.owin(boundary_mandalay)\nppp_obj &lt;- as.ppp(conflict_mandalay$geometry)\n\n# Handle duplicates\nppp_obj &lt;- rjitter(ppp_obj, retry=TRUE, nsim=1, drop=TRUE)\n\nmandalay_ppp_owin &lt;- ppp_obj[mandalay_owin]\nmandalay_ppp_owin &lt;- rescale(mandalay_ppp_owin, 1000, \"km\")\n\n\n\n\n\npar(mfrow = c(2,2), mar = c(0,0,1,0))\nplot(yinmarbin_ppp_owin, main = paste(\"Yinmarbin District\"))\nplot(shwebo_ppp_owin, main = paste(\"Shwebo District\"))\nplot(pakokku_ppp_owin, main = paste(\"Pakokku District\"))\nplot(mandalay_ppp_owin, main = paste(\"Mandalay District\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nHere I plot the districts with the highest concentration of armed conflicts. We can observe localised clustering of armed conflicts in certain towns of each district (darker spots on the map) which also indicates high frequency of conflicts occurring in these areas. On the other hand, there are also parts of each district with smaller frequency of conflicts but clusters of conflicts formed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#st-order-spatial-point-patterns-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#st-order-spatial-point-patterns-analysis",
    "title": "Take-home Exercise 1 - Part 1",
    "section": "5. 1st Order Spatial Point Patterns Analysis",
    "text": "5. 1st Order Spatial Point Patterns Analysis\n\n5.1 Kernel Density Estimation\n\n5.1.1 Working with Fixed Bandwidth Methods\nUsing the geospatial data sets prepared, I will now perform 1st order spatial point pattern analysis by leveraging kernel density estimation (KDE) to understand the intensity of conflicts in different regions.\nI will be using a variety of fixed bandwidth methods via density() of the spatstat package, to determine the most optimal method for this analysis. Namely using bw.diggle(), bw.ppl(), bw.CvL() and bw.scott().\n\nSteps taken to calculate the KDE:\n\nExtract the masked ppp object for the current quarter.\nCompute the kernel density estimate by setting the signma parameters.\nPlot the kernel density estimate using plot() where “Bw” represents the optimal bandwidth\n\n\nFor the purposes of identifying the most optimal bandwidth method, I will create a ppp_obj using the 2021 Q1 conflict events first to assist my decision-making.\n\n# Set Up\nppp_obj = masked_ppp_list_km$`2021 Q1`\ncolours &lt;- colorRampPalette(c(\"midnightblue\", \"skyblue\"))(100)\n\n\nbw.diggle()bw.ppl()bw.CvL()bw.scott()\n\n\nThe bw.diggle() bandwidth is referred to as Diggle’s cross-validation bandwidth which minimises the mean-squared error (MSE) to balance between under and over-smoothing.\n\n# bw.diggle()\nkde_conflict_bw_diggle &lt;- density(ppp_obj,\n                           sigma=bw.diggle,\n                           edge=TRUE,\n                           kernel=\"gaussian\")\noptimal_bw_d = floor(bw.diggle(ppp_obj)[[1]]*10)/10\nplot(kde_conflict_bw_diggle, main = paste(\"BW: diggle\", \"(\",optimal_bw_d,\"km)\"), col = colours)\n\n\n\n\nThe second bandwidth method I attempted using is bw.ppl(), This method chooses the bandwidth that minimises the likelihood cross-validation score and improving the prediction accuracy of the kernel density estimate.\n\n# bw.ppl()\nkde_conflict_bw_ppl &lt;- density(ppp_obj,\n                           sigma=bw.ppl,\n                           edge=TRUE,\n                           kernel=\"gaussian\")\noptimal_bw_p = floor(bw.ppl(ppp_obj)[[1]]*10)/10\nplot(kde_conflict_bw_ppl, main = paste(\"Bw: ppl\", \"(\",optimal_bw_p,\"km)\"), col = colours)\n\n\n\n\nThirdly, let’s explore the bandwidth method bw.CvL(), also known as Cronie and Van Lieshout cross-validation, designed to provide an optimal, adaptive bandwidth for inhomogeneous point patterns.. Similar to bw.ppl(), it aims to reduce the error measure but also aims to balance over and under-fitting based on the spatial structure of the data.\n\n# bw.CvL()\nkde_conflict_bw_CvL &lt;- density(ppp_obj,\n                           sigma=bw.CvL,\n                           edge=TRUE,\n                           kernel=\"gaussian\")\noptimal_bw_c = floor(bw.CvL(ppp_obj)[[1]]*10)/10\nplot(kde_conflict_bw_CvL, main = paste(\"Bw: CvL (\",optimal_bw_c,\"km)\"), col = colours)\n\n\n\n\nLastly, I will explore the bw.scott() bandwidth method. This method returns separate bandwidths for the x- and y-axes which is ideal for our spatial data that contains both x and y components. I will combine these bandwidths into a single value for isotropic kernel density estimation by taking the taking the geometric mean as shown in the value returned by sigma_combined.\n\n# bw.scott()\nbw_values &lt;- bw.scott(ppp_obj)\nsigma_x &lt;- bw_values[1]\nsigma_y &lt;- bw_values[2]\nsigma_combined &lt;- sqrt(sigma_x * sigma_y)\n\nkde_conflict_bw_scott &lt;- density(ppp_obj,\n                           sigma = sigma_combined,\n                           edge = TRUE,\n                           kernel = \"gaussian\")\n\noptimal_bw_s = floor(sigma_combined*10)/10\nplot(kde_conflict_bw_scott, main = paste(\"Bw: scott\", \"(\",optimal_bw_s,\"km)\"), col = colours)\n\n\n\n\n\n\nSelecting a Bandwidth Method\nPramanik N. (2019) proposes that choosing an optimal bandwidth method is crucial in fitting the data appropriately to balance between bias and variance. As such, the four methods listed below cater to different types of data depending on how varied the densities are spread across and the granularity of conflict events. Let’s explore which bandwidth method is optimal for our dataset.\n\nbw.diggle(): appears to be effective for homogeneous data in seeing general conflict hotspots and uses the smallest bandwidth size\nbw.ppl(): tends to choose slightly larger bandwidths, it provide more localised density estimates which highlights finer spatial details. As such, we can see more variability and finer details in the density distribution, with more variation between high- and low-density areas.\nbw.CvL(): the kernel density plot shows that CvL makes a good attempt in balancing between detail and smoothness, making it more suitable for capturing the overall density trends in spatial data with some local structures highlighted.\nbw.scott(): as shown, the geometric mean ensures equal smoothing in both x and y directions, and is largely similar to bw.Cvl(), making it a good choice for a balanced and general and fast overview of the spatial data distribution.\n\n\n\nPlot all bandwidth methods\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \nplot(kde_conflict_bw_diggle, main = paste(\"diggle (\",optimal_bw_d,\"km)\"), col = colours)\nplot(kde_conflict_bw_ppl, main = paste(\"ppl (\",optimal_bw_p,\"km)\"), col = colours)\nplot(kde_conflict_bw_CvL, main = paste(\"CvL (\",optimal_bw_c,\"km)\"), col = colours)\nplot(kde_conflict_bw_scott, main = paste(\"scott (\",optimal_bw_s,\"km)\"), col = colours)\n\n\n\n\n# Plot histogram to compare KDE\npar(mar = c(2,2,2,2),mfrow = c(2,2))\nhist(kde_conflict_bw_diggle, main = \"diggle\")\nhist(kde_conflict_bw_ppl, main = \"ppl\")\nhist(kde_conflict_bw_CvL, main = \"scott\")\nhist(kde_conflict_bw_scott, main = \"CvL\")\n\n\n\n💡 Decision: I decided to use bw.CvL() for computing the KDE of the masked ppp objects based on each quarter. The KDE function outputs a relatively smooth density estimate that isn’t too detailed like bw.ppl() and not as generalised as bw.scott().\nThis coincides with wider range of spatial concentrations captured by the histogram, doing a good job with both capturing the non-homogeneous data spread of our Myanmar conflict data. Moreover, it isn’t as computationally heavy as bw.ppl().\n\n\n\nPutting Together our Fixed KDE using bw.CvL()\nNow, let us perform the KDE computation for the conflict events across all quarters using bw.CvL().\n\n# Calculate density using bw.CvL()\npar(mfrow = c(2,3), mar = c(0,0,1,0)) \nfor (quarter in names(masked_ppp_list_km)) {\n  ppp_obj = masked_ppp_list_km[[quarter]]\n  kde_conflict_bw &lt;- density(ppp_obj,\n                             sigma=bw.CvL,\n                             edge=TRUE,\n                             kernel=\"gaussian\")\n  optimal_bw = floor(bw.CvL(ppp_obj)[[1]]*10)/10\n  plot(kde_conflict_bw, main = paste(quarter, \"(Bw:\",optimal_bw,\"m)\"), col = colours)\n}\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nBandwidth Size: A bandwidth of around 60,000 to 100,000 is considered relatively large as compared to the bandwidth returned from using bw.diggle() and bw.ppl(). Hence, this results in a smoother density estimate with less emphasis on local clusters as indicated in the generalised spatial trends.\nNote: Using a fixed KDE is beneficial for our quarterly analysis but the bandwidth returned is different for each quarter. Later on, I’ll take the average bandwidth across different time periods so we can focus on spatial distribution over time.\n\n\n\n\n\n5.1.2 Working with Different Kernel Methods\n\n\n\n\n\nBias is an inevitable issue when it comes to choosing the type of kernel function. Rajagopalan B., et al (1997) states that kernels such as Epanechnikov, Quartic and Disc suffer a “leakage problem” where some of the probability mass is truncated at the boundary, leading to boundary bias. At the same time, the Gaussian kernel has no truncation, but small “leakage” beyond data range of the boundary inadvertantly causes bias to exist still. Shen et al. (2020) further proposes that the bandwidth is a more of an influential factor in kernel estimation than the selection of different kernel functions.\nLet us evaluate if this is true by experimenting with a variety of kernel methods as they ultimately control how we weight points within the bandwidth radius. The default kernel in density.ppp() is the gaussian. alternatives such as epanechnikov, quartic, and disc are also available. I will use the 2021 Q1 conflict data to assist in identifying the most optimal kernel method.\n\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \nppp_obj = masked_ppp_list_km$`2021 Q1`\n\n# Using the gaussian kernel\nkde_conflict_g &lt;- density(ppp_obj,\n                           sigma=bw.CvL,\n                           edge=TRUE,\n                           kernel=\"gaussian\")\nplot(kde_conflict_g, main=\"Gaussian Kernel\", col = colours)\n\n# Using the epanechniko kernel\nkde_conflict_e &lt;- density(ppp_obj,\n                           sigma=bw.CvL,\n                           edge=TRUE,\n                           kernel=\"epanechnikov\")\nplot(kde_conflict_e, main=\"Epanechnikov Kernel\", col = colours)\n\n# Using the quartic kernel\nkde_conflict_q &lt;- density(ppp_obj,\n                           sigma=bw.CvL,\n                           edge=TRUE,\n                           kernel=\"quartic\")\nplot(kde_conflict_q, main=\"Quartic Kernel\", col = colours)\n\n# Using the disc kernel\nkde_conflict_d &lt;- density(ppp_obj,\n                           sigma=bw.CvL,\n                           edge=TRUE,\n                           kernel=\"disc\")\nplot(kde_conflict_d, main=\"Disc Kernel\", col = colours)\n\n\n\n# Plot histogram to compare KDE\npar(mar = c(2,2,2,2),mfrow = c(2,2))\nhist(kde_conflict_g, main = \"Gaussian\")\nhist(kde_conflict_e, main = \"Epanechnikov\")\nhist(kde_conflict_q, main = \"Quartic\")\nhist(kde_conflict_d, main = \"Disc\")\n\n\n\n\n\n\n\n\nObservations\n\n\n\nAs expected, we don’t see major variations in the smoothness and spread of KDE across a range of distances, and bias continues to be present across all kernel methods as seen from the long-tails. However, there are slight differences in the sharpness of the bandwidth radius in terms of how localised or widespread our data points are being captured.\n\nGaussian: provides a localised density estimate over the entire spatial extent as compared to epanechnikov and quartic. It is good at highlighting variance and opposing ends of conflict intensities as shown by the wider range used in the legend.\nEpanechnikov: It is more efficient than the gaussian in terms of variance but produces a slightly rougher surface. It is also more localised than the quartic kernel, focusing on areas near each point, with a sharper boundary at the bandwidth limit.\nQuartic: Results in a good balance between smoothness and localised influence, smoother than epanechnikov but with similar properties. It appears suitable for moderate smoothing and sharper focus on local patterns.\nDisc: results in the sharpest density estimate as compared to the other three kernels as all points within a certain distance are made to have equal influence and zero influence beyond that distance.\n\nDecision: Hence, I will use the quartic kernel method to ensure a relatively smooth density estimate with emphasis on local points over distant ones.\n\n\n\n5.1.3.1 Using kernel = ‘quartic’\nAs such, I run the density estimate computation using kernel = 'quartic'.\n\n# Using 'quartic' kernel\npar(mfrow = c(2,3), mar = c(0,0,1,0)) \n\nfor (quarter in names(masked_ppp_list_km)) {\n  ppp_obj = masked_ppp_list_km[[quarter]]\n  kde_conflict_bw &lt;- density(ppp_obj,\n                             sigma=bw.CvL,\n                             edge=TRUE,\n                             kernel=\"quartic\")\n  optimal_bw = floor(bw.CvL(ppp_obj)[[1]]*1000)/1000\n  plot(kde_conflict_bw, main = paste(quarter, \"(Bw:\",optimal_bw,\"km)\"), col = colours)\n}\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nWe can see high densities of armed conflict in the central and southern regions of Myanmar but more can be uncovered from conflict data. Let’s proceed to the next section.\n\n\n\n\n5.1.3.2 Using sigma = 71.831\nFor all subsequent fixed KDE computations, I will assign sigma using the average of the CvL bandwidth returned from each quarter. Here’s the calculations based on the plots returned:\n\nAverage bandwidth size = 61.649 + 64.386 + 74.501 + 114.08 + 103.863 + 103.863 + 95.567 + 56.757 + 57.752 + 66.968 + 49.649 + 48.135 + 48.135 + 60.323) / 14 = 71.831\n\nLet’s recompute the Fixed KDE based on the newly calculated average bandwidth such that sigma = 71.831. I’ll store the quarterly KDE outputs into a list called kde_conflict_bw_list.\n\n# Add KDE into this list\nkde_conflict_bw_list &lt;- list()\nfor (quarter in names(masked_ppp_list_km)) {\n  ppp_obj = masked_ppp_list_km[[quarter]]\n  kde_conflict_bw &lt;- density(ppp_obj,\n                             sigma=71.831,\n                             edge=TRUE,\n                             kernel=\"quartic\")\n  kde_conflict_bw_list[[quarter]] &lt;- kde_conflict_bw\n}\n\n\n# Plot graph\npar(mfrow = c(2,3), mar = c(0,0,1,0)) \n\nfor (quarter in names(kde_conflict_bw_list)){\n  kde_conflict_bw &lt;- kde_conflict_bw_list[quarter]\n  plot(kde_conflict_bw, main = paste(quarter, \"(Bw: 71.831 km)\"), col = colours)\n}\n\n\n\n\n\n\n\n5.1.3 Working with Adaptive KDE\n\n\n\n\n\nAs seen above, fixed bandwidths tend to oversmooth the mode of the distribution. On the contrary, the adaptive kernel estimate has the ability to reduce variability of estimates in areas with low density and increases it in areas with higher density (The Stata Journal, 2003).\nOnce again, let us use the 2021 Q1 conflict data to illustrate the difference in outputs of all three adaptive methods.\n\nVoronoi Adaptive KDEAdaptive KDENearest Neighbour Adaptive KDE\n\n\n\n# Set Up\nppp_obj = masked_ppp_list_km$`2021 Q1`\n\n# Using Voronoi adaptive KDE\nvd_adaptive_kde &lt;- adaptive.density(ppp_obj, f=1, method=\"voronoi\")\n\n# Plot\npar(mar = c(0,1,1,1))\nplot(vd_adaptive_kde, main = \"Voronoi-Dirichlet Adaptive KDE\", col = colours)\n\n\n\n\n\n# Using adaptive KDE\nadaptive_kde &lt;- adaptive.density(ppp_obj, method=\"kernel\")\n\n# Plot\npar(mar = c(0,1,1,1))\nplot(adaptive_kde, main = \"Adaptive KDE\", col = colours)\n\n\n\n\nI’ve used a relatively larger number of neighbours (i.e. k = 10) to provide a smoother, more general density estimate to capture broader trends and may smooth out details.\n\n# Using nearest neighbour adaptive KDE\nnn_kde &lt;- nndensity(ppp_obj, k=10)\n\n# Plot\npar(mar = c(0,1,1,1))\nplot(nn_kde, main = \"Nearest Neighbour Adaptive KDE\", col = colours)\n\n\n\n\n\nWe can also compare the performance of each method based on the top 4 states with highest proportion of conflicts as highlighted earlier.\n\nVoronoi Adaptive KDEAdaptive KDENearest Neighbour Adaptive KDE\n\n\n\n\n\n\n\n\n\n\n\n\nComparing the three Adaptive KDE Types\nFrom the outputs above, it appears that there is no major differences between the distribution of KDE values returned across the three methods, where there is high concentration of points in a specific area. Hence, we will choose to go with Adapative Kernel method.\n\n\n\n\n\nLet’s compare the results of my two selected fixed and adaptive KDEs (E.g. Magway District)\n\n\nWe can observe how adaptive kernels provides a more detailed picture of conflict spatial distribution but since it’s largely localised, conflict spots require more effort in identifying and can be computationally heavy for this exercise.\nAdditionally, varying bandwidth makes comparisons across regions or time periods (like quarters) more difficult because the scale of smoothing is not constant across space and time.\n\n\n\n5.1.4 Converting Gridded KDE Output into Raster\nNext, we need to convert the KDE output to KDE raster layers before it can be viewed using tmap.\nStep 1) Converting KDE to Spatial Grid Data Frame\n\nlibrary(grid)\nplot_list &lt;- list()\nfor (quarter in names(kde_conflict_bw_list)) {\n  ppp_obj &lt;- kde_conflict_bw_list[[quarter]]\n  gridded_ppp_obj &lt;- as(ppp_obj, \"SpatialGridDataFrame\")\n  plot_list[[quarter]] &lt;- spplot(gridded_ppp_obj, main = paste(quarter), col.regions = colours)\n}\n\nlibrary(gridExtra)\nplot_list_subset1 &lt;- plot_list[1:6]\nplot_list_subset2 &lt;- plot_list[7:12]\nplot_list_subset3 &lt;- plot_list[13:14]\ngrid.newpage()\ngrid.arrange(grobs = plot_list_subset1, ncol = 3, nrow = 2)\ngrid.newpage() \ngrid.arrange(grobs = plot_list_subset2, ncol = 3, nrow = 2)\ngrid.newpage()\ngrid.arrange(grobs = plot_list_subset3, ncol = 3, nrow = 2)\n\n\n\n\nStep 2) Rasterisation of Grid Outputs & Assigning Projection Systems\n\ngridded_ppp_obj_raster_list &lt;- list()\nfor (quarter in names(kde_conflict_bw_list)) {\n  gridded_ppp_obj = kde_conflict_bw_list[[quarter]]\n  gridded_ppp_obj_raster &lt;- raster(gridded_ppp_obj)\n  projection(gridded_ppp_obj_raster) &lt;- CRS(\"+init=EPSG:32647\")\n  gridded_ppp_obj_raster_list[[quarter]] &lt;- gridded_ppp_obj_raster\n}\n\n# Inspect for 2024 Q2\ngridded_ppp_obj_raster_list$`2024 Q2`\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 7.302001, 16.30032  (x, y)\nextent     : -210.0086, 724.6476, 1072.026, 3158.467  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : 7.061861e-06, 0.01847887  (min, max)\n\n\nStep 3) Plot Maps\n\ntmap_mode(\"plot\")\nplots_by_quarter &lt;- list()\nfor (quarter in names(gridded_ppp_obj_raster_list)){\n  gridded_ppp_obj_raster = gridded_ppp_obj_raster_list[[quarter]]\n  raster_plot &lt;- tm_shape(gridded_ppp_obj_raster) +\n    tm_raster(\"layer\", title=\"Density\", palette=\"Blues\") +\n    tm_layout(legend.position = c(\"left\",\"bottom\"),frame=FALSE, main.title = quarter,\n            main.title.size=1, main.title.position = \"center\", legend.text.size = 0.5,legend.title.size = 0.7) \n  plots_by_quarter[[quarter]] &lt;- raster_plot\n}\n\ntmap_arrange(plots_by_quarter[1:14], ncol=5, nrow=3)\n\n\n\n\n\n\n\n\nObservations\n\n\n\nPlotting raster grid versions of KDE outputs uses discrete colour ranges which does a good job in highlighting gradual changes in conflict events across an area. Since 2021 Q2, more conflicts are seen in Southern parts of Myanmar. The density range differs for each quarter but we can see an increase in no. of armed conflicts per kilometre from 2021 Q1 to 2022 Q2, which stagnates in density and increases again in 2023 Q4.\n\n\n\n\n\n5.2 Nearest Neighbour Analysis\nOur current analyses does not reveal patterns of clustering or dispersion, to which Michael J. Crawley proposes to employ Clark-Evans test spatial randomness for its simplicity and applicability for first-order spatial analysis, which means checking for overall spatial randomness based on nearest-neighbor distances. (Crawley M. J. , 2007)\n\n\n\n\n\nClark-Evans Test\nThe test checks whether the observed point pattern of armed conflicts in Myanmar shows clustering (points are closer than expected under randomness), dispersion (points are more spread out), or randomness.\n\n5.2.1 Clark-Evans Test (Myanmar)\nThe test hypotheses are:\n\nHo = The distribution of armed conflicts in Myanmar are randomly distributed.\nH1= The distribution of armed conflicts in Myanmar are not randomly distributed.\nThe 95% confident interval will be used.\n\nWe will conduct the test using clarkevans.test() of statspat.\n\nfor (quarter in names(masked_ppp_list_km)) {\n  ppp_obj = masked_ppp_list_km[[quarter]]\n  print(quarter)\n  print(clarkevans.test(ppp_obj,\n                  correction=\"none\",\n                  clipregion=\"boundary_sf\",\n                  alternative=c(\"clustered\"),\n                  nsim=99))\n}\n\n[1] \"2024 Q2\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.26663, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2024 Q1\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.23563, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2023 Q4\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.21795, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2023 Q3\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.22002, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2023 Q2\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.24485, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2023 Q1\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.24365, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2022 Q4\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.22139, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2022 Q3\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.23974, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2022 Q2\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.22989, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2022 Q1\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.21976, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2021 Q4\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.21341, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2021 Q3\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.21808, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2021 Q2\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.17458, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"2021 Q1\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp_obj\nR = 0.24696, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFor a 95% confidence level, If the p-value &lt; 0.05, I will reject the null hypothesis of complete spatial randomness and check if data is uniform (R &gt; 1) or clustered (R &lt; 1).\nWith that said, all tests conducted across each quarter rejects the null hypothesis as p &lt; 0.05 and spatial points are found to be clustered since R &lt; 1.\n\n\n\n\n5.2.2 Clark-Evans Test (Top 4 Districts)\n\n# Yinmarbin District\nclarkevans.test(yinmarbin_ppp_owin,\n                  correction=\"none\",\n                  clipregion=\"boundary_yinmarbin\",\n                  alternative=c(\"clustered\"),\n                  nsim=39)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  yinmarbin_ppp_owin\nR = 0.13718, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n# Shwebo District\nclarkevans.test(shwebo_ppp_owin,\n                  correction=\"none\",\n                  clipregion=\"boundary_shwebo\",\n                  alternative=c(\"clustered\"),\n                  nsim=39)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  shwebo_ppp_owin\nR = 0.20141, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n# Pakokku District\nclarkevans.test(pakokku_ppp_owin,\n                  correction=\"none\",\n                  clipregion=\"boundary_pakokku\",\n                  alternative=c(\"clustered\"),\n                  nsim=39)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  pakokku_ppp_owin\nR = 0.20698, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n# Mandalay District\nclarkevans.test(mandalay_ppp_owin,\n                  correction=\"none\",\n                  clipregion=\"boundary_mandalay\",\n                  alternative=c(\"clustered\"),\n                  nsim=39)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  mandalay_ppp_owin\nR = 0.16014, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\n\n\n\n\n\nObservations\n\n\n\nI will reject the null hypothesis of complete spatial randomness since the p values of each district is smaller than 0.05. Additionally, we can observe clustering of spatial points since R &lt; 1 is returned for all districts. However, this test isn’t sufficient in highlighting the statistical significance of the spatial patterns - I’ll use the Monte Carlo Simulation later to handle this.\n\n\n\n\n\n5.3 Further Data Exploration\nBy using the fixed KDE with CvL bandwidth and quartic kernel, let’s see what insights can we glean from the density of conflicts in Myanmar.\n\n5.3.1 KDE by Event Type\nFirst, let’s identify the unique event types in this dataset.\n\n# Check unique events\nunique(conflict_data_sf$event_type)\n\n[1] \"Battles\"                    \"Strategic developments\"    \n[3] \"Violence against civilians\" \"Explosions/Remote violence\"\n\n\nNow, let us analyse the kernel density estimate of each unique event type found in conflict_data_sf to identify hot and cold spots across Myanmar.\n\n\nPlot the KDE based on Event Type\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \n\nconflict_data_sf %&gt;%\n  group_by(event_type) %&gt;%\n  group_split() -&gt; conflict_by_event_type\n\n# Convert the sf object to owin\ndistrict_boundary &lt;- as.owin(st_as_sfc(boundary_sf))\n\nkde_list &lt;- lapply(seq_along(conflict_by_event_type), function(i) {\n  data &lt;- conflict_by_event_type[[i]]\n  event_type &lt;- unique(data$event_type)\n  ppp_obj &lt;- as.ppp(st_geometry(data), W = district_boundary)\n  ppp_obj &lt;- rescale(ppp_obj, 1000, \"km\")\n  kde &lt;- density(ppp_obj,\n                 sigma=71.831,\n                 edge=TRUE,\n                 kernel=\"quartic\")\n  plot(kde, main = paste(event_type), col=colours)\n  return(kde)\n})\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nWe can almost see an equal spread of all four event types, with explosions and strategic violence being more dominantly found in Central-Western Myanmar, in the Sagaing and Mandalay states, followed by battles and violence against citizens. All events seem to plaque the Southern states (e.g. Yangon) with the exception of battles.\n\n\n\n\n5.3.2 KDE Across Top 4 States With Most Conflicts\nPreviously, we identified the top 4 states with the highest proportions of conflicts as Sagaing, Mandalay, Magway and Yangon. We can delve deeper into each state by analysing the intensity of conflicts across these states using density().\n\n\nPlot the KDE of Top 4 States\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0))\n\n# Sagaing\ndistrict_boundary &lt;- as.owin(st_as_sfc(boundary_sagaing))\nppp_obj &lt;- as.ppp(st_geometry(conflict_sagaing), W = district_boundary)\nppp_obj_sagaing &lt;- rescale(ppp_obj, 1000, \"km\")\nkde &lt;- density(ppp_obj_sagaing,\n               sigma=71.831,\n               edge=TRUE,\n               kernel=\"quartic\")\nplot(kde, main = paste(\"Sagaing\"), col=colours)\n\n# Mandalay\ndistrict_boundary &lt;- as.owin(st_as_sfc(boundary_mandalay))\nppp_obj &lt;- as.ppp(st_geometry(conflict_mandalay), W = district_boundary)\nppp_obj_mandalay &lt;- rescale(ppp_obj, 1000, \"km\")\nkde &lt;- density(ppp_obj_mandalay,\n               sigma=71.831,\n               edge=TRUE,\n               kernel=\"quartic\")\nplot(kde, main = paste(\"Mandalay\"), col=colours)\n\n# Magway\ndistrict_boundary &lt;- as.owin(st_as_sfc(boundary_magway))\nppp_obj &lt;- as.ppp(st_geometry(conflict_magway), W = district_boundary)\nppp_obj_magway &lt;- rescale(ppp_obj, 1000, \"km\")\nkde &lt;- density(ppp_obj_magway,\n               sigma=71.831,\n               edge=TRUE,\n               kernel=\"quartic\")\nplot(kde, main = paste(\"Magway\"), col=colours)\n\n# Yangon\ndistrict_boundary &lt;- as.owin(st_as_sfc(boundary_yangon))\nppp_obj &lt;- as.ppp(st_geometry(conflict_yangon), W = district_boundary)\nppp_obj_yangon &lt;- rescale(ppp_obj, 1000, \"km\")\nkde &lt;- density(ppp_obj_yangon,\n               sigma=71.831,\n               edge=TRUE,\n               kernel=\"quartic\")\nplot(kde, main = paste(\"Yangon\"), col=colours)\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nIt’s interesting that armed conflict isn’t evenly distributed across the states though it does seem that armed conflict has inflicted the entire state of Yangon. Nonetheless, it is worth noting that Yangon is relatively smaller in size than the other three states and that will increase the density of conflict quite significantly.\n\n\n\n\n5.3.3 KDE of Top 4 States by Event Type\nIt’ll also be interesting to breakdown each top 4 state by the event type category as shown.\n\nSagaingMandalayMagwayYangon\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe kernel density of violence against civillians is generally found to be the lowest amongst all conflict events. Additionally, all types of armed conflicts tend to occur repeatedly in the same parts of each state. E.g. conflicts regarding strategic development tend to happen in Southern part of the Sagaing state, just as it is for explosions/remote violence.\n\n\n\n\n5.5.4 KDE by Interaction Type\n\n# Convert Interaction Code to Text\nunique(conflict_data_sf$interaction)\n\n [1] 13 10 12 37 70 17 22 11 33 30 27 20 23 60 47 28 38 80 78 18 24 14\n\n\n\nlibrary(dplyr)\n\n# Create a named vector for mapping interaction values\ninteraction_map &lt;- c(\n  \"10\" = \"SOLE STATE FORCES ACTION\",\n  \"11\" = \"STATE FORCES VERSUS STATE FORCES\",\n  \"12\" = \"STATE FORCES VERSUS REBELS\",\n  \"13\" = \"STATE FORCES VERSUS POLITICAL MILITIA\",\n  \"14\" = \"STATE FORCES VERSUS IDENTITY MILITIA\",\n  \"17\" = \"STATE FORCES VERSUS CIVILIANS\",\n  \"18\" = \"STATE FORCES VERSUS EXTERNAL/OTHER FORCES\",\n  \"20\" = \"SOLE REBEL ACTION\",\n  \"22\" = \"REBELS VERSUS REBELS\",\n  \"23\" = \"REBELS VERSUS POLITICAL MILITIA\",\n  \"24\" = \"REBELS VERSUS IDENTITY MILITIA\",\n  \"27\" = \"REBELS VERSUS CIVILIANS\",\n  \"28\" = \"REBELS VERSUS OTHERS\",\n  \"30\" = \"SOLE POLITICAL MILITIA ACTION\",\n  \"33\" = \"POLITICAL MILITIA VERSUS POLITICAL MILITIA\",\n  \"34\" = \"POLITICAL MILITIA VERSUS IDENTITY MILITIA\",\n  \"37\" = \"POLITICAL MILITIA VERSUS CIVILIANS\",\n  \"38\" = \"POLITICAL MILITIA VERSUS OTHERS\",\n  \"40\" = \"SOLE IDENTITY MILITIA ACTION\",\n  \"44\" = \"IDENTITY MILITIA VERSUS IDENTITY MILITIA\",\n  \"47\" = \"IDENTITY MILITIA VERSUS CIVILIANS\",\n  \"48\" = \"IDENTITY MILITIA VERSUS OTHER\",\n  \"70\" = \"SOLE CIVILIAN ACTION\",\n  \"77\" = \"CIVILIANS VERSUS CIVILIANS\",\n  \"78\" = \"OTHER ACTOR VERSUS CIVILIANS\",\n  \"80\" = \"SOLE OTHER ACTION\",\n  \"88\" = \"OTHER VERSUS OTHER\"\n)\n\nconflict_data_sf &lt;- conflict_data_sf %&gt;%\n  rename(interaction_code = interaction) %&gt;%\n  mutate(interaction = interaction_map[as.character(interaction_code)])  \n\n# View the updated dataframe\nhead(conflict_data_sf[c(\"interaction_code\",\"interaction\")])\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 76997.72 ymin: 2428487 xmax: 214961 ymax: 2533434\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 3\n  interaction_code interaction                                   geometry\n             &lt;dbl&gt; &lt;chr&gt;                                      &lt;POINT [m]&gt;\n1               13 STATE FORCES VERSUS POLITICAL MILI…   (214961 2452068)\n2               13 STATE FORCES VERSUS POLITICAL MILI… (198303.2 2499463)\n3               13 STATE FORCES VERSUS POLITICAL MILI… (189105.4 2533434)\n4               10 SOLE STATE FORCES ACTION            (160913.9 2522331)\n5               13 STATE FORCES VERSUS POLITICAL MILI…   (146213 2428487)\n6               10 SOLE STATE FORCES ACTION            (76997.72 2447719)\n\n\n\n1. Involvement of Political Militia\nThe conflict landscape in Myanmar is complex and fragmented, with political militias focused on advancing political agendas or controlling governance structures. Let’s discover how the density of armed conflicts differ for each interaction of the political militia. They can be associated as either of these groups.\n\nPro-Government Militias: supporting the central government or Tatmadaw, such as Pyithu Sit and BGFs.\nPro-Democracy Militias: emerged as part of the resistance movement against the military junta. E.g. the People’s Defence Forces (PDF)\n\n\n\nPlot conflicts involving political militia\ncodes &lt;- c('13','23','33')\npar(mfrow = c(3,1), mar = c(0,0,1,0)) \n\nfor(code in codes) {\n  # Filter for the specific interaction type\n  filtered_data &lt;- conflict_data_sf %&gt;%\n    filter(interaction_code == code)\n  \n  # Convert to ppp object\n  boundary_owin &lt;- as.owin(boundary_sf)\n  ppp_owin_obj &lt;- as.ppp(filtered_data$geometry, W = boundary_owin)\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  \n  # Compute KDE\n  kde &lt;- density(ppp_owin_obj_km,\n                 sigma=71.831,\n                 edge=TRUE,\n                 kernel=\"quartic\")\n  \n  # Plot the KDE\n  plot(kde, main = paste(interaction_map[code]), col = colours)\n}\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe political army or organisations tend to be less involved with unarmed civilians but state forces, rebels and other policial militia.\n\nAgainst State Forces\n\n\nHigh density of conflicts with state forces (e.g. police) in central and western Myanmar\nThese regions have significant ethnic diversity and political grievances. E.g. Rakhine State in the west is home to ethnic Rakhine groups who have historically sought greater autonomy and have been involved in conflicts with state forces.\nCentral regions, such as Sagaing and Magway, have also seen intense resistance against state forces, particularly after the 2021 military coup.\n\n\nAgainst Rebels\n\n\nRebels and political militias operate throughout Myanmar with varying objectives but of a much smaller intensity than with other actors (seen from its low density scale).\nClashes between rebels and political militias can stem from differing political goals, territorial disputes, or strategic interests.\nFor instance, a rebel group might view a political militia as a rival in a contested region or as a competitor for local support.\n\n\nAgainst other Political Miliitia\n\n\nIn central and western Myanmar, where political militias are more active, there is often competition among different resistance groups. These militias may have different leadership, ideologies, or goals, leading to clashes.\n\n\n\n\n\n2. Involvement of Identity Militia\nIdentity militias are typically organised around ethnic, religious, or cultural identities. heir main goal is to protect the interests, rights, and autonomy of specific identity-based groups within Myanmar.\n\n\nPlot conflicts involving identity militia\ncodes &lt;- c('14','24')\npar(mfrow = c(2,1), mar = c(0,0,1,0)) \n\nfor(code in codes) {\n  # Filter for the specific interaction type\n  filtered_data &lt;- conflict_data_sf %&gt;%\n    filter(interaction_code == code)\n  \n  # Convert to ppp object\n  boundary_owin &lt;- as.owin(boundary_sf)\n  ppp_owin_obj &lt;- as.ppp(filtered_data$geometry, W = boundary_owin)\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  \n  # Compute KDE\n  kde &lt;- density(ppp_owin_obj_km,\n                 sigma=71.831,\n                 edge=TRUE,\n                 kernel=\"quartic\")\n  \n  # Plot the KDE\n  plot(kde, main = paste(interaction_map[code]), col = colours)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nArmed conflicts involving the identity militia is of a much smaller intensity than political militia with about 5e^-0.5 or 3 conflict events per kilometre.\n\nState Forces vs Identity Militia\n\n\nConflicts between these two parties are concerntrated in the Western region which has a history of conflict, including uprisings against colonial and post-colonial governments.\nAdditionally, the region’s proximity to Bangladesh has some influence on local conflicts as ethnic groups in Myanmar may have connections or support from across the border.\nIn the Rakhine State of western Myanmar, historical grievances and demands for autonomy has also fueled tensions between these groups and the central government (Crisis Group, 2024).\n\n\nRebels vs identity militia\n\n\nHigher intensity of armed conflicts are seen in North Myanmar\nNorthern Myanmar hosts various ethnic armed groups and rebel factions that seek autonomy or independence. (E.g. Kachin, Shan and Chin)\nNorthern Myanmar is rich in natural resources, e.g. jade and timber. Control over these resources can be a significant driver of conflict, as various armed groups vie for control and when there’s a lack of economic opportunities. (Fishbein & Lusan, 2022)\nUnresolved conflicts from colonial and post-colonial periods continue to influence current tensions between different ethnic groups and armed factions in the Northen region.\n\n\n\n\n\n3. Involvement of Civilian Actors\n\n\nPlot conflicts involving civilians\ncodes &lt;- c('17', '27', '37', '47', '78')\npar(mfrow = c(3,2), mar = c(0,0,1,0)) \n\nfor(code in codes) {\n  # Filter for the specific interaction type\n  filtered_data &lt;- conflict_data_sf %&gt;%\n    filter(interaction_code == code)\n  \n  # Convert to ppp object with boundary window\n  boundary_owin &lt;- as.owin(boundary_sf)\n  ppp_obj &lt;- as.ppp(filtered_data$geometry, W = boundary_owin)\n  \n  # Rescale the ppp object\n  ppp_obj_km &lt;- rescale(ppp_obj, 1000, \"km\")\n  \n  # Compute KDE\n  kde &lt;- density(ppp_obj_km,\n                 sigma = 71.831,\n                 edge = TRUE,\n                 kernel = \"quartic\")\n  \n  # Plot the KDE\n  plot(kde, main = paste(interaction_map[code]), col = colours)\n}\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nAcross all actors, we see that perhaps civilians are involved with the biggest range of actors.\nNotably, we see the lowest intensity of clashes with identity militia which could stem from how civilians might be part of the same social/ethnic networks as the identity militia and these militia may seek the support of civilian populations too.\nIn contrast, state forces and civilians have the highest intensity of armed conflicts\n\nIn Western Rakhine State, Buddhist-majority and Muslim-minority communities have experienced significant tension causing state forces to act in response to these tensions which has led to severe clashes with civilian populations.\nReports of human rights abuses, including arbitrary arrests, torture, and extrajudicial killings by state forces, has led to large-scale displacement and humanitarian crises, further exacerbating tensions between state forces and civilians. The struggle for resources and safety often intensifies the conflicts. (Farge E. & Mantovani C., 2024)\n\n\n\n\n\n4. Civilians Involvement by Event Type\n\n\nCompute KDE of Civilians by Event Type\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \ncodes &lt;- c('17', '27', '37', '47', '78')\n\nconflict_data_sf %&gt;%\n  filter(interaction_code %in% codes) %&gt;%\n  group_by(event_type) %&gt;%\n  group_split() -&gt; conflict_by_event_type\n\n# Convert the sf object to owin\ndistrict_boundary &lt;- as.owin(st_as_sfc(boundary_sf))\n\nkde_list &lt;- lapply(seq_along(conflict_by_event_type), function(i) {\n  data &lt;- conflict_by_event_type[[i]]\n  event_type &lt;- unique(data$event_type)\n  ppp_obj &lt;- as.ppp(st_geometry(data), W = district_boundary)\n  ppp_obj &lt;- rescale(ppp_obj, 1000, \"km\")\n  kde &lt;- density(ppp_obj,\n                 sigma=71.831,\n                 edge=TRUE,\n                 kernel=\"quartic\")\n  plot(kde, main = paste(event_type), col=colours)\n  return(kde)\n})\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nCivilians are seen to be embroiled mostly in conflicts resulting from strategic development and violence against civilians events, primarily in Central and Western Myanmar. Fortunately, conflicts involving explosions or remote violence is not as intense against civilians but this raises a great concern on the humanitarian crisis faced by civilians in Myanmar.\n\n\n\n\n\n5.5.5 OpenStreetMap Myanmar - Spatial Points\nUsing tmap functions, I will display an interactive view of te KDE layers on openstreetmap of Myanmar to observe intensity of conflicts at the district level. We can see higher intensities of conflict in central districts (e.g. Yinmarbin, Pakokku and Shwebo) and western districts (e.g. Yangon).\n\nppp_obj&lt;- as.ppp(conflict_data_sf$geometry)\nppp_owin_obj &lt;- ppp_obj[myanmar_owin]\nppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n\nkde_fixed &lt;- density(ppp_owin_obj_km, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nraster_kde_fixed &lt;- raster(kde_fixed)\n\nprojection(raster_kde_fixed) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\n\n\n# Plot KDE Map on OpenStreetMap\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\nkde_fixed_output &lt;- tm_basemap(server = \"OpenStreetMap.HOT\") +\n  tm_basemap(server = \"Esri.WorldImagery\") +\n  tm_shape(raster_kde_fixed) +\n  tm_raster(\"layer\",\n            n = 10,\n            title = \"KDE Fixed CvL\",\n            alpha = 0.6,\n            palette = c(\"#fafac3\",\"#fd953b\",\"#f02a75\",\"#b62385\",\"#021c9e\")) +\n  tm_shape(boundary_sf)+\n  tm_polygons(alpha=0.1,id=\"DT\")+\n  tmap_options(check.and.fix = TRUE)\n\nkde_fixed_output\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#overview",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#overview",
    "title": "Take-home Exercise 1 - Part 1",
    "section": "",
    "text": "The conflict in Myanmar is not just a result of the coup but is deeply rooted in the country’s decades-old complex ethnic and political landscape, characterised by tensions between the central government and various ethnic minority groups, each with its own armed forces. The post-coup violence has exacerbated these long-standing conflicts, leading to a severe humanitarian crisis, with thousands killed, hundreds of thousands displaced, and widespread human rights abuses reported.\n\n\n\nAs such, Geospatial analytics has become a valuable tool for evaluating and comprehending the intricacies of increasing conflicts. This exercise aims to reveal the spatial and spatio-temporal distribution of armed conflict in Myanmar by leveraging spatial point pattern analysis. Additionally, it aims to gain clearer insights into the geographical and logistical patterns of violence throughout the nation.\nBy the end of this take-home exercise, I aim to complete these steps in my spatial point pattern analysis in uncovering the distribution of armed conflict in Myanmar.\n\nUsing appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\nUsing the geospatial data sets prepared, derive quarterly KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\nUsing the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\nUsing the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\nUsing appropriate tmap functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\nDescribe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps.\n\n\n\n\n\n\nThis Armed Conflict Location & Event Data (ACLED) is an independent, impartial, international non-profit organisation which owns an extensive database of violent conflict and protest in countries and territories around the world.\n\nFor the purpose of this exercise, I have downloaded ACLED’s data on Myanmar which includes a series of conflict events, particularly between 1 January 2021 to 30 June 2024.\n🔗 Source: ACLED\n📁 Format: comma separated values (CSV)\nAs the dataset is rather extensive, I will be performing my analysis on armed conflict events in a quarterly basis to streamline my tasks. The data included in this dataset are as follows:\n\n\n\nEvent Type\nACLED categorises events into various types. I will mainly be focusing on these four event types: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\nevent_id_cnty: unique ID for each conflict\nevent_type: category of event e.g. Battle, Violence Against Civilians, Protests, Explosions/Remote Violence, Strategic Developments\nsub_event_type: a more detailed classification within event type\ndisorder_type: classifies the event based on the nature of the disorder e.g. political violence, demonstrations, strategic developments[A1]\ncivilian_targeting: yes/no value, whether event involves specifically targeting civilians\nNote: when “strategic developments” are used in Event Type, it is also used in the disorder type (vice-versa)\n\n\n\nLocation and Geospatial Data\nThe database provides detailed geographic information, pinpointing the exact or approximate locations of conflict events across Myanmar. This includes cities, towns, and rural areas.\n\niso: the country code for Myanmar which uses 104 in this case\nregion: region of conflict within Myanmar\ncountry: indicates Myanmar\nadmin1, admin2, admin3: 1st, 2nd and 3rd level administration division within Myanmar e.g. states, division, sub-division\nlocation: specific geographic location or name of the place where the conflict event occurred\nlatitude: latitude of the conflict event\nlongitude: longitude of the conflict event\ngeo_precision: indicates the level of precision for the geographic coordinates provided\n\n\n\nDate and Time\nACLED records the specific dates and, where possible, times of conflict events.\n\nevent_date: date of conflict\nyear: year of conflict\ntime_precision: accuracy of the date and time information provided\n\n\n\nActors\n\nIndicate the actors involved in the conflict, such as the Tatmadaw (Myanmar’s military), ethnic armed organizations, local militias, civilian protestors, and other groups.\nactor1: primary actor involved in the conflict event. E.g. a government force, rebel group, militia, or any organised entity\nassoc_actor_1: a secondary group that is aligned with or supports the primary actor (Actor1) in the event\ninter1: an interaction code that categorises actor1, could be a government force, rebel group, military force, rioter, civilian, or other entities\ninteraction: combined description of actor1 and actor2 (no particular order of aggression)\n\n\n\nFatalities\n\nfatalities: tracks the number of reported fatalities associated with each conflict event\n\n\n\nOthers\n\nsource: source of information for the conflict event\nsource_scale: scale of the source e.g. local, national, international\nnotes : additional comments\ntags: keywords associated with the conflict event\ntimestamp: date and time when conflict event was entered/updated in the database\n\n\n\n\n\n\n\nI will also be using a geospatial dataset from the Myanmar Information Management Unit (MIMU) in shapefile (.shp) format, specifically of the Myanmar state at the 2nd administrative level with district boundaries.\n🔗 Source: MIMU\n📁 Format: shapefile (.shp)\nMy reason for choosing the district boundary dataset is that we do not want to select a boundary dataset that is too generalised when analysing conflict events since it might not provide sufficient insights to trends where conflict events happen. Neither do we want to analyse a geography that is too detailed (e.g. Admin 3 - townships) since it can be computationally inefficient as seen in the types of boundary data below.\n\n\n\n\n\nI have donwloaded the two data sets and organised them into my folder as follows."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#spatio-tempmoral-kde",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#spatio-tempmoral-kde",
    "title": "Take-home Exercise 1",
    "section": "7. Spatio-Tempmoral KDE",
    "text": "7. Spatio-Tempmoral KDE\nWe focus on the continuous time"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In-class Exercise"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#overall",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#overall",
    "title": "In-class Exercise 3",
    "section": "1. Overall",
    "text": "1. Overall\n\n1.1 The research questions\nThe specific question we would like to answer is:\n\nare the locations of forest fire in Kepulauan Bangka Belitung spatial and spatio-temporally independent?\nif the answer is NO, where and when the observed forest fire locations tend to cluster?\n\n\n\n1.2 The data\nFor the purpose of this exercise, two data sets are used, they are:\n\nforestfires, a csv file provides locations of forest fire detected from the Moderate Resolution Imaging Spectroradiometer (MODIS) sensor data. The data are downloaded from Fire Information for Resource Management System. For the purpose of this exercise, only forest fires within Kepulauan Bangka Belitung will be used.\nKepulauan_Bangka_Belitung, an ESRI shapefile showing the sub-district (i.e. kelurahan) boundary of Kepulauan Bangka Belitung. The data set was downloaded from Indonesia Geospatial portal. The original data covers the whole Indonesia. For the purpose of this exercise, only sub-districts within Kepulauan Bangka Belitung are extracted."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#installing-and-loading-the-r-packages",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#installing-and-loading-the-r-packages",
    "title": "In-class Exercise 3",
    "section": "2. Installing and Loading the R packages",
    "text": "2. Installing and Loading the R packages\nFor the purpose of this study, I will be using these five R packages. They are:\n\nrgdal for importing geospatial data in GIS file format such as shapefile into R and save them as Spatial*DataFrame,\nmaptools for converting Spatial* object into ppp object,\nraster for handling raster data in R,\nspatstat for performing Spatial Point Patterns Analysis such as kcross, Lcross, etc., and\ntmap for producing cartographic quality thematic maps.\n\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#importing-and-preparing-study-area",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#importing-and-preparing-study-area",
    "title": "In-class Exercise 3",
    "section": "3. Importing and Preparing Study Area",
    "text": "3. Importing and Preparing Study Area\n\n3.1 Importing Study Area\nLet us first import the data using the st_read() function.\n\nkbb &lt;- st_read(dsn=\"data/rawdata\",\n               layer = \"Kepulauan_Bangka_Belitung\") \n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex4\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nkbb\n\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID         NAMOBJ      FCODE REMARK\n1     26195        Airbara BA03070040   &lt;NA&gt;\n2     26196       Airgegas BA03070040   &lt;NA&gt;\n3     26197    Arung Dalam BA03070040   &lt;NA&gt;\n4     26202 Batu Betumpang BA03070040   &lt;NA&gt;\n5     26205      Bedengung BA03070040   &lt;NA&gt;\n6     26206      Belimbing BA03070040   &lt;NA&gt;\n7     26207         Bencah BA03070040   &lt;NA&gt;\n8     26209          Berok BA03070040   &lt;NA&gt;\n9     26210         Bikang BA03070040   &lt;NA&gt;\n10    26212    Bukit Terap BA03070040   &lt;NA&gt;\n                                       METADATA SRS_ID KDBBPS KDCBPS   KDCPUM\n1  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   &lt;NA&gt;   &lt;NA&gt; 19.03.03\n2  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   &lt;NA&gt;   &lt;NA&gt; 19.03.03\n3  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   &lt;NA&gt;   &lt;NA&gt; 19.04.01\n4  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   &lt;NA&gt;   &lt;NA&gt; 19.03.07\n5  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   &lt;NA&gt;   &lt;NA&gt; 19.03.05\n6  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   &lt;NA&gt;   &lt;NA&gt; 19.04.06\n7  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   &lt;NA&gt;   &lt;NA&gt; 19.03.03\n8  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   &lt;NA&gt;   &lt;NA&gt; 19.04.01\n9  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   &lt;NA&gt;   &lt;NA&gt; 19.03.01\n10 TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   &lt;NA&gt;   &lt;NA&gt; 19.03.06\n   KDEBPS        KDEPUM KDPBPS KDPKAB KDPPUM LUASWH TIPADM      WADMKC\n1    &lt;NA&gt; 19.03.03.2008   &lt;NA&gt;  19.03     19      0      1   Air Gegas\n2    &lt;NA&gt; 19.03.03.2001   &lt;NA&gt;  19.03     19      0      1   Air Gegas\n3    &lt;NA&gt; 19.04.01.1002   &lt;NA&gt;  19.04     19      0      2        Koba\n4    &lt;NA&gt; 19.03.07.2001   &lt;NA&gt;  19.03     19      0      1  Pulaubesar\n5    &lt;NA&gt; 19.03.05.2006   &lt;NA&gt;  19.03     19      0      1      Payung\n6    &lt;NA&gt; 19.04.06.2009   &lt;NA&gt;  19.04     19      0      1 Lubuk Besar\n7    &lt;NA&gt; 19.03.03.2004   &lt;NA&gt;  19.03     19      0      1   Air Gegas\n8    &lt;NA&gt; 19.04.01.1017   &lt;NA&gt;  19.04     19      0      2        Koba\n9    &lt;NA&gt; 19.03.01.2006   &lt;NA&gt;  19.03     19      0      1     Toboali\n10   &lt;NA&gt; 19.03.06.2005   &lt;NA&gt;  19.03     19      0      1 Tukak Sadai\n           WADMKD         WADMKK                    WADMPR WIADKC WIADKK WIADPR\n1         Airbara Bangka Selatan Kepulauan Bangka Belitung   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n2        Airgegas Bangka Selatan Kepulauan Bangka Belitung   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n3     Arung Dalam  Bangka Tengah Kepulauan Bangka Belitung   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n4  Batu Betumpang Bangka Selatan Kepulauan Bangka Belitung   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n5       Bedengung Bangka Selatan Kepulauan Bangka Belitung   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n6       Belimbing  Bangka Tengah Kepulauan Bangka Belitung   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n7          Bencah Bangka Selatan Kepulauan Bangka Belitung   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n8           Berok  Bangka Tengah Kepulauan Bangka Belitung   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n9          Bikang Bangka Selatan Kepulauan Bangka Belitung   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n10    Bukit Terap Bangka Selatan Kepulauan Bangka Belitung   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n   WIADKD                            UUPP       LUAS      AREA\n1    &lt;NA&gt; Hasil Delineasi Batas Desa 2019  77.160034  77160034\n2    &lt;NA&gt; Hasil Delineasi Batas Desa 2019  68.445344  68445426\n3       0 Hasil Delineasi Batas Desa 2019  20.759893  20759893\n4    &lt;NA&gt; Hasil Delineasi Batas Desa 2019 138.255656 138247711\n5    &lt;NA&gt; Hasil Delineasi Batas Desa 2019  96.103135  96102987\n6    &lt;NA&gt; Hasil Delineasi Batas Desa 2019  21.356034  21356035\n7    &lt;NA&gt; Hasil Delineasi Batas Desa 2019 133.589935 133590216\n8       0 Hasil Delineasi Batas Desa 2019   3.196318   3196318\n9    &lt;NA&gt; Hasil Delineasi Batas Desa 2019  53.235589  53235592\n10   &lt;NA&gt; Hasil Delineasi Batas Desa 2019  18.038894  18038895\n                         geometry\n1  POLYGON Z ((106.4285 -2.562...\n2  POLYGON Z ((106.4589 -2.692...\n3  POLYGON Z ((106.3998 -2.478...\n4  POLYGON Z ((106.0563 -2.778...\n5  POLYGON Z ((106.2187 -2.679...\n6  POLYGON Z ((106.4636 -2.568...\n7  POLYGON Z ((106.5133 -2.724...\n8  POLYGON Z ((106.4047 -2.477...\n9  POLYGON Z ((106.522 -2.8827...\n10 POLYGON Z ((106.6278 -2.968...\n\n\nWe will need to drop the ‘z’ dimension value from the dataset as we are only working with x,y dimensions, not with height data. Hence, let’s re-read the data and perform some wrangling.\n\nkbb_sf &lt;- st_read(dsn=\"data/rawdata\", layer=\"Kepulauan_Bangka_Belitung\") %&gt;%\n  st_union() %&gt;%\n  st_zm(drop = TRUE, what = \"ZM\") %&gt;%\n  st_transform(crs = 32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex4\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nst_read() reads the spatial data from the specified file.\nst_union() performs a spatial union, combining all separate geometries (e.g., polygons) into one single geometry object. This is useful if you want to treat the entire area as a single entity, rather than as individual geometries (e.g., islands or districts).\nst_zm(drop = TRUE, what = \"ZM\") removes the Z (elevation) and M (measure) dimensions, simplifying the geometry to 2D.\nst_transform(crs = 32748) reprojects the geometry to the specified coordinate reference system (CRS), EPSG:32748 (UTM zone 48S, often used for areas around Southeast Asia).\n\n\n\nLet’s inspect the newly created dataframe.\n\nkbb_sf\n\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 512066.8 ymin: 9655398 xmax: 705559.4 ymax: 9834006\nProjected CRS: WGS 84 / UTM zone 48S\n\n\nMULTIPOLYGON (((590979.6 9741359, 590966.1 9741...\n\n\n\n\n3.2 Converting to OWIN Layer\nNext, as.owin() is used to convert the kbb data into an own object.\n\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\nNext, class() is used to confirm if the output is indeed an owin object.\n\nclass(kbb_owin)\n\n[1] \"owin\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#importing-and-preparing-forest-fire-data.",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#importing-and-preparing-forest-fire-data.",
    "title": "In-class Exercise 3",
    "section": "4. Importing and Preparing Forest Fire Data.",
    "text": "4. Importing and Preparing Forest Fire Data.\nNext, we will import the forest fire data (i.e. forestfires.csv) into the R environment.\n\nfire_sf &lt;- read_csv(\"data/rawdata/forestfires.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\",\"latitude\"),\n           crs = 4326) %&gt;%\n  st_transform(crs = 32748)\n\nRows: 741 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nSince ppp object only acce[ts a numerical or character as mark, we will use the codes below to convert the data type of acq_dae to numeric.\n\nfire_sf &lt;- fire_sf %&gt;%\n  mutate(DayofYear = yday(acq_date)) %&gt;%\n  mutate(Month_num = month(acq_date)) %&gt;%\n  mutate(Month_fac = month(acq_date, \n                         label = TRUE,\n                         abbr = FALSE))\n\nfire_sf\n\nSimple feature collection with 741 features and 16 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 521564.1 ymin: 9658137 xmax: 695791 ymax: 9828767\nProjected CRS: WGS 84 / UTM zone 48S\n# A tibble: 741 × 17\n   brightness  scan track acq_date   acq_time satellite instrument confidence\n *      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt;        &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;\n 1       312.   1.3   1.1 2023-01-10      629 Aqua      MODIS              67\n 2       314.   1.2   1.1 2023-01-10      629 Aqua      MODIS              70\n 3       315.   1.2   1.1 2023-01-10      629 Aqua      MODIS              71\n 4       309.   1.2   1.1 2023-01-10      629 Aqua      MODIS              54\n 5       308.   1.2   1.1 2023-01-10      629 Aqua      MODIS              33\n 6       322.   1.3   1.1 2023-01-10      629 Aqua      MODIS              72\n 7       318.   1.2   1.1 2023-01-10      629 Aqua      MODIS              71\n 8       318.   1.2   1.1 2023-01-10      629 Aqua      MODIS              75\n 9       327.   2     1.4 2023-01-12      616 Aqua      MODIS              73\n10       321.   2     1.4 2023-01-12      616 Aqua      MODIS              75\n# ℹ 731 more rows\n# ℹ 9 more variables: version &lt;dbl&gt;, bright_t31 &lt;dbl&gt;, frp &lt;dbl&gt;,\n#   daynight &lt;chr&gt;, type &lt;dbl&gt;, geometry &lt;POINT [m]&gt;, DayofYear &lt;dbl&gt;,\n#   Month_num &lt;dbl&gt;, Month_fac &lt;ord&gt;"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#visualise-the-plot",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#visualise-the-plot",
    "title": "In-class Exercise 3",
    "section": "5. Visualise the Plot",
    "text": "5. Visualise the Plot\n\n5.1 Overall Plot\nNow, I will prepare a point symbol map showing the distribution of fire points.\n\ntm_shape(kbb_sf)+\n  tm_polygons() +\ntm_shape(fire_sf)+\n  tm_dots()\n\n\n\n\n\n\n\n\n\n\n5.2 Visuaising geographic distribution of forest fires by month\nNext, I will prepare a point symbol map showing the monthly geographic distribution of forest fires in 2023.\n\ntm_shape(kbb_sf)+\n  tm_polygons() +\ntm_shape(fire_sf)+\n  tm_dots(size = 0.1) +\n  tm_facets(by = \"Month_fac\",\n            free.coords = FALSE,\n            drop.units = TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#computing-stkde-by-month",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#computing-stkde-by-month",
    "title": "In-class Exercise 3",
    "section": "6. Computing STKDE by Month",
    "text": "6. Computing STKDE by Month\nIn this section, I will learn how to compute STKDE by using spattemp.density() of sparr package.\n\n6.1 Extracting Forest Fires by Month\nThe code below is used to remove the unwanted fields from the fire_sf simple feature data frame. This is because as.ppp() only needs the mark field and geometry field from the input of the data frame.\n\nfire_month &lt;- fire_sf %&gt;%\n  select(Month_num)\n\nhead(fire_month)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 606178.8 ymin: 9682757 xmax: 669933.6 ymax: 9703062\nProjected CRS: WGS 84 / UTM zone 48S\n# A tibble: 6 × 2\n  Month_num           geometry\n      &lt;dbl&gt;        &lt;POINT [m]&gt;\n1         1 (606178.8 9703062)\n2         1 (661410.6 9683536)\n3         1 (637808.8 9682757)\n4         1 (654882.2 9690665)\n5         1 (669933.6 9697468)\n6         1 (609133.5 9700119)\n\n\n\n\n6.2 Creating ppp objects\nThe code below is used to derive a ppp object called the fire_month from fire_month of data.frame.\n\nfire_month_ppp &lt;- as.ppp(fire_month)\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\n\nThe code below is used to check the output is in the correct object class\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\nWe can check the duplication in a ppp object by using the code chunk below.\n\nany(duplicated(fire_month_ppp))\n\n[1] FALSE\n\n\n\n\n6.3 Including Owin object\nHere we combine fire_month_ppp object with the kkb_owin object into one.\n\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\nAs a good practice, plot() is used to plot ff_owin so that we can examine the correctness of the output object.\n\nplot(fire_month_owin)\n\n\n\n\n\n\n\n\n\n\n6.4 Computing Spatio-temporal KDE\nNext, spattemp.density() of sparr package is used to compute the STKDE.\n\nst_kde &lt;- spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n\n\n\n\n6.5 Plotting the spatio-temporal KDE object\nWe’ll use the plot() function of R base to plot the KDE between July 2023 to December 2023.\n\ntims &lt;- c(7,8,9,10,11,12)\npar(mfcol=c(1,2))\nfor(i in tims){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#computing-stkde-by-day-of-year",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#computing-stkde-by-day-of-year",
    "title": "In-class Exercise 3",
    "section": "7. Computing STKDE by Day of Year",
    "text": "7. Computing STKDE by Day of Year\nNow, I will compute the STKDE of forest fires by day of year.\n\n7.1 Creating ppp object\nIn the code chunk below, DayofYear from the fire_sf data frame is selected and is included in the output ppp object.\n\nfire_yday_ppp &lt;- fire_sf %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\n\n\n\n\n\n7.2 Including Owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\nfire_yday_owin &lt;- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\n\n\n7.3 Performing Spatio-Temporal KDE\nNow, I will perform a spatio-temporal kernel density estimate on the fire_yday_owin object which gives us insights into where and when fire occurrences are concentrated within the specified observation window.\n\nkde_yday &lt;- spattemp.density(\n  fire_yday_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n\n\nPlotting the graph by days of the year will produce 365/366 charts.\n\n#plot(kde_yday)\n\nInstead, let us plot an animated plot to show the change in KDE across each day of the year.\n\nkde_yday$z$'10'\n\nreal-valued pixel image\n128 x 128 pixel array (ny, nx)\nenclosing rectangle: [512070, 705560] x [9655400, 9834000] units\n\n\n\nplot(kde_yday$z$'10')\n\n\n\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(spatstat)\nlibrary(magick)\n\nLinking to ImageMagick 6.9.12.98\nEnabled features: cairo, freetype, fftw, ghostscript, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fontconfig, x11\n\nlibrary(viridis)  # For color mapping\n\nLoading required package: viridisLite\n\n# Create a directory to store PNG frames\nif (!dir.exists(\"frames\")) {\n  dir.create(\"frames\")\n}\n\n# Get the unique day values from kde_yday\ndays &lt;- names(kde_yday$z)  # Assuming 'kde_yday$z' contains KDE results for each day\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- kde_yday$z[[day]]  # Access KDE result for the day\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Load magick library\nlibrary(magick)\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"frames\", full.names = TRUE, pattern = \"*.png\"))\n\n# Create animated GIF\nanimation &lt;- image_animate(image_join(frames), fps = 10)  # Adjust fps as needed\n\n# Save the animation\noutput_path &lt;- \"animated_kde_yday.gif\"\nimage_write(animation, path = output_path)\n\n# Display the GIF (optional)\nprint(animation)\n\n# A tibble: 344 × 7\n   format width height colorspace matte filesize density\n   &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n 1 gif      800    800 sRGB       FALSE        0 72x72  \n 2 gif      800    800 sRGB       TRUE         0 72x72  \n 3 gif      800    800 sRGB       TRUE         0 72x72  \n 4 gif      800    800 sRGB       TRUE         0 72x72  \n 5 gif      800    800 sRGB       TRUE         0 72x72  \n 6 gif      800    800 sRGB       TRUE         0 72x72  \n 7 gif      800    800 sRGB       TRUE         0 72x72  \n 8 gif      800    800 sRGB       TRUE         0 72x72  \n 9 gif      800    800 sRGB       TRUE         0 72x72  \n10 gif      800    800 sRGB       TRUE         0 72x72  \n# ℹ 334 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#exploratory-data-analysis",
    "title": "Take-home Exercise 1 - Part 1",
    "section": "4. Exploratory Data Analysis",
    "text": "4. Exploratory Data Analysis\n\n4.1 Identifying Districts with Highest Proportion of Conflicts\nIt’ll also be interesting to find out specific districts with the highest concentration of armed conflicts. I will first calculate the total occurrences of conflict events per district and add the column to boundary_sf.\n\n\nCount number of conflicts by districts\nconflict_count &lt;- conflict_data_sf %&gt;%\n  group_by(DT) %&gt;%\n  summarise(total_count_DT = n()) %&gt;%\n  st_drop_geometry() %&gt;%\n  select(DT, total_count_DT)\n\n# Perform the join\nboundary_sf &lt;- boundary_sf %&gt;%\n  left_join(conflict_count, by = \"DT\")\n\n\nNext, let’s calculate the proportion of total conflicts and add it as a column into the boundary_sf dataset as proportion_DT.\n\n# Create new 'proportion_DT' column\nboundary_sf &lt;- boundary_sf %&gt;%\n  mutate(proportion_DT = total_count_DT / sum(total_count_DT))\nhead(boundary_sf[c('DT','total_count_DT','proportion_DT')])\n\nSimple feature collection with 6 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -14915.04 ymin: 1736124 xmax: 187961.7 ymax: 2051144\nProjected CRS: WGS 84 / UTM zone 47N\n         DT total_count_DT proportion_DT                       geometry\n1  Hinthada            160            NA MULTIPOLYGON (((90859.89 20...\n2   Labutta             51            NA MULTIPOLYGON (((75991.51 17...\n3    Maubin            118            NA MULTIPOLYGON (((115559 1928...\n4 Myaungmya             59            NA MULTIPOLYGON (((39919.39 18...\n5   Pathein            334            NA MULTIPOLYGON (((-6302.348 1...\n6    Pyapon            131            NA MULTIPOLYGON (((93411.72 17...\n\n\nAt a quick glance, we can see that central and southern parts of Myanmar have the highest proportions of armed conflict events occurring.\n\n\nSet up the points map\ndistricts_choropleth &lt;-\ntm_shape(boundary_sf) +\n  tm_fill(\"proportion_DT\",\n          n=10,\n          title=\"Proportion\",\n          style=\"equal\",\n          palette=\"Blues\") +\n  tm_borders(lwd=0.2,\n             alpha=1) +\n  tm_text(text = \"DT\", \n          size = 0.2, \n          col = \"black\",\n          fontface = \"bold\") +\n  tm_layout(main.title = \"Distribution of Conflict Points Across Districts\",\n            legend.outside=FALSE,\n            main.title.size=1)\n\n\n\n# Plot the map\ntmap_mode(\"plot\")\ntmap_arrange(districts_choropleth)\n\n\nMore specifically, we can observe that conflict hotspots are mainly found in the districts of Yinmarbin, Shwebo, Pakokku and Mandalay which lies in the central regions of Myanmar.\n\n\n4.2 Identifying States with Highest Proportion of Conflicts\nInstead, let us also explore the top 10 states with the highest proportions of armed conflict events.\n\n\nCount number of conflicts by states\nconflict_count &lt;- conflict_data_sf %&gt;%\n  group_by(ST) %&gt;%\n  summarise(total_count_ST = n()) %&gt;%\n  st_drop_geometry() %&gt;%\n  select(ST, total_count_ST)\n\n# Perform the join\nboundary_sf &lt;- boundary_sf %&gt;%\n  left_join(conflict_count, by = \"ST\")\n\n\nLikewise, I’ll add a new column called proportion_ST to represent the proportion based on each Myanmar state.\n\nboundary_sf &lt;- boundary_sf %&gt;%\n  mutate(proportion_ST = total_count_ST / sum(total_count_ST))\n\nhead(boundary_sf[c('ST','total_count_ST','proportion_ST')])\n\nSimple feature collection with 6 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -14915.04 ymin: 1736124 xmax: 187961.7 ymax: 2051144\nProjected CRS: WGS 84 / UTM zone 47N\n          ST total_count_ST proportion_ST                       geometry\n1 Ayeyarwady            853            NA MULTIPOLYGON (((90859.89 20...\n2 Ayeyarwady            853            NA MULTIPOLYGON (((75991.51 17...\n3 Ayeyarwady            853            NA MULTIPOLYGON (((115559 1928...\n4 Ayeyarwady            853            NA MULTIPOLYGON (((39919.39 18...\n5 Ayeyarwady            853            NA MULTIPOLYGON (((-6302.348 1...\n6 Ayeyarwady            853            NA MULTIPOLYGON (((93411.72 17...\n\n\nAt a quick glance, we can see that central and southern parts of Myanmar have the highest proportions of armed conflict events occurring, namely in Sagaing, Mandalay, Magway and Yangon states as indicated in the map below (darkest shade of blue).\n\n\nCreate the points map\nstates_choropleth &lt;-\ntm_shape(boundary_sf) +\n  tm_fill(\"proportion_ST\",\n          n=10,\n          title=\"Proportion\",\n          style=\"equal\",\n          palette=\"Blues\") +\n  tm_borders(lwd=0.2,\n             alpha=1) +\n  tm_text(text = \"ST\", \n          size = 0.2, \n          col = \"black\",\n          fontface = \"bold\") +\n  tm_layout(main.title = \"Distribution of Conflict Points Across States\",\n            legend.outside=FALSE,\n            main.title.size=1)\n\n\n\n# Plot the map\ntmap_mode(\"plot\")\ntmap_arrange(states_choropleth)\n\n\n\n\n4.3 Standard Distances of Top 4 Districts\nNext, I’ve plot the standard distances for the four districts that I’m most interested in. The codes here will calculate the average location of the conflict points within the district (i.e. the mean centre) and measure the dispersion of points around the mean centre.\nThe circle drawn around the mean centre shows us the standard distance to which we can observe that Mandalay has the smallest standard distance and hence, has the most conflict points closely clustered around the mean centre.\n\n\nFind hot spot of Yinmarbin District\n# Define the districts\ndistricts &lt;- c(\"Yinmarbin\", \"Shwebo\", \"Pakokku\", \"Mandalay\")\n\nfor (district in districts) {\n  # Filter the conflict data for the current district\n  conflict_district &lt;- filter(conflict_data_sf, DT == district)\n  boundary_district &lt;- filter(boundary_sf, DT == district)\n\n  # Create a combined ppp and owin object\n  district_owin &lt;- as.owin(boundary_district)\n  ppp_obj &lt;- as.ppp(st_geometry(conflict_district))\n\n  # Handle duplicates\n  ppp_obj &lt;- rjitter(ppp_obj, retry = TRUE, nsim = 1, drop = TRUE)\n\n  # Mask ppp object with the boundary\n  district_ppp_owin &lt;- ppp_obj[district_owin]\n  district_ppp_owin &lt;- rescale(district_ppp_owin, 1000, \"km\")\n\n  # Calculate the mean center\n  mean_coords &lt;- c(mean(district_ppp_owin$x), mean(district_ppp_owin$y))\n\n  # Calculate the standard distance\n  sd_x &lt;- sd(district_ppp_owin$x)\n  sd_y &lt;- sd(district_ppp_owin$y)\n  standard_distance &lt;- sqrt(sd_x^2 + sd_y^2)\n\n  # Prepare to plot for the current district\n  plot(district_ppp_owin, \n       main = paste(\"Standard Distance in\", district), \n       pch = 19, \n       col = \"lightgrey\",\n       xlim = range(district_ppp_owin$x) + c(-5, 5),  # Expand limits\n       ylim = range(district_ppp_owin$y) + c(-5, 5))  # Expand limits\n\n  # Highlight the mean center with an 'X'\n  points(mean_coords[1], mean_coords[2], pch = 4, col = \"red\", cex = 1)  # Smaller 'X'\n\n  # Create a circle around the mean center for the standard distance\n  bearing &lt;- seq(0, 2 * pi, length.out = 360)\n  circle_x &lt;- mean_coords[1] + standard_distance * cos(bearing)\n  circle_y &lt;- mean_coords[2] + standard_distance * sin(bearing)\n\n  # Draw the circle\n  lines(circle_x, circle_y, col = 'red', lwd = 2)\n}\n\n# Reset the plot layout\npar(mfrow = c(1,1), mar = c(0,0,1,0))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "Hands-on Exercise"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#overview",
    "title": "Hands-on Exercise 5",
    "section": "1. Overview",
    "text": "1. Overview\nIn this hands-on exercise, I will be computing spatial weights by executing the following:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#lets-set-up",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#lets-set-up",
    "title": "Hands-on Exercise 5",
    "section": "2. Let’s Set Up!",
    "text": "2. Let’s Set Up!\n\n2.1 Importing Libraries into R\nIn this hands-on exercise, we will we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in R.\n\n\nLoad the packages\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\n2.2 Download Data and Set Up Folders\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\nThis is the file structure for containing the data files that I have extracted."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#import-data-sets-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#import-data-sets-into-r",
    "title": "Hands-on Exercise 5",
    "section": "3. Import Data Sets into R",
    "text": "3. Import Data Sets into R\n\n3.1 Importing Geospatial Data\nFirstly, we will import the Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format. The code chunk below uses st_read() of sf package.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.2 Importing Aspatial Data\nNext, I will import the aspatial data set. This data is a csv file containing selected Hunan’s local development indicators in 2012.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) |&gt; \n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#visualizing-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#visualizing-regional-development-indicator",
    "title": "Hands-on Exercise 5",
    "section": "4. Visualizing Regional Development Indicator",
    "text": "4. Visualizing Regional Development Indicator\nNow, we will use qtm() function of tmap package to create a basemap and a choropleth map showing the distribution of GDPPC 2012.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 5",
    "section": "5. Computing Contiguity Spatial Weights",
    "text": "5. Computing Contiguity Spatial Weights\nIn this section, I will use the poly2nb() function of spdep package to compute contiguity spatial weights.\n\n💡 What does poly2nb() do?\nThis function builds a neighbours list based on regions with contiguous boundaries. A “queen” argument can take either TRUE or FALSE as options.\nNote: If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n\n5.1 Computing Queen contiguity based neighbors\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nWe can observe that there are 88 regions in the data set and that the average number of neighbours is 5.1. The maximum number of neighbours is 11 and the minimum is 1.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n5.2 Computing Rook contiguity based neighbors\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nWe can observe that there are 88 regions in the data set and that the average number of neighbours is 5. The maximum number of neighbours is 10 and the minimum is 1.\n\n\n5.3 Visualising the contiguity weights\nA connectivity graph takes a point in any polygon and draws a line to all its neighbors. The most common way to get the points is to use the coordinates of the centroids of the polygons.\nHowever, getting the points associated with each polygon is a little more complicated than just running st_centroid() on the sf object. We need the coordinates to be in a separate data frame for this to work. To do this, we need to use a mapping function map_dbl().\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe can check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nNow, we can visualize the queen and rook spatial weights, using 3 ways.\n\nMethod 1: Plotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\n\n\nMethod 2: Plotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nMethod 3: Plotting both Queen and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 5",
    "section": "6. Computing distance based neighbours",
    "text": "6. Computing distance based neighbours\nThis section will use the dnearneigh() function of spdep package to compute distance based neighbours.\n\n💡 What does dnearneigh() do?\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument.\nIf unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\n6.1 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n6.2 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nWe can observe that there are 88 regions, with an average of 3.681818 neighbours per region.\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n6.2.1 Plotting fixed distance weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\n6.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n6.3.1 Plotting distance based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#weights-based-on-idw",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#weights-based-on-idw",
    "title": "Hands-on Exercise 5",
    "section": "7. Weights based on IDW",
    "text": "7. Weights based on IDW\nIn this section, I attempt to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#row-standardised-weights-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#row-standardised-weights-matrix",
    "title": "Hands-on Exercise 5",
    "section": "8. Row-standardised weights matrix",
    "text": "8. Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”).\nThis is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\nWhile this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\nFor this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 5",
    "section": "9. Application of Spatial Weight Matrix",
    "text": "9. Application of Spatial Weight Matrix\nNow, I will create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\n9.1 Spatial lag with row-standardised weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecall that in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nFrom the output above, we can see that row-standardized weights are calculated by dividing each weight by the sum of the weights for each polygon. In other words, the weights are normalized so that they sum to 1. This is done to ensure that the spatial lag variable is on the same scale as the original variable.\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n9.2 Spatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nNow, let’s examine the results by using this code.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nFrom the output above, we can see that the spatial lag GDPPC values are calculated by summing the GDPPC of the neighboring counties. We can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n9.3 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw().\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\n💡 Note: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n9.4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\n💡 Note: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\n\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan |&gt;\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") |&gt;\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#nd-order-spatial-point-patterns-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#nd-order-spatial-point-patterns-analysis",
    "title": "Take-home Exercise 1 - Part 1",
    "section": "6. 2nd Order Spatial Point Patterns Analysis",
    "text": "6. 2nd Order Spatial Point Patterns Analysis\nUnlike 1st-order analysis, which studies the intensity of points (e.g., density), let’s also leverage 2nd-order analysis to examine how points are distributed relative to each other, which can offer deeper insights into the spatial interaction between events.\nI will use the K-function and L-function is to understand the spatial relationships between events, particularly focusing on whether the points exhibit clustering, uniformity, or randomness.\n\n6.1 Using K-Function Estimation\nK-function helps detect spatial patterns by comparing the observed distribution of points against a random pattern at different distances.\n\n6.1.1 Yinmarbin District\n1) Computing K-Function Estimation\nFor Yinmarbin district, let’s compute K-function estimates by using Kest() of the spatstat package by using the yinmarbin_ppp_owin masked ppp object we created previously.\n\nK_ck = Kest(yinmarbin_ppp_owin, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Yinmarbin District (K-Function)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nHow to interpret the plot:\n\nK-iso represents the observed or estimated K-function value calculated from the actual data\nK-pois is the theoretical K-function that represents the expected K-function\n\nWith that said…\nWe can observe how the observed line (K-iso) is found to lie above the theoretical line (K-pois) which suggests conflict points in Yinmarbin are highly clustered. Clustering is the strongest at a 20km distance which suggests large-scale clustering. In fact, it is more clustered together than expected by the null hypothesis.\nNote: Since I had used the default edge = TRUE settings, edge correction will account for missing neighbours outside the boundary which helps maintain an accurate estimate of the K-function. Hence, there is marginal difference in the actual and expected K-function.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monte Carlo simulation test) will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of conflict events in Myanmar are randomly distributed.\nH1= The distribution of conflict events in Myanmar are not randomly distributed.\nThe null hypothesis will be rejected if the observed K-function lies above/below the theoretical K-function and envelope.\n\nBy using envelope(), we can get a more robust interpretation by comparing the observed K-function against a simulation envelope of K-functions generated under the null hypothesis.\n\n\n\n\n\n\nNote\n\n\n\nTo achieve a 95% confidence envelope in a K-function test with Complete Spatial Randomness, I will need to exclude the upper 2.5% and lower 2.5% of the simulated K-functions., i.e. I will need to generate at least 40 simulations where nsim = 39.\nWe’ll set rank = 1 for a conservative setting, such that the envelope is based on the extreme values (highest and lowest) from the simulations.\n\n\n\n# Monte Carlo test with K-function\nK_yinmarbin_csr &lt;- envelope(yinmarbin_ppp_owin, Kest, \n                            nsim = 39, rank = 1, glocal=TRUE)\nplot(K_yinmarbin_csr, main = paste(\"Yinmarbin District (CSR)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe tight envelope suggests we can be confident that deviations between the observed and theoretical lines are meaningful, rather than due to random variation. It also indicates that simulations under CSR are producing homogeneous patterns.\nOn the other hand, the observed K-function line is constantly above the shaded region of the envelope and theoretical line, suggesting that observed spatial pattern are more clustered than expected under the null hypothesis of CSR\n\n\nJust to be sure that there is no improvement in a higher number of simulations, I ran it again with nsim = 99. As shown below, the k-function output is similar but with a somewhat smoother plot than before since we are working with less variability. Hence, I’ll stick to nsim = 39.\n\n\n\n6.1.2 Shwebo District\n1) Computing K-Function Estimation\nFor Shwebo district, let’s compute K-function estimates by using Kest() of the spatstat package.\n\nK_ck = Kest(shwebo_ppp_owin, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Shwebo District (K-Function)\"))\n\nThe observed line is consistently above at all distances, implying that conflict events are clustered at both small and large areas, rather than being randomly distributed across the area.\n\n\n\n\n\n\n\nObservations\n\n\n\nThe observed line is consistently above at all distances, implying that conflict events are clustered at both small and large areas, rather than being randomly distributed across the area.\n\n\n2) Performing Complete Spatial Randomness Test\n\n# Monte Carlo test with K-function\nK_shwebo_csr &lt;- envelope(shwebo_ppp_owin, Kest, \n                     nsim = 39, rank = 1, glocal=TRUE)\nplot(K_shwebo_csr, main = paste(\"Shwebo District (CSR)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nSince the observed line lies above the envelope and the shaded region of the envelope is rather narrow, it strongly suggests clustering in Shwebo, rather than due to random variation.\n\n\n\n\n6.1.3 Pakokku District\n1) Computing K-Function Estimation\nFor Pakokku district, let’s compute K-function estimates by using Kest() of the spatstat package.\n\nK_ck = Kest(pakokku_ppp_owin, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Pakokku District (K-Function)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nWe can observe how the observed line (K-iso) is found to be above the theoretical line (K-pois) which suggests conflict points in Pakokku are highly clustered. In fact, it is more clustered together than expected by the null hypothesis.\n\n\n2) Performing Complete Spatial Randomness Test\n\n# Monte Carlo test with K-function\nK_pakokku_csr &lt;- envelope(pakokku_ppp_owin, Kest, \n                     nsim = 39, rank = 1, glocal=TRUE)\nplot(K_pakokku_csr, main = paste(\"Pakokku District (CSR)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nLikewise, we can be certain about the clustering patterns in Pakokku since the observed K values deviates above the envelope as shown.\n\n\n\n\n6.1.4 Mandalay District\n1) Computing K-Function Estimation\nFor Mandalay district, let’s compute K-function estimates by using Kest() of the spatstat package.\n\nK_ck = Kest(mandalay_ppp_owin, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Mandalay District (K-Function)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nSignificant clustering is observed generally across multiple distances in Mandalay and clusterinng is particularly evident at longer spatial distances in Mandalay seen from how the deviations of observed K values increase by the distance.\n\n\n2) Performing Complete Spatial Randomness Test\n\n# Monte Carlo test with K-function\nK_mandalay_csr &lt;- envelope(mandalay_ppp_owin, Kest, \n                     nsim = 39, rank = 1, glocal=TRUE)\nplot(K_mandalay_csr, main = paste(\"Mandalay District (CSR)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe envelope size continues to be narrow with K values plotted above the envelope. This strongly suggests that the point pattern is not random, and the points are clustered.\n\n\n\n\n\n6.2 Using L-Function Estimation\nIn this section, I will be computing L-function via Lest() of spatstat package which is normalises the K-function to a linear scale for easier interpretation.\n\n6.2.1 Yinmarbin District\n1) Computing L-function Estimation\n\nL_yinmarbin = Lest(yinmarbin_ppp_owin, correction = \"Ripley\")\nplot(L_yinmarbin, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(km)\",\n     main = paste(\"Yinmarbin District (L-Function)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe theoretical L-function under CSR remains at 0, meaning that if the points were randomly distributed, the L-function would be expected to show no significant clustering or dispersion.\nThere is a consistent deviation of each observed L value from the theoretical value across all distances, particularly with the strongest deviation at &lt;5 km and &gt; 20km. This confirms that conflict points are both localised in towns of Yinmarbin and found across large areas in Yinmarbin.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of conflict events in Myanmar are randomly distributed.\nH1= The distribution of conflict events in Myanmar are not randomly distributed.\nThe null hypothesis will be rejected if the observed L-function lies above/below the theoretical L-function and envelope.\n\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n# Monte Carlo test with L-function\nL_yinmarbin_csr &lt;- envelope(yinmarbin_ppp_owin, Lest, \n                     nsim = 39, rank = 1, glocal=TRUE)\nplot(L_yinmarbin_csr, . - r ~ r, xlab=\"d(km)\", ylab=\"L(d)-r\",\n       main = paste(\"Yinmarbin District (CSR)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe envelope outputted is narrow which once again reflects lower variability in spatial distribution in Yinmarbin where a large number of points found in this district could have led to more stable results. There is also statistically significant clustering particularly in specific towns in Yinmarbin and across Yinmarbin itself, since we see larger deviations of observed L values from the envelope.\n\n\n\n\n6.2.2 Shwebo District\n1) Computing L-function Estimation\n\nL_shwebo = Lest(shwebo_ppp_owin, correction = \"Ripley\")\nplot(L_shwebo, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(km)\",\n     main = paste(\"Shwebo District (L-Function)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe observed L values obtained for Shwebo districct tend to show a smaller deviation above the theoretical L-function in smaller areas like towns, suggesting localised clustering is less pronounced. Conversely, larger deviations are seen at larger distances which shows broader patterns of clustering are present in Shwebo district.\n\n\n2) Performing Complete Spatial Randomness Test\n\n# Monte Carlo test with L-function\nL_shwebo_csr &lt;- envelope(shwebo_ppp_owin, Lest, \n                     nsim = 39, rank = 1, glocal=TRUE)\nplot(L_shwebo_csr, . - r ~ r, xlab=\"d(km)\", ylab=\"L(d)-r\",\n       main = paste(\"Shwebo District (CSR)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe envelope size continues to grow larger as distance increases, which indicates greater variability in spatial patterns of the Shwebo district but overall, we can confirm strong clustering of conflicts especially in bigger areas of the district which suggests wide-scale hotspots, as well as some localised clustering at smaller scales.\n\n\n\n\n6.2.3 Pakokku District\n1) Computing L-function Estimation\n\nL_pakokku = Lest(pakokku_ppp_owin, correction = \"Ripley\")\nplot(L_yinmarbin, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(km)\",\n     main = paste(\"Pakokku District (L-Function)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nLike the other districts, there is clustering seen in Pakokku across smaller areas like towns and the distribution across the district itself.\n\n\n2) Performing Complete Spatial Randomness Test\n\n# Monte Carlo test with L-function\nL_pakokku_csr &lt;- envelope(pakokku_ppp_owin, Lest, \n                     nsim = 39, rank = 1, glocal=TRUE)\n\n\n\n\n\n\n\n\nObservations\n\n\n\nUnder the CSR test, the intensity of clustering weakens across larger distances (&gt;20km) than we would have assumed in the previous step. This happens as Monte Carlo simulation accounts for random fluctuations especially at larger distances (e.g., &gt;20 km) where random variability in the point pattern naturally increases.\nIn short, significant clustering is present at both small and large scales, but with diminishing intensity as we measure larger distances.\n\n\n\n\n6.2.4 Mandalay District\n1) Computing L-function Estimation\n\nL_mandalay = Lest(mandalay_ppp_owin, correction = \"Ripley\")\nplot(L_mandalay, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(km)\",\n     main = paste(\"Mandalay District (L-Function)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe distance scale for Mandalay is the smallest (0-10km) since the district itself has a smaller area. Nonetheless, we see almost a consistent spread of localised and widespread distribution of conflict points in Mandalay which indicates that conflicts occur across both specific towns and the across the districct.\n\n\n2) Performing Complete Spatial Randomness Test\n\n# Monte Carlo test with L-function\nL_mandalay_csr &lt;- envelope(mandalay_ppp_owin, Lest, \n                     nsim = 39, rank = 1, glocal=TRUE)\nplot(L_mandalay_csr, . - r ~ r, xlab=\"d(km)\", ylab=\"L(d)-r\",\n       main = paste(\"Mandalay District (CSR)\"))\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe Monte Carlo simulation shows that there’s statistically significant clustering across all distances since the observed L values consistently lie above the envelope. There is also a marginal increase in variability of random points observed which is inherent in larger distance scales as seen from the slight widening of the envelope as distance increases.\n\n\nContinue to Part 2 &gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#references",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#references",
    "title": "Take-home Exercise 1",
    "section": "11. References",
    "text": "11. References\n\nCrawley, M. J. (2007). The R Book. Wiley.\nCrisis Group. (2024, August 27). Breaking Away: The Battle for Myanmar’s Rakhine State. https://www.crisisgroup.org/asia/south-east-asia/myanmar/339-breaking-away-battle-myanmars-rakhine-state \nFarge, E., & Mantovani, C. (2024, September 17). Myanmar military stepping up civilian killings and arrests, says UN report. https://www.reuters.com/world/asia-pacific/myanmar-military-intensifies-civilian-killings-arrests-says-un-report-2024-09-17/#:~:text=The%20report%20by%20the%20United,the%20military%20since%20the%20coup. \nFishbein, E., & Lusan, N. N. (2022, December 14). ‘Afraid of the gun’: Military coup fuels Myanmar resource grab. Al Jazeera. https://www.aljazeera.com/news/2022/12/14/afraid-of-the-gun-military-coup-fuels-myanmar-resource-grab \nRajagopalan, B., Lall, U., & Tarboton, D. (1997). Evaluation of kernel density estimation methods for daily precipitation resampling. Springer-Verlag.\nShen, B., Xiang Xu, Plaza, A., & Huang, Q. (2020, November 15). Unfolding Spatial-Temporal Patterns of Taxi Trip based on an Improved Network Kernel Density Estimation. MDPI. Retrieved September 22, 2024, from https://www.mdpi.com/2220-9964/9/11/683 \nThe Stata Journal. (2003). Adaptive kernel density estimation. Sage Journals. https://journals.sagepub.com/doi/pdf/10.1177/1536867X0300300204"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "To carry out this exercise, I will be using the following R packages:\n\nsf: a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\nspatstat: has a wide range of useful functions for point pattern analysis. In this take-home exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\nraster: reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this take-home exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools: provides a set of tools for manipulating geographic data. We mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap: provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nNow, let’s install and load these packages in RStudio.\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)\n\n\n\n\nNext, I will import the downloaded armed conflict data. For aspatial datasets like this, we will import into Rstudio using read_csv() function of the readr package.\n\n# Import armed conflict data\nconflict_data &lt;- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n\nRows: 87746 Columns: 28\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (18): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (10): year, time_precision, inter1, interaction, iso, latitude, longitud...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe 2021-01-01-2024-06-30-Myanmar.csv dataset contains 87746 rows and 28 columns which indicates the presence of 87746 unique armed conflict events in Myanmar.\n\n\nAfter importing the dataset, we can inspect the dataset using the glimpse() function.\n\n# Inspect the conflict data\nglimpse(conflict_data)\n\nRows: 87,746\nColumns: 28\n$ event_id_cnty      &lt;chr&gt; \"MMR64313\", \"MMR64313\", \"MMR64320\", \"MMR64320\", \"MM…\n$ event_date         &lt;chr&gt; \"30 June 2024\", \"30 June 2024\", \"30 June 2024\", \"30…\n$ year               &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 202…\n$ time_precision     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ disorder_type      &lt;chr&gt; \"Political violence\", \"Political violence\", \"Politi…\n$ event_type         &lt;chr&gt; \"Battles\", \"Battles\", \"Battles\", \"Battles\", \"Battle…\n$ sub_event_type     &lt;chr&gt; \"Armed clash\", \"Armed clash\", \"Armed clash\", \"Armed…\n$ actor1             &lt;chr&gt; \"People's Defense Force - Mandalay\", \"Military Forc…\n$ assoc_actor_1      &lt;chr&gt; \"MDA - AGF: Madaya - The Authentic Genes Force; SST…\n$ inter1             &lt;dbl&gt; 3, 1, 3, 1, 3, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 2, 1, …\n$ interaction        &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 10, 13, 13, 10, 12, 12, 12,…\n$ civilian_targeting &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ iso                &lt;dbl&gt; 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1…\n$ region             &lt;chr&gt; \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia…\n$ country            &lt;chr&gt; \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma…\n$ admin1             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Ma…\n$ admin2             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Pyinoolwin\", \"Pyinoolwin\",…\n$ admin3             &lt;chr&gt; \"Patheingyi\", \"Patheingyi\", \"Singu\", \"Singu\", \"Thab…\n$ location           &lt;chr&gt; \"Aung Tha Pyay\", \"Aung Tha Pyay\", \"Pin Lel Gyi\", \"P…\n$ latitude           &lt;dbl&gt; 22.1504, 22.1504, 22.5752, 22.5752, 22.8800, 22.880…\n$ longitude          &lt;dbl&gt; 96.2364, 96.2364, 96.0661, 96.0661, 95.9700, 95.970…\n$ geo_precision      &lt;dbl&gt; 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, …\n$ source             &lt;chr&gt; \"Democratic Voice of Burma; Irrawaddy\", \"Democratic…\n$ source_scale       &lt;chr&gt; \"National\", \"National\", \"National\", \"National\", \"Na…\n$ notes              &lt;chr&gt; \"On 30 June 2024, near Aung Tha Pyay village (Pathe…\n$ fatalities         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, …\n$ tags               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ timestamp          &lt;dbl&gt; 1720552468, 1720552468, 1720552468, 1720552468, 172…\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe event_date field shows that it uses a character datatype instead of date - we will fix this later. Also, we can observe that thelongitude and langitude fields appear to be adopting the WGS84 geographic coordinate system since they are in the -180/180 and -90/90 range respectively.\n\n\nI will also import the administrative boundary data into a simple features tibble data.frame using st_read() of the sf package. This function reads the shapefile data and returns an sf object that can be used for further analysis.\n\n# Import boundary data\nboundary_sf &lt;- st_read(dsn = \"data/geospatial\",layer = \"mmr_polbnda_adm2_250k_mimu\") %&gt;% st_transform(crs = 32647)\n\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Take-home_Ex\\Take-home_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nObservations\n\n\n\nIn the code above, the %&gt;% operator is used to pass the output of st_read() directly to the st_transform() function. Since the dataset represents the Myanmar boundary, we need to assign the appropriate coordinate reference system, which is UTM zone 47N (EPSG:32647), east of Myanmar. The st_transform() function then converts the CRS of the sf object to EPSG:32647.\n\n\nIn the code below, we can notice that the ESPG code has been updated to 32647.\n\n# Check for changes\nst_crs(boundary_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nHere, I will use the plot() function which plots the geometry of the sf object. The st_geometry() function is used to extract the geometry of the mpsz_sf object which includes the districts of Myanmar as shown below.\n\npar(mar = c(0,0,0,0))\nplot(st_geometry(boundary_sf))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#lets-set-up",
    "href": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#lets-set-up",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "To carry out this exercise, I will be using the following R packages:\n\nsf: a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\nspatstat: has a wide range of useful functions for point pattern analysis. In this take-home exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\nraster: reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this take-home exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools: provides a set of tools for manipulating geographic data. We mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap: provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nNow, let’s install and load these packages in RStudio.\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)\n\n\n\n\nNext, I will import the downloaded armed conflict data. For aspatial datasets like this, we will import into Rstudio using read_csv() function of the readr package.\n\n# Import armed conflict data\nconflict_data &lt;- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n\nRows: 87746 Columns: 28\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (18): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (10): year, time_precision, inter1, interaction, iso, latitude, longitud...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe 2021-01-01-2024-06-30-Myanmar.csv dataset contains 87746 rows and 28 columns which indicates the presence of 87746 unique armed conflict events in Myanmar.\n\n\nAfter importing the dataset, we can inspect the dataset using the glimpse() function.\n\n# Inspect the conflict data\nglimpse(conflict_data)\n\nRows: 87,746\nColumns: 28\n$ event_id_cnty      &lt;chr&gt; \"MMR64313\", \"MMR64313\", \"MMR64320\", \"MMR64320\", \"MM…\n$ event_date         &lt;chr&gt; \"30 June 2024\", \"30 June 2024\", \"30 June 2024\", \"30…\n$ year               &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 202…\n$ time_precision     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ disorder_type      &lt;chr&gt; \"Political violence\", \"Political violence\", \"Politi…\n$ event_type         &lt;chr&gt; \"Battles\", \"Battles\", \"Battles\", \"Battles\", \"Battle…\n$ sub_event_type     &lt;chr&gt; \"Armed clash\", \"Armed clash\", \"Armed clash\", \"Armed…\n$ actor1             &lt;chr&gt; \"People's Defense Force - Mandalay\", \"Military Forc…\n$ assoc_actor_1      &lt;chr&gt; \"MDA - AGF: Madaya - The Authentic Genes Force; SST…\n$ inter1             &lt;dbl&gt; 3, 1, 3, 1, 3, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 2, 1, …\n$ interaction        &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 10, 13, 13, 10, 12, 12, 12,…\n$ civilian_targeting &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ iso                &lt;dbl&gt; 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1…\n$ region             &lt;chr&gt; \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia…\n$ country            &lt;chr&gt; \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma…\n$ admin1             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Ma…\n$ admin2             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Pyinoolwin\", \"Pyinoolwin\",…\n$ admin3             &lt;chr&gt; \"Patheingyi\", \"Patheingyi\", \"Singu\", \"Singu\", \"Thab…\n$ location           &lt;chr&gt; \"Aung Tha Pyay\", \"Aung Tha Pyay\", \"Pin Lel Gyi\", \"P…\n$ latitude           &lt;dbl&gt; 22.1504, 22.1504, 22.5752, 22.5752, 22.8800, 22.880…\n$ longitude          &lt;dbl&gt; 96.2364, 96.2364, 96.0661, 96.0661, 95.9700, 95.970…\n$ geo_precision      &lt;dbl&gt; 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, …\n$ source             &lt;chr&gt; \"Democratic Voice of Burma; Irrawaddy\", \"Democratic…\n$ source_scale       &lt;chr&gt; \"National\", \"National\", \"National\", \"National\", \"Na…\n$ notes              &lt;chr&gt; \"On 30 June 2024, near Aung Tha Pyay village (Pathe…\n$ fatalities         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, …\n$ tags               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ timestamp          &lt;dbl&gt; 1720552468, 1720552468, 1720552468, 1720552468, 172…\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe event_date field shows that it uses a character datatype instead of date - we will fix this later. Also, we can observe that thelongitude and langitude fields appear to be adopting the WGS84 geographic coordinate system since they are in the -180/180 and -90/90 range respectively.\n\n\nI will also import the administrative boundary data into a simple features tibble data.frame using st_read() of the sf package. This function reads the shapefile data and returns an sf object that can be used for further analysis.\n\n# Import boundary data\nboundary_sf &lt;- st_read(dsn = \"data/geospatial\",layer = \"mmr_polbnda_adm2_250k_mimu\") %&gt;% st_transform(crs = 32647)\n\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Take-home_Ex\\Take-home_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nObservations\n\n\n\nIn the code above, the %&gt;% operator is used to pass the output of st_read() directly to the st_transform() function. Since the dataset represents the Myanmar boundary, we need to assign the appropriate coordinate reference system, which is UTM zone 47N (EPSG:32647), east of Myanmar. The st_transform() function then converts the CRS of the sf object to EPSG:32647.\n\n\nIn the code below, we can notice that the ESPG code has been updated to 32647.\n\n# Check for changes\nst_crs(boundary_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nHere, I will use the plot() function which plots the geometry of the sf object. The st_geometry() function is used to extract the geometry of the mpsz_sf object which includes the districts of Myanmar as shown below.\n\npar(mar = c(0,0,0,0))\nplot(st_geometry(boundary_sf))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#data-wrangling",
    "title": "Take-home Exercise 1",
    "section": "3. Data Wrangling",
    "text": "3. Data Wrangling\n\n3.1 Fixing Incorrect Datatypes\nRecall that the earlier inspection of the conflict_data tibble data frame revealed that the datatype indicated for event date is wrongly labelled as a character instead of a date format.\nAs such, let’s convert the datatype to the correct ‘date’ format as shown below.\n\n# Convert the datatype for event_date\nconflict_data$event_date &lt;- as.Date(conflict_data$event_date, format = \"%d %B %Y\")\n\n# Check for changes\nhead(conflict_data)\n\n# A tibble: 6 × 28\n  event_id_cnty event_date  year time_precision disorder_type      event_type\n  &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;     \n1 MMR64313      2024-06-30  2024              1 Political violence Battles   \n2 MMR64313      2024-06-30  2024              1 Political violence Battles   \n3 MMR64320      2024-06-30  2024              1 Political violence Battles   \n4 MMR64320      2024-06-30  2024              1 Political violence Battles   \n5 MMR64321      2024-06-30  2024              1 Political violence Battles   \n6 MMR64321      2024-06-30  2024              1 Political violence Battles   \n# ℹ 22 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;,\n#   region &lt;chr&gt;, country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;,\n#   location &lt;chr&gt;, latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, geo_precision &lt;dbl&gt;,\n#   source &lt;chr&gt;, source_scale &lt;chr&gt;, notes &lt;chr&gt;, fatalities &lt;dbl&gt;,\n#   tags &lt;chr&gt;, timestamp &lt;dbl&gt;\n\n\n\n\n3.2 Adding new year_quarter column\nWe will want to create a new column to indicate the specific year and quarter for each conflict event since the spatial analysis will be done later in a quarterly manner.\n\n\nExtract year and quarter\nconflict_data$year_quarter &lt;- paste0(\n  year(conflict_data$event_date), \n  \" Q\", \n  quarter(conflict_data$event_date)\n)\n\n# View the new data column\nunique(conflict_data$year_quarter)\n\n\n [1] \"2024 Q2\" \"2024 Q1\" \"2023 Q4\" \"2023 Q3\" \"2023 Q2\" \"2023 Q1\" \"2022 Q4\"\n [8] \"2022 Q3\" \"2022 Q2\" \"2022 Q1\" \"2021 Q4\" \"2021 Q3\" \"2021 Q2\" \"2021 Q1\"\n\n\n\n\n3.3 Fixing Duplicated Event ID in conflict_data Dataframe\nAs shown, there are presence of duplicates in our dataframe returned by the duplicated() function.\n\n# Check for duplicates\nany(duplicated(conflict_data))\n\n[1] TRUE\n\n\nBased on the duplicated event ID: MMR64313 for instance. We can observe the two records are of the same political violence event happening between two actors on 30/6/2024, between the People’s Defense Force and Military Forces of Myanmar. Upon further research, these two actors are opposing political parties of Myanmar’s ongoing conflict.\n\n# Inspect an instance of the duplciated event IDs\nhead(conflict_data,2)\n\n# A tibble: 2 × 29\n  event_id_cnty event_date  year time_precision disorder_type      event_type\n  &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;     \n1 MMR64313      2024-06-30  2024              1 Political violence Battles   \n2 MMR64313      2024-06-30  2024              1 Political violence Battles   \n# ℹ 23 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;,\n#   region &lt;chr&gt;, country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;,\n#   location &lt;chr&gt;, latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, geo_precision &lt;dbl&gt;,\n#   source &lt;chr&gt;, source_scale &lt;chr&gt;, notes &lt;chr&gt;, fatalities &lt;dbl&gt;,\n#   tags &lt;chr&gt;, timestamp &lt;dbl&gt;, year_quarter &lt;chr&gt;\n\n\n\n\n\n\n\n\nReflection\n\n\n\nShould duplicated data be removed in this analysis?\nA single event (e.g. MMR64313) can have duplicated rows with different actor1 values, typically due to counterattacks from opposing sides, leading to different data entries into the conflict_data dataset.\nHence, I will remove duplicated events found in the conflict_data dataframe as long as the rows have the same event ID indicated.\n\n\nHere, I did another check to ensure there is not more than 2 possible repeated event IDs in the first 20 rows of conflict_data.\n\n\nCheck duplicated events for first 20 rows\nduplicate_counts_first_20 &lt;- conflict_data %&gt;%\n  slice(1:20) %&gt;%            \n  group_by(event_id_cnty) %&gt;% \n  summarize(count = n()) %&gt;%  \n  filter(count &gt; 1)         \n\n# View the result\nprint(duplicate_counts_first_20)\n\n\n# A tibble: 9 × 2\n  event_id_cnty count\n  &lt;chr&gt;         &lt;int&gt;\n1 MMR64313          2\n2 MMR64320          2\n3 MMR64321          2\n4 MMR64323          2\n5 MMR64325          2\n6 MMR64326          2\n7 MMR64328          2\n8 MMR64330          2\n9 MMR64331          2\n\n\nWith that checked, I’ll remove the duplicated rows with a repeated Event ID.\n\n\nRemove duplicated rows\n# Retrieve data of duplicated rows\nmerged_duplicates &lt;- conflict_data %&gt;%\n  filter(duplicated(event_id_cnty) | duplicated(event_id_cnty, fromLast = TRUE)) %&gt;%\n  arrange(event_id_cnty) %&gt;%\n  group_by(event_id_cnty) %&gt;%\n  summarize(\n    actor2 = last(actor1),\n    assoc_actor_2 = last(assoc_actor_1)\n  )\n\nconflict_data_no_duplicates &lt;- conflict_data %&gt;%\n  filter(!duplicated(event_id_cnty))\n\n# Update conflict_data dataframe with new columns\nconflict_data &lt;- conflict_data_no_duplicates %&gt;%\n  left_join(merged_duplicates, by = \"event_id_cnty\")\n\n# View dataframe\nprint(head(conflict_data))\n\n\n# A tibble: 6 × 31\n  event_id_cnty event_date  year time_precision disorder_type         event_type\n  &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;                 &lt;chr&gt;     \n1 MMR64313      2024-06-30  2024              1 Political violence    Battles   \n2 MMR64320      2024-06-30  2024              1 Political violence    Battles   \n3 MMR64321      2024-06-30  2024              1 Political violence    Battles   \n4 MMR64322      2024-06-30  2024              1 Strategic developmen… Strategic…\n5 MMR64323      2024-06-30  2024              1 Political violence    Battles   \n6 MMR64324      2024-06-30  2024              1 Strategic developmen… Strategic…\n# ℹ 25 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;,\n#   region &lt;chr&gt;, country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;,\n#   location &lt;chr&gt;, latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, geo_precision &lt;dbl&gt;,\n#   source &lt;chr&gt;, source_scale &lt;chr&gt;, notes &lt;chr&gt;, fatalities &lt;dbl&gt;,\n#   tags &lt;chr&gt;, timestamp &lt;dbl&gt;, year_quarter &lt;chr&gt;, actor2 &lt;chr&gt;,\n#   assoc_actor_2 &lt;chr&gt;\n\n\nWe can observe that there are no longer any duplicated event IDs in our conflict_data data frame.\n\nany(duplicated(conflict_data))\n\n[1] FALSE\n\n\n\n\n3.4 Converting Aspatial Data to Simple Feature Format\nFor the purpose of this exercise, we will want to integrate and analyse aspatial data in a geographic context. I’ll do a check if conflict_data needs to be converted to a sf data frame - if it outputs anything else but sf, then it’s not a simple feature data frame!\n\nclass(conflict_data)\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\n\n\n\n\n\n\nObservations\n\n\n\nWe can see that conflict_data is not a sf data frame. Since a non-simple feature data frame does not have a “geometry” column, we’ll need to convert conflict_data into a simple feature data frame\n\n\nWe can convert conflict_data into a simple feature data frame by using st_as_sf() from the sf package. Addiitionally, we will also need to transform coordinate system from geographic (ESPG: 4326) to projected (ESPG: 32647) using st_transform().\n\n# Convert to simple feature format\nconflict_data_sf &lt;- st_as_sf(conflict_data, coords = c(\"longitude\", \"latitude\"), crs=4326) %&gt;% st_transform(crs = 32647)\n\n# Inspect the changes\nglimpse(conflict_data_sf)\n\nRows: 51,553\nColumns: 30\n$ event_id_cnty      &lt;chr&gt; \"MMR64313\", \"MMR64320\", \"MMR64321\", \"MMR64322\", \"MM…\n$ event_date         &lt;date&gt; 2024-06-30, 2024-06-30, 2024-06-30, 2024-06-30, 20…\n$ year               &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 202…\n$ time_precision     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ disorder_type      &lt;chr&gt; \"Political violence\", \"Political violence\", \"Politi…\n$ event_type         &lt;chr&gt; \"Battles\", \"Battles\", \"Battles\", \"Strategic develop…\n$ sub_event_type     &lt;chr&gt; \"Armed clash\", \"Armed clash\", \"Armed clash\", \"Chang…\n$ actor1             &lt;chr&gt; \"People's Defense Force - Mandalay\", \"People's Defe…\n$ assoc_actor_1      &lt;chr&gt; \"MDA - AGF: Madaya - The Authentic Genes Force; SST…\n$ inter1             &lt;dbl&gt; 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 3, 3, 3, 7, 1, …\n$ interaction        &lt;dbl&gt; 13, 13, 13, 10, 13, 10, 12, 12, 12, 12, 12, 13, 13,…\n$ civilian_targeting &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ iso                &lt;dbl&gt; 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1…\n$ region             &lt;chr&gt; \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia…\n$ country            &lt;chr&gt; \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma…\n$ admin1             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Sagaing\", \"Sag…\n$ admin2             &lt;chr&gt; \"Mandalay\", \"Pyinoolwin\", \"Pyinoolwin\", \"Shwebo\", \"…\n$ admin3             &lt;chr&gt; \"Patheingyi\", \"Singu\", \"Thabeikkyin\", \"Khin-U\", \"My…\n$ location           &lt;chr&gt; \"Aung Tha Pyay\", \"Pin Lel Gyi\", \"Thabeikkyin\", \"Khi…\n$ geo_precision      &lt;dbl&gt; 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, …\n$ source             &lt;chr&gt; \"Democratic Voice of Burma; Irrawaddy\", \"Irrawaddy\"…\n$ source_scale       &lt;chr&gt; \"National\", \"National\", \"National\", \"Subnational-Na…\n$ notes              &lt;chr&gt; \"On 30 June 2024, near Aung Tha Pyay village (Pathe…\n$ fatalities         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ tags               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ timestamp          &lt;dbl&gt; 1720552468, 1720552468, 1720552468, 1720552468, 172…\n$ year_quarter       &lt;chr&gt; \"2024 Q2\", \"2024 Q2\", \"2024 Q2\", \"2024 Q2\", \"2024 Q…\n$ actor2             &lt;chr&gt; \"Military Forces of Myanmar (2021-)\", \"Military For…\n$ assoc_actor_2      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Uniden…\n$ geometry           &lt;POINT [m]&gt; POINT (214961 2452068), POINT (198303.2 24994…\n\n\n\n\n\n\n\n\nObservations\n\n\n\nNotice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been removed from the data frame.\n\n\nWe can further inspect the newly created ‘geometry’ column of conflict_data_sf\n\n# Retrieve geometry column\nst_geometry(conflict_data_sf)\n\nGeometry set for 51553 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 5 geometries:\n\n\nPOINT (214961 2452068)\n\n\nPOINT (198303.2 2499463)\n\n\nPOINT (189105.4 2533434)\n\n\nPOINT (160913.9 2522331)\n\n\nPOINT (146213 2428487)\n\n\n\n\n\n\n\n\nObservations\n\n\n\nIt consists of 51,533 features consisting of point geometric features where the underlying datum is in WGS 84 format.\n\n\nTo ensure that the coordinate system is correctly updated, we can use the st_crs() function where we observe that the ESPG code is correctly indicated as 32647.\n\n# Check CRS format\nst_crs(conflict_data_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\n\n\n3.5 Reduce Data File Size\nIn this section, I will reduce the current Myanmar armed conflict dataset as the time taken for computing the kernel density estimates can take up to 30 minutes long which is not computationally efficient.\n\n1) Remove ‘Protests’ and ‘Riots’ Event Types\nI will remove rows in the conflicts_data_sf dataset that don’t focus on the four main event types (Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians), as mentioned in the exercise brief.\n\nconflict_data_sf &lt;- conflict_data_sf %&gt;%\n  filter(!(event_type %in% c(\"Protests\", \"Riots\")))\n\nunique(conflict_data_sf$event_type)\n\n[1] \"Battles\"                    \"Strategic developments\"    \n[3] \"Violence against civilians\" \"Explosions/Remote violence\"\n\n\n\n\n2) Remove unused columns in boundary_sf\nAs seen, there are 8 columns in the simple feature data frame of boundary_sf.\n\n# Inspect first rows of data in boundary_sf\nhead(boundary_sf)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -14915.04 ymin: 1736124 xmax: 187961.7 ymax: 2051144\nProjected CRS: WGS 84 / UTM zone 47N\n  OBJECTID         ST ST_PCODE        DT   DT_PCODE      DT_MMR PCode_V\n1        1 Ayeyarwady   MMR017  Hinthada MMR017D002    ဟင်္သာတခရိုင်     9.4\n2        2 Ayeyarwady   MMR017   Labutta MMR017D004    လပွတ္တာခရိုင်     9.4\n3        3 Ayeyarwady   MMR017    Maubin MMR017D005     မအူပင်ခရိုင်     9.4\n4        4 Ayeyarwady   MMR017 Myaungmya MMR017D003 မြောင်းမြခရိုင်     9.4\n5        5 Ayeyarwady   MMR017   Pathein MMR017D001      ပုသိမ်ခရိုင်     9.4\n6        6 Ayeyarwady   MMR017    Pyapon MMR017D006     ဖျာပုံခရိုင်     9.4\n                        geometry\n1 MULTIPOLYGON (((90859.89 20...\n2 MULTIPOLYGON (((75991.51 17...\n3 MULTIPOLYGON (((115559 1928...\n4 MULTIPOLYGON (((39919.39 18...\n5 MULTIPOLYGON (((-6302.348 1...\n6 MULTIPOLYGON (((93411.72 17...\n\n\nI will remove ’DT_MMR” column as we already have the District Name in English in DT and won’t require the district names in Myanmar Language. Next, we will remove the coded versions of ST (state/region) and DT (district) columns, namely ST_PCODE and DT_PCODE. Additionally, we won’t need the PCode_V column since we will be dropping the PCODE column too.\n\nboundary_sf &lt;- boundary_sf %&gt;% dplyr::select('OBJECTID', 'ST', 'DT','geometry')\nsummary(boundary_sf)\n\n    OBJECTID          ST                 DT                     geometry \n Min.   : 1.00   Length:80          Length:80          MULTIPOLYGON :80  \n 1st Qu.:20.75   Class :character   Class :character   epsg:32647   : 0  \n Median :40.50   Mode  :character   Mode  :character   +proj=utm ...: 0  \n Mean   :40.50                                                           \n 3rd Qu.:60.25                                                           \n Max.   :80.00                                                           \n\n\n\n\n3) Remove unused columns in conflict_data\nI will also remove unnecessary columns of the conflict_data data frame that won’t be used in our spatial analysis later.\n\n\nRemove unnecessary columns\nconflict_data_sf &lt;- conflict_data_sf %&gt;%\n  select(event_id_cnty, event_date, year_quarter, disorder_type, event_type, location, geometry, fatalities)\n\nsummary(conflict_data_sf)\n\n\n event_id_cnty        event_date         year_quarter       disorder_type     \n Length:42608       Min.   :2021-01-01   Length:42608       Length:42608      \n Class :character   1st Qu.:2022-01-10   Class :character   Class :character  \n Mode  :character   Median :2022-10-13   Mode  :character   Mode  :character  \n                    Mean   :2022-10-29                                        \n                    3rd Qu.:2023-08-29                                        \n                    Max.   :2024-06-30                                        \n  event_type          location                  geometry       fatalities    \n Length:42608       Length:42608       POINT        :42608   Min.   :  0.00  \n Class :character   Class :character   epsg:32647   :    0   1st Qu.:  0.00  \n Mode  :character   Mode  :character   +proj=utm ...:    0   Median :  0.00  \n                                                             Mean   :  1.27  \n                                                             3rd Qu.:  1.00  \n                                                             Max.   :201.00  \n\n\nLet’s append conflict_data_sf with the columns of boundary_sf to assist our analysis later.\n\n# Link conflict event to its district region\nconflict_data_sf &lt;- st_join(conflict_data_sf, boundary_sf, join = st_intersects)\n\n\n\n\n3.6 Converting Simple Features Data Frame into ppp Object\nIt is important that we convert conflict_data_sf (a simple feature data frame) into a planer point pattern (ppp) object format, since the spatstat package that we’ll be using for the Spatial Point Pattern Analysis later is specifically designed for working with ppp-formated data. Additionally, I will begin with categorising the ppp objects into their unique year_quarter category.\n\n\nCreate ppp objects based on year_quarter category\n# Create an empty list to store the ppp objects\nppp_list &lt;- list()\n\n# Loop through each unique year_quarter category\nfor (yq in unique(conflict_data_sf$year_quarter)) {\n  # Subset the data for the current year_quarter\n  subset_data_sf &lt;- conflict_data_sf %&gt;% filter(year_quarter == yq)\n  \n  # Convert the subset to a ppp object\n  subset_ppp &lt;- as.ppp(subset_data_sf$geometry)\n  \n  # Add the ppp object to the list\n  ppp_list[[yq]] &lt;- subset_ppp\n}\n\n# Check list\nppp_list\n\n\n$`2024 Q2`\nPlanar point pattern: 2788 points\nwindow: rectangle = [-208804.4, 597543.7] x [1103500.1, 3026504.9] units\n\n$`2024 Q1`\nPlanar point pattern: 3186 points\nwindow: rectangle = [-207135, 591875.9] x [1245380, 3026504.9] units\n\n$`2023 Q4`\nPlanar point pattern: 3627 points\nwindow: rectangle = [-206931.7, 604775.1] x [1103500.1, 3020772.2] units\n\n$`2023 Q3`\nPlanar point pattern: 3010 points\nwindow: rectangle = [-197883.4, 518300.4] x [1103500.1, 3027041.8] units\n\n$`2023 Q2`\nPlanar point pattern: 2745 points\nwindow: rectangle = [-191261.5, 518300.4] x [1103500.1, 3006372.9] units\n\n$`2023 Q1`\nPlanar point pattern: 3101 points\nwindow: rectangle = [-199243.8, 591875.9] x [1103500.1, 3026504.9] units\n\n$`2022 Q4`\nPlanar point pattern: 3296 points\nwindow: rectangle = [-206531.5, 518300.4] x [1103500.1, 2931517.1] units\n\n$`2022 Q3`\nPlanar point pattern: 3486 points\nwindow: rectangle = [-206196.6, 568361.5] x [1103500.1, 3026504.9] units\n\n$`2022 Q2`\nPlanar point pattern: 3580 points\nwindow: rectangle = [-206931.7, 640934.5] x [1103500.1, 3026504.9] units\n\n$`2022 Q1`\nPlanar point pattern: 3563 points\nwindow: rectangle = [-204784, 591875.9] x [1103500.1, 3026504.9] units\n\n$`2021 Q4`\nPlanar point pattern: 3844 points\nwindow: rectangle = [-200024.3, 591875.9] x [1103500.1, 3042960.3] units\n\n$`2021 Q3`\nPlanar point pattern: 2754 points\nwindow: rectangle = [-193181.1, 591875.9] x [1103500.1, 3042960.3] units\n\n$`2021 Q2`\nPlanar point pattern: 2916 points\nwindow: rectangle = [-191409.1, 640934.5] x [1132472.1, 3042960.3] units\n\n$`2021 Q1`\nPlanar point pattern: 712 points\nwindow: rectangle = [-203795.3, 591875.9] x [1375186.1, 3026504.9] units\n\n\nWe can visualise the spread of conflict events across each quarter from January 2021 to June 2024 using the plot() function as shown below.\n\n\nVisualise the spread of conflicts by year_quarter\n# Ensure 'year_quarter' is a factor\nconflict_data_sf$year_quarter &lt;- as.factor(conflict_data_sf$year_quarter)\n\n# Loop through each unique year_quarter and create separate plots\nyear_quarters &lt;- unique(conflict_data_sf$year_quarter)\n\n# Set up a grid layout for multiple plots (adjust 'mfrow' as needed)\npar(mfrow = c(2,3))\npar(mar = c(0,0,1,0))\n\n# Loop through each year_quarter and plot\nfor (yq in year_quarters) {\n  subset_data_sf &lt;- conflict_data_sf[conflict_data_sf$year_quarter == yq, ]\n  conflict_data_ppp &lt;- as.ppp(subset_data_sf$geometry)\n  \n  # Plot each subset ppp object\n  plot(conflict_data_ppp, main = paste(\"Year-Quarter:\", yq))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nIt is noticeable that there conflict events have occured more frequently since 2021 as points plotted on the graph have gotten darker across 2021 to 2024. We can also observe the possibility of duplicated events occurring from the darker spots in the plot, in which it appears more intense in Myanmar’s central and west regions.\n\n\n\n\n3.7 Creating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area, that is Myanmar’s boundary in this case. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to convert the boundary_data_sf simple feature data frame into an owin object of spatstat.\n\n# Convert to owin object\nmyanmar_owin &lt;- as.owin(boundary_sf)\n\n# Visualise the owin object\nplot(myanmar_owin)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFrom my observations, the as.owin() function converts the boundary_data_sf spatial boundary into a window object that represents the outer boundary of the spatial region and does not handle internal structures or districts we previously saw from the plot of boundary_data_sf.\n\n\nWe can also take a quick look at the owin object properties as shown. I will be converting it to a data frame for the purposes of getting a quick glimpse of the object.\n\n# Summary info of owin object\nowin_df &lt;- as.data.frame(myanmar_owin)\nprint(head(owin_df))\n\n         x       y id sign\n1 56519.39 2741919  1   -1\n2 56917.28 2741947  1   -1\n3 57000.15 2741973  1   -1\n4 57068.51 2741994  1   -1\n5 57221.44 2742142  1   -1\n6 57068.51 2741994  1   -1\n\n\n\n\n3.8 Combining ppp Object and owin Object\nIn this last step of geospatial data wrangling, I will mask all ppp object with the owin object I created earlier to put in place all conflict events within the boundary of Myanmar. Doing so can also optimise the memory usage for large datasets.\n\n\n\n\n\n\nThe ppp object outputted from combining both the point and polygon feature results in the boundary of Myanmar outlining the plot of conflict events as shown.\n\n# Set up plotting layout\nn &lt;- length(masked_ppp_list)\n\n# Plot each masked ppp object\npar(mfrow = c(2,3), mar = c(0,0,1,0))  # Adjust margins as needed\nfor (quarter in names(masked_ppp_list)) {\n  plot(masked_ppp_list[[quarter]], main = paste(\"Year Quarter:\", quarter))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmasked_ppp_list_km = list()\n\nfor (quarter in names(masked_ppp_list)) {\n  ppp_obj &lt;- masked_ppp_list[[quarter]]\n  ppp_obj_km &lt;- rescale(ppp_obj, 1000, \"km\")\n  masked_ppp_list_km[[quarter]] &lt;- ppp_obj_km\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#spatio-temporal-kde",
    "href": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#spatio-temporal-kde",
    "title": "Take-home Exercise 1",
    "section": "7. Spatio-Temporal KDE",
    "text": "7. Spatio-Temporal KDE\n\n\nSet up DayofYear variable per quarter\nQ2_2024 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2024 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2024 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2024 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\n\n\n7.1 Creating ppp object\nIn the code chunk below, DayofYear from the fire_sf data frame is selected and is included in the output ppp object.\n\n\nCreate ppp object per quarter\nQ2_2024_ppp &lt;- Q2_2024 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2024_ppp &lt;- Q1_2024 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2023_ppp &lt;- Q4_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2023_ppp &lt;- Q3_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2023_ppp &lt;- Q2_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2023_ppp &lt;- Q1_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2022_ppp &lt;- Q4_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2022_ppp &lt;- Q3_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2022_ppp &lt;- Q2_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2022_ppp &lt;- Q1_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2021_ppp &lt;- Q4_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2021_ppp &lt;- Q3_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2021_ppp &lt;- Q2_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2021_ppp &lt;- Q1_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\n\n\n\n7.2 Combining ppp with owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\n\nMask the ppp object with owin object\nQ2_2024_owin &lt;- Q2_2024_ppp[myanmar_owin]\n\nQ1_2024_owin &lt;- Q1_2024_ppp[myanmar_owin]\n\nQ4_2023_owin &lt;- Q4_2023_ppp[myanmar_owin]\n\nQ3_2023_owin &lt;- Q3_2023_ppp[myanmar_owin]\n\nQ2_2023_owin &lt;- Q2_2023_ppp[myanmar_owin]\n\nQ1_2023_owin &lt;- Q1_2023_ppp[myanmar_owin]\n\nQ4_2022_owin &lt;- Q4_2022_ppp[myanmar_owin]\n\nQ3_2022_owin &lt;- Q3_2022_ppp[myanmar_owin]\n\nQ2_2022_owin &lt;- Q2_2022_ppp[myanmar_owin]\n\nQ1_2022_owin &lt;- Q1_2022_ppp[myanmar_owin]\n\nQ4_2021_owin &lt;- Q4_2021_ppp[myanmar_owin]\n\nQ3_2021_owin &lt;- Q3_2021_ppp[myanmar_owin]\n\nQ2_2021_owin &lt;- Q2_2021_ppp[myanmar_owin]\n\nQ1_2021_owin &lt;- Q1_2021_ppp[myanmar_owin]\n\n\nNow, I will perform a spatio-temporal kernel density estimate on the owin object which gives us insights into where and when conflict event occurrences are concentrated within the specified observation window.\n\n\nPerform spatial temporal KDE per quarter\nQ2_2024_stkde &lt;- spattemp.density(Q2_2024_owin)\n\nQ1_2024_stkde &lt;- spattemp.density(Q1_2024_owin)\n\nQ4_2023_stkde &lt;- spattemp.density(Q4_2023_owin)\n\nQ3_2023_stkde &lt;- spattemp.density(Q3_2023_owin)\n\nQ2_2023_stkde &lt;- spattemp.density(Q2_2023_owin)\n\nQ1_2023_stkde &lt;- spattemp.density(Q1_2023_owin)\n\nQ4_2022_stkde &lt;- spattemp.density(Q4_2022_owin)\n\nQ3_2022_stkde &lt;- spattemp.density(Q3_2022_owin)\n\nQ2_2022_stkde &lt;- spattemp.density(Q2_2022_owin)\n\nQ1_2022_stkde &lt;- spattemp.density(Q1_2022_owin)\n\nQ4_2021_stkde &lt;- spattemp.density(Q4_2021_owin)\n\nQ3_2021_stkde &lt;- spattemp.density(Q3_2021_owin)\n\nQ2_2021_stkde &lt;- spattemp.density(Q2_2021_owin)\n\nQ1_2021_stkde &lt;- spattemp.density(Q1_2021_owin)\n\n\n\n\nSTKDE of 2024 Q2\n# Load necessary libraries\nlibrary(spatstat)\nlibrary(magick)\nlibrary(viridis)\n\n# Create a directory to store PNG frames\nif (!dir.exists(\"2024_Q2_frames\")) {\n  dir.create(\"2024_Q2_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q2_2024_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q2_2024_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2024_Q2_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2024 Q2 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2024_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2024_Q2_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2024 Q1\n# Create a directory to store PNG frames\nif (!dir.exists(\"2024_Q1_frames\")) {\n  dir.create(\"2024_Q1_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q1_2024_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q1_2024_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2024_Q1_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2024 Q1 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2024_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2024_Q1_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2023 Q4\n# Create a directory to store PNG frames\nif (!dir.exists(\"2023_Q4_frames\")) {\n  dir.create(\"2023_Q4_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q4_2023_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q4_2023_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2023_Q4_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2023 Q4 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2023_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2023_Q4_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2023 Q3\n# Create a directory to store PNG frames\nif (!dir.exists(\"2023_Q3_frames\")) {\n  dir.create(\"2023_Q3_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q3_2023_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q3_2023_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2023_Q3_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2023 Q3 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2023_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2023_Q3_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2023 Q2\n# Create a directory to store PNG frames\nif (!dir.exists(\"2023_Q2_frames\")) {\n  dir.create(\"2023_Q2_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q2_2023_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q2_2023_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2023_Q2_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2023 Q2 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2023_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2023_Q2_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2023 Q1\n# Create a directory to store PNG frames\nif (!dir.exists(\"2023_Q1_frames\")) {\n  dir.create(\"2023_Q1_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q1_2023_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q1_2023_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2023_Q1_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2023 Q1 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2023_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2023_Q1_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2022 Q4\n# Create a directory to store PNG frames\nif (!dir.exists(\"2022_Q4_frames\")) {\n  dir.create(\"2022_Q4_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q4_2022_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q4_2022_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2022_Q4_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2022 Q4 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2022_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2022_Q4_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2022 Q3\n# Create a directory to store PNG frames\nif (!dir.exists(\"2022_Q3_frames\")) {\n  dir.create(\"2022_Q3_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q3_2022_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q3_2022_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2022_Q3_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2022 Q3 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2022_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2022_Q3_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2022 Q2\n# Create a directory to store PNG frames\nif (!dir.exists(\"2022_Q2_frames\")) {\n  dir.create(\"2022_Q2_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q2_2022_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q2_2022_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2022_Q2_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2022 Q2 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2022_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2022_Q2_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2022 Q1\n# Create a directory to store PNG frames\nif (!dir.exists(\"2022_Q1_frames\")) {\n  dir.create(\"2022_Q1_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q1_2022_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q1_2022_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2022_Q1_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2022 Q1 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2022_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2022_Q1_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2021 Q4\n# Create a directory to store PNG frames\nif (!dir.exists(\"2021_Q4_frames\")) {\n  dir.create(\"2021_Q4_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q4_2021_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q4_2021_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2021_Q4_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2021 Q4 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2021_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2021_Q4_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2021 Q3\n# Create a directory to store PNG frames\nif (!dir.exists(\"2021_Q3_frames\")) {\n  dir.create(\"2021_Q3_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q3_2021_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q3_2021_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2021_Q3_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2021 Q3 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2021_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2021_Q3_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2021 Q2\n# Create a directory to store PNG frames\nif (!dir.exists(\"2021_Q2_frames\")) {\n  dir.create(\"2021_Q2_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q2_2021_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q2_2021_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2021_Q2_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2021 Q2 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2021_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2021_Q2_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2021 Q1\n# Create a directory to store PNG frames\nif (!dir.exists(\"2021_Q1_frames\")) {\n  dir.create(\"2021_Q1_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q1_2021_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q1_2021_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"2021_Q1_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2022 Q1 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"2021_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"2021_Q1_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\nLet’s plot our animated spatio-temporal KDE outputs now.\n\nlibrary(spatstat)\nlibrary(magick)\nlibrary(viridis)\n\n# 2024 Q2\nframes &lt;- image_read(list.files(\"2024_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n# 2024 Q1\nframes &lt;- image_read(list.files(\"2024_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\n\n\n\n# 2023 Q4\nframes &lt;- image_read(list.files(\"2023_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n# 2023 Q3\nframes &lt;- image_read(list.files(\"2023_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n# 2023 Q2\nframes &lt;- image_read(list.files(\"2023_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n# 2023 Q1\nframes &lt;- image_read(list.files(\"2023_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\nObservations\n\n\n\n\n\n\n\n# 2022 Q4\nframes &lt;- image_read(list.files(\"2022_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n# 2022 Q3\nframes &lt;- image_read(list.files(\"2022_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n# 2022 Q2\nframes &lt;- image_read(list.files(\"2022_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n# 2022 Q1\nframes &lt;- image_read(list.files(\"2022_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\nObservations\n\n\n\n\n\n\n\n# 2021 Q4\nframes &lt;- image_read(list.files(\"2021_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n# 2021 Q3\nframes &lt;- image_read(list.files(\"2021_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n# 2021 Q2\nframes &lt;- image_read(list.files(\"2021_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n# 2021 Q1\nframes &lt;- image_read(list.files(\"2021_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\nObservations"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#references",
    "href": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#references",
    "title": "Take-home Exercise 1",
    "section": "References",
    "text": "References\nCrawley, M. J. (2007). The R Book. Wiley.\nThe Stata Journal. (2003). Adaptive kernel density estimation. Sage Journals. https://journals.sagepub.com/doi/pdf/10.1177/1536867X0300300204"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#spatio-temporal-kde",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#spatio-temporal-kde",
    "title": "Take-home Exercise 1",
    "section": "7. Spatio-Temporal KDE",
    "text": "7. Spatio-Temporal KDE\nWe focus on the continuous time"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "In-class Exercise"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#install-required-libraries",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#install-required-libraries",
    "title": "In-class Exercise 5",
    "section": "1.1 Install Required Libraries",
    "text": "1.1 Install Required Libraries\nWe will first want to install the GWModel package from CRAN\n\ninstall.packages(\"GWmodel\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#importing-libraries-into-r",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#importing-libraries-into-r",
    "title": "In-class Exercise 5",
    "section": "1.2 Importing Libraries into R",
    "text": "1.2 Importing Libraries into R\nIn this in-class exercise, sf, spdep, tmap, tidyverse, knitr and GWmodel will be used.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#preparing-the-datasets",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#preparing-the-datasets",
    "title": "In-class Exercise 5",
    "section": "1.3 Preparing the Datasets",
    "text": "1.3 Preparing the Datasets\nI will be using the Hunan dataset used in the Hands-on Exercise 5 spatial weights and applications.\n\n1.3.1 Importing Geospatial Data\nFirstly, we will import the Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format. The code chunk below uses st_read() of sf package.\n\nhunan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n1.3.2 Importing Aspatial Data\nNext, I will import the aspatial data set. This data is a csv file containing selected Hunan’s local development indicators in 2012.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n1.3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan_sf &lt;- left_join(hunan_sf, hunan2012) %&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#mapping-gdppc",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#mapping-gdppc",
    "title": "In-class Exercise 5",
    "section": "2. Mapping GDPPC",
    "text": "2. Mapping GDPPC\nNow, we will use qtm() function of tmap package to create a basemap and a choropleth map showing the distribution of GDPPC 2012.\n\nbasemap &lt;- tm_shape(hunan_sf) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan_sf, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#determine-adaptive-bandwidth",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#determine-adaptive-bandwidth",
    "title": "In-class Exercise 5",
    "section": "4.1 Determine adaptive bandwidth",
    "text": "4.1 Determine adaptive bandwidth\n\n1) Using Cross-Validation\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp,\n             approach = \"CV\",\n             adaptive = TRUE, \n             kernel = \"bisquare\", \n             longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\n\n2) Using AIC\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp,\n             approach =\"AIC\",\n             adaptive = TRUE, \n             kernel = \"bisquare\", \n             longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#computing-geographically-wieghted-summary-statistics",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#computing-geographically-wieghted-summary-statistics",
    "title": "In-class Exercise 5",
    "section": "4.2 Computing geographically wieghted summary statistics",
    "text": "4.2 Computing geographically wieghted summary statistics\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#preparing-the-output-data",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#preparing-the-output-data",
    "title": "In-class Exercise 5",
    "section": "4.3 Preparing the output data",
    "text": "4.3 Preparing the output data\nCode chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using as.data.frame().\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\nNext, cbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.\n\nhunan_gstat &lt;- cbind(hunan_sf, gwstat_df)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#visualising-geographically-weighted-summary-statistics",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#visualising-geographically-weighted-summary-statistics",
    "title": "In-class Exercise 5",
    "section": "4.4 Visualising geographically weighted summary statistics",
    "text": "4.4 Visualising geographically weighted summary statistics\n\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically weightted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.text.size = 1,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#determine-fixed-bandwidth",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#determine-fixed-bandwidth",
    "title": "In-class Exercise 5",
    "section": "5.1 Determine fixed bandwidth",
    "text": "5.1 Determine fixed bandwidth\n\n5.1.1 Cross-Validation\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp,\n             approach = \"CV\",\n             adaptive = FALSE, \n             kernel = \"bisquare\", \n             longlat = T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\n\n\n5.1.2 AIC\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp,\n             approach =\"AIC\",\n             adaptive = FALSE, \n             kernel = \"bisquare\", \n             longlat = T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#computing-fixed-bandwidth",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#computing-fixed-bandwidth",
    "title": "In-class Exercise 5",
    "section": "5.2 Computing Fixed Bandwidth",
    "text": "5.2 Computing Fixed Bandwidth\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = FALSE,\n               longlat = T)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#preparing-the-output-data-1",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#preparing-the-output-data-1",
    "title": "In-class Exercise 5",
    "section": "5.3 Preparing the output data",
    "text": "5.3 Preparing the output data\nCode chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using as.data.frame().\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\nNext, cbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.\n\nhunan_gstat &lt;- cbind(hunan_sf, gwstat_df)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#visualising-geographically-weighted-summary-statistics-1",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#visualising-geographically-weighted-summary-statistics-1",
    "title": "In-class Exercise 5",
    "section": "5.4 Visualising geographically weighted summary statistics",
    "text": "5.4 Visualising geographically weighted summary statistics\n\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically weightted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.text.size = 1,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#computing-geographically-weightted-summary-statistics",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#computing-geographically-weightted-summary-statistics",
    "title": "In-class Exercise 5",
    "section": "4.2 Computing geographically weightted summary statistics",
    "text": "4.2 Computing geographically weightted summary statistics\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#my-reflection",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#my-reflection",
    "title": "Take-home Exercise 1",
    "section": "9. My Reflection",
    "text": "9. My Reflection\nThis Take-Home Exercise 1 had greatly stretched my learnings and provided me the opportunity to apply spatial and spatio-temporal point pattern analysis on a real-world dataset.\nA key takeaway from Myanmar’s humanitarian conflict is how complex the interplay of ethnic, political, and religious struggles has been and continues to be an on-going humanitarian crisis, involving the military, ethnic armed groups, political militias, and civilians.\nMy analysis has shown that central and southern states (notably, Sagaing, Mandalay, Magway and Yangon) have experienced intense clashes between state forces and politica/identity militias, while northern Myanmar sees high conflict levels between rebels and political militias.\n&lt;INSERT TEMPORAL ANALYSIS&gt;\nRunning computationally intensive codes such as envelope() for 2nd order spatial analysis may differ in processing speed from one student to another. My system, however, is running with 8 cores and it does take a lengthy amount of time for processing the large 40,000+ rows of conflict data. (1 simulation takes around 2 minutes to run). Hence, I would suggest other students to begin their take-home exercise as early as possible to provide buffer time for processing the data, handling code bugs and even data cleaning errors."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this hands-on exercise, I will compute the global and local measures of spatial autocorrelation by using spdep package. These are the goals of this exercise:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics.\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#overview",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this hands-on exercise, I will compute the global and local measures of spatial autocorrelation by using spdep package. These are the goals of this exercise:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics.\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#getting-started",
    "title": "Hands-on Exercise 6",
    "section": "2. Getting Started",
    "text": "2. Getting Started\n\n2.1 The Analytical Question\nIn this case study, we will examine the spatial pattern of GDP per capita of Hunan Provice, People Republic of China by answering the questions:\n\nIs it evenly distributed spatially? (obviously no)\nIs there sign of spatial clustering?\nWhere are the clusters?\n\n\n\n2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n2.3 Setting the Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#data-preprocessing",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#data-preprocessing",
    "title": "Hands-on Exercise 6",
    "section": "3. Data Preprocessing",
    "text": "3. Data Preprocessing\n\n3.1 Import the data\n\n\n\n\n\n\n\n\n3.2 Performing relational join\nNow we need to update the attribute table of hunan’s SpatialPolygonDataFrame with the attribute fields of hunan2012 dataframe using leftjoin().\n\nhunan &lt;- left_join(hunan,hunan2012) |&gt;\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\n3.3 Visualizing regional development factor\nusing qtm(), we can prepare a basemap and a choropleth map showing the distribution of GDPPC 2012.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#global-measures-of-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#global-measures-of-spatial-autocorrelation",
    "title": "Hands-on Exercise 6",
    "section": "4. Global Measures of Spatial Autocorrelation",
    "text": "4. Global Measures of Spatial Autocorrelation\n\n4.1 Computing contiguity spatial weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n💡 Observations: The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n\n4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\nWhile this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n💡 What can we learn from the code chunk above?\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "Hands-on Exercise 6",
    "section": "5. Global Measures of Spatial Autocorrelation: Moran’s I",
    "text": "5. Global Measures of Spatial Autocorrelation: Moran’s I\n\n5.1 Moran’s I test\nIn this section, you will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nFrom the result above, we can claim that there is a positive spatial autocorrelation since we have extremely low p-value of 1.095e-06 and positive Moran I statistic of 0.300749970. We can expect a Moran I statistic of -0.011494253 if there is no spatial autocorrelation. We can tell that there is spatial clustering from this test.\n\n\n5.2 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nGiven that our observed statistic has a rank of 1000, this observation possesses the highest Moran I value among the 999 randomly simulated observations. This further justifies our previous claim\n\n\n5.3 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\nWe can also plot the histogram using ggplot2 package.\n\nggplot() +\n  geom_histogram(aes(bperm$res), color = 'black',fill = 'lightgray') +\n  geom_vline(aes(xintercept = mean(bperm$res)), color = 'red') +\n  xlab(\"Simulated Moran's I\") +\n  ylab(\"Frequency\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "title": "Hands-on Exercise 6",
    "section": "6. Global Measures of Spatial Autocorrelation: Geary’s C",
    "text": "6. Global Measures of Spatial Autocorrelation: Geary’s C\n\n6.1 Geary’c C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n💡 Observations: From the result of the test above, we can see that the high Geary C statistic , low p-value, and Geary C statistic that is lower than the expectation. Hence, we can claim that spatial autocorrelation exists.\n\n\n\n6.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nGiven that our observed statistic has a rank of 1, this observation possesses the lowest Geary’s C value among the 999 randomly simulated observations. This further justifies our previous claim\n\n\n6.3 Visualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\n\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#spatial-correlogram",
    "title": "Hands-on Exercise 6",
    "section": "7. Spatial Correlogram",
    "text": "7. Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated pairs are from spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n7.1 Moran’s I\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n7.2 Geary’s C\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#local-measures-of-spatial-association-lisa",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#local-measures-of-spatial-association-lisa",
    "title": "Hands-on Exercise 6",
    "section": "8. Local Measures of Spatial Association (LISA)",
    "text": "8. Local Measures of Spatial Association (LISA)\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, I will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n8.1 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n\n8.2 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) |&gt;\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n8.3 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n8.4 Mapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n8.5 Mapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 6",
    "section": "9. Creating a LISA Cluster Map",
    "text": "9. Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n9.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n9.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector\n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\n9.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\n9.4 Plotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 6",
    "section": "10. Hot Spot and Cold Spot Area Analysis",
    "text": "10. Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n10.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n10.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n10.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n10.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n10.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\n10.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#computing-gi-statistics",
    "title": "Hands-on Exercise 6",
    "section": "11. Computing Gi statistics",
    "text": "11. Computing Gi statistics\n\n11.1 Gi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) |&gt;\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n11.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n11.3 Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) |&gt;\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n11.4 Mapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#st-order-spatio-temporal-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#st-order-spatio-temporal-point-pattern-analysis",
    "title": "Take-home Exercise 1",
    "section": "7. 1st Order Spatio-Temporal Point Pattern Analysis",
    "text": "7. 1st Order Spatio-Temporal Point Pattern Analysis\n\n\nSet up DayofYear variable per quarter\nQ2_2024 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2024 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2024 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2024 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\n\n\n7.1 Creating ppp object\nIn the code chunk below, DayofYear from the fire_sf data frame is selected and is included in the output ppp object.\n\n\nCreate ppp object per quarter\nQ2_2024_ppp &lt;- Q2_2024 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2024_ppp &lt;- Q1_2024 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2023_ppp &lt;- Q4_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2023_ppp &lt;- Q3_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2023_ppp &lt;- Q2_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2023_ppp &lt;- Q1_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2022_ppp &lt;- Q4_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2022_ppp &lt;- Q3_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2022_ppp &lt;- Q2_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2022_ppp &lt;- Q1_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2021_ppp &lt;- Q4_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2021_ppp &lt;- Q3_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2021_ppp &lt;- Q2_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2021_ppp &lt;- Q1_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\n\n\n\n7.2 Combining ppp with owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\n\nMask the ppp object with owin object\nQ2_2024_owin &lt;- Q2_2024_ppp[myanmar_owin]\n\nQ1_2024_owin &lt;- Q1_2024_ppp[myanmar_owin]\n\nQ4_2023_owin &lt;- Q4_2023_ppp[myanmar_owin]\n\nQ3_2023_owin &lt;- Q3_2023_ppp[myanmar_owin]\n\nQ2_2023_owin &lt;- Q2_2023_ppp[myanmar_owin]\n\nQ1_2023_owin &lt;- Q1_2023_ppp[myanmar_owin]\n\nQ4_2022_owin &lt;- Q4_2022_ppp[myanmar_owin]\n\nQ3_2022_owin &lt;- Q3_2022_ppp[myanmar_owin]\n\nQ2_2022_owin &lt;- Q2_2022_ppp[myanmar_owin]\n\nQ1_2022_owin &lt;- Q1_2022_ppp[myanmar_owin]\n\nQ4_2021_owin &lt;- Q4_2021_ppp[myanmar_owin]\n\nQ3_2021_owin &lt;- Q3_2021_ppp[myanmar_owin]\n\nQ2_2021_owin &lt;- Q2_2021_ppp[myanmar_owin]\n\nQ1_2021_owin &lt;- Q1_2021_ppp[myanmar_owin]\n\n\nNow, I will perform a spatio-temporal kernel density estimate on the owin object which gives us insights into where and when conflict event occurrences are concentrated within the specified observation window.\n\n\nPerform spatial temporal KDE per quarter\nQ2_2024_stkde &lt;- spattemp.density(Q2_2024_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ1_2024_stkde &lt;- spattemp.density(Q1_2024_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ4_2023_stkde &lt;- spattemp.density(Q4_2023_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ3_2023_stkde &lt;- spattemp.density(Q3_2023_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ2_2023_stkde &lt;- spattemp.density(Q2_2023_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ1_2023_stkde &lt;- spattemp.density(Q1_2023_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ4_2022_stkde &lt;- spattemp.density(Q4_2022_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ3_2022_stkde &lt;- spattemp.density(Q3_2022_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ2_2022_stkde &lt;- spattemp.density(Q2_2022_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ1_2022_stkde &lt;- spattemp.density(Q1_2022_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ4_2021_stkde &lt;- spattemp.density(Q4_2021_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ3_2021_stkde &lt;- spattemp.density(Q3_2021_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ2_2021_stkde &lt;- spattemp.density(Q2_2021_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ1_2021_stkde &lt;- spattemp.density(Q1_2021_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n\n\nSTKDE of 2024 Q2\n# Load necessary libraries\nlibrary(spatstat)\nlibrary(magick)\nlibrary(viridis)\n\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2024_Q2_frames\")) {\n  dir.create(\"STKDE/2024_Q2_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q2_2024_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q2_2024_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2024_Q2_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2024 Q2 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2024_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2024_Q2_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2024 Q1\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2024_Q1_frames\")) {\n  dir.create(\"STKDE/2024_Q1_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q1_2024_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q1_2024_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2024_Q1_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2024 Q1 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2024_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2024_Q1_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2023 Q4\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2023_Q4_frames\")) {\n  dir.create(\"STKDE/2023_Q4_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q4_2023_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q4_2023_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2023_Q4_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2023 Q4 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2023_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2023_Q4_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2023 Q3\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2023_Q3_frames\")) {\n  dir.create(\"STKDE/2023_Q3_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q3_2023_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q3_2023_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2023_Q3_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2023 Q3 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2023_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2023_Q3_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2023 Q2\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2023_Q2_frames\")) {\n  dir.create(\"STKDE/2023_Q2_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q2_2023_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q2_2023_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2023_Q2_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2023 Q2 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2023_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2023_Q2_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2023 Q1\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2023_Q1_frames\")) {\n  dir.create(\"STKDE/2023_Q1_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q1_2023_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q1_2023_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2023_Q1_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2023 Q1 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2023_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2023_Q1_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2022 Q4\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2022_Q4_frames\")) {\n  dir.create(\"STKDE/2022_Q4_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q4_2022_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q4_2022_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2022_Q4_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2022 Q4 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2022_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2022_Q4_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2022 Q3\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2022_Q3_frames\")) {\n  dir.create(\"STKDE/2022_Q3_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q3_2022_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q3_2022_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2022_Q3_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2022 Q3 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2022_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2022_Q3_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2022 Q2\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2022_Q2_frames\")) {\n  dir.create(\"STKDE/2022_Q2_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q2_2022_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q2_2022_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2022_Q2_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2022 Q2 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2022_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2022_Q2_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2022 Q1\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2022_Q1_frames\")) {\n  dir.create(\"STKDE/2022_Q1_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q1_2022_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q1_2022_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2022_Q1_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2022 Q1 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2022_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2022_Q1_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2021 Q4\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2021_Q4_frames\")) {\n  dir.create(\"STKDE/2021_Q4_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q4_2021_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q4_2021_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2021_Q4_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2021 Q4 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2021_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2021_Q4_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2021 Q3\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2021_Q3_frames\")) {\n  dir.create(\"STKDE/2021_Q3_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q3_2021_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q3_2021_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2021_Q3_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2021 Q3 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2021_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2021_Q3_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2021 Q2\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2021_Q2_frames\")) {\n  dir.create(\"STKDE/2021_Q2_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q2_2021_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q2_2021_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2021_Q2_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2021 Q2 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2021_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2021_Q2_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\nSTKDE of 2021 Q1\n# Create a directory to store PNG frames\nif (!dir.exists(\"STKDE/2021_Q1_frames\")) {\n  dir.create(\"STKDE/2021_Q1_frames\")\n}\n\n# Get the unique day values\ndays &lt;- names(Q1_2021_stkde$z)\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result &lt;- Q1_2021_stkde$z[[day]]\n  \n  # Create PNG filename\n  png_filename &lt;- file.path(\"STKDE/2021_Q1_frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"2022 Q1 - Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"STKDE/2021_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10)\noutput_path &lt;- \"STKDE/2021_Q1_stkde.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\n7.3 Plotting STKDE Outputs\nLet’s plot our animated spatio-temporal KDE outputs for each quarter.\n\n7.3.1 2024 Q1-2 STKDE\n\nlibrary(spatstat)\nlibrary(magick)\nlibrary(viridis)\n\n# 2024 Q2\nframes &lt;- image_read(list.files(\"STKDE/2024_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n# 2024 Q1\nframes &lt;- image_read(list.files(\"STKDE/2024_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nAt the start of 2024 Q1, we see that the kernel density estimate of Myanmar conflicts tend to move sporadically where there are no specific patterns but in 2024 Q2, we start seeing conflict events occurring more intensely in Central and Southern Myanmar.\n\n\n\n\n7.3.2 2023 Q1-Q4 STKDE\n\n# 2023 Q4\nframes &lt;- image_read(list.files(\"STKDE/2023_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n# 2023 Q3\nframes &lt;- image_read(list.files(\"STKDE/2023_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n# 2023 Q2\nframes &lt;- image_read(list.files(\"STKDE/2023_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n# 2023 Q1\nframes &lt;- image_read(list.files(\"STKDE/2023_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFrom 2023 Q1 to Q3, there is a noticeable cluster of conflict events happening in Central and Southern regions of Myanmar than the other parts of the country. In 2023 Q4, we can notice more dispersion in conflict events across Myanmar, spreading into Western and Eastern regions. Throughout 2023, conflict events are least observed in North Myanmar.\n\n\n\n\n7.3.3 2022 Q1-Q4 STKDE\n\n# 2022 Q4\nframes &lt;- image_read(list.files(\"STKDE/2022_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n# 2022 Q3\nframes &lt;- image_read(list.files(\"STKDE/2022_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n# 2022 Q2\nframes &lt;- image_read(list.files(\"STKDE/2022_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n# 2022 Q1\nframes &lt;- image_read(list.files(\"STKDE/2022_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nSimilar to 2023, the spread of conflict events in 2022 is largely clustered in Central and Southen parts of Myanmar. However, we do see some jitters in conflict trends in 2022 Q1 with a rare sight of conflicts in the far North of Myanmar and occasional conflicts in Southern Myanmar.\n\n\n\n\n7.3.4 2021 Q1-Q4 STKDE\n\n# 2021 Q4\nframes &lt;- image_read(list.files(\"STKDE/2021_Q4_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n# 2021 Q3\nframes &lt;- image_read(list.files(\"STKDE/2021_Q3_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n# 2021 Q2\nframes &lt;- image_read(list.files(\"STKDE/2021_Q2_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n# 2021 Q1\nframes &lt;- image_read(list.files(\"STKDE/2021_Q1_frames\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 10) \nanimation\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFinally, armed conflicts in 2021 is by far the most random spread of armed conflicts throughout Myanmar. There is also a high intensity of conflicts in South Myanmar, particularly in the state of Yangon while we rarely see conflicts occurring in the extreme North of Myanmar.\n\n\n\n\n7.3.5 OpenStreetMap in Myanmar - Spatio Temporal\nUPDATE THIS USING THE APPROPRIATE QUARTER AND YEAR\n\nQ2_2024_owin &lt;- rescale(Q2_2024_owin, 1000, \"km\")\nQ2_2024_stkde &lt;- density(Q2_2024_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q2_2024_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ1_2024_owin &lt;- rescale(Q1_2024_owin, 1000, \"km\")\nQ1_2024_stkde &lt;- density(Q1_2024_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q1_2024_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ4_2023_owin &lt;- rescale(Q4_2023_owin, 1000, \"km\")\nQ4_2023_stkde &lt;- density(Q4_2023_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q4_2023_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ3_2023_owin &lt;- rescale(Q3_2023_owin, 1000, \"km\")\nQ3_2023_stkde &lt;- density(Q3_2023_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q3_2023_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ2_2023_owin &lt;- rescale(Q2_2023_owin, 1000, \"km\")\nQ2_2023_stkde &lt;- density(Q2_2023_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q2_2023_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ1_2023_owin &lt;- rescale(Q1_2023_owin, 1000, \"km\")\nQ1_2023_stkde &lt;- density(Q1_2023_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q1_2023_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ4_2022_owin &lt;- rescale(Q4_2022_owin, 1000, \"km\")\nQ4_2022_stkde &lt;- density(Q4_2022_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q4_2022_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ3_2022_owin &lt;- rescale(Q3_2022_owin, 1000, \"km\")\nQ3_2022_stkde &lt;- density(Q3_2022_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q3_2022_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ2_2022_owin &lt;- rescale(Q2_2022_owin, 1000, \"km\")\nQ2_2022_stkde &lt;- density(Q2_2022_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q2_2022_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ1_2022_owin &lt;- rescale(Q1_2022_owin, 1000, \"km\")\nQ1_2022_stkde &lt;- density(Q1_2022_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q1_2022_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ4_2021_owin &lt;- rescale(Q4_2021_owin, 1000, \"km\")\nQ4_2021_stkde &lt;- density(Q4_2021_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q4_2021_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ3_2021_owin &lt;- rescale(Q3_2021_owin, 1000, \"km\")\nQ3_2021_stkde &lt;- density(Q3_2021_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q3_2021_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ2_2021_owin &lt;- rescale(Q2_2021_owin, 1000, \"km\")\nQ2_2021_stkde &lt;- density(Q2_2021_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q2_2021_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\nQ1_2021_owin &lt;- rescale(Q1_2021_owin, 1000, \"km\")\nQ1_2021_stkde &lt;- density(Q1_2021_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nWarning in density.ppp(Q1_2021_owin, sigma = bw.CvL, edge = TRUE, kernel =\n\"quartic\"): Bandwidth selection will be based on Gaussian kernel\n\n\n\n\nSet up raster and projection\nraster_Q2_2024 &lt;- raster(Q2_2024_stkde)\nraster_Q1_2024 &lt;- raster(Q1_2024_stkde)\nraster_Q4_2023 &lt;- raster(Q4_2023_stkde)\nraster_Q3_2023 &lt;- raster(Q3_2023_stkde)\nraster_Q2_2023 &lt;- raster(Q2_2023_stkde)\nraster_Q1_2023 &lt;- raster(Q1_2023_stkde)\nraster_Q4_2022 &lt;- raster(Q4_2022_stkde)\nraster_Q3_2022 &lt;- raster(Q3_2022_stkde)\nraster_Q2_2022 &lt;- raster(Q2_2022_stkde)\nraster_Q1_2022 &lt;- raster(Q1_2022_stkde)\nraster_Q4_2021 &lt;- raster(Q4_2021_stkde)\nraster_Q3_2021 &lt;- raster(Q3_2021_stkde)\nraster_Q2_2021 &lt;- raster(Q2_2021_stkde)\nraster_Q1_2021 &lt;- raster(Q1_2021_stkde)\nprojection(raster_Q2_2024) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q1_2024) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q4_2023) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q3_2023) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q2_2023) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q1_2023) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q4_2022) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q3_2022) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q2_2022) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q1_2022) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q4_2021) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q3_2021) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q2_2021) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q1_2021) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\n\n\n\n# Plot KDE Map on OpenStreetMap\nraster_quarters &lt;- list('raster_Q2_2024','raster_Q1_2024','raster_Q4_2023','raster_Q3_2023','raster_Q1_2023','raster_Q4_2022','raster_Q3_2022','raster_Q2_2022','raster_Q1_2022','raster_Q4_2021','raster_Q3_2021','raster_Q2_2021','raster_Q1_2021')\n\n# Set tmap mode to view\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\n# Function to create tmap for each raster\ncreate_tmap &lt;- function(raster_var) {\n  kde_fixed_output &lt;- tm_basemap(server = \"OpenStreetMap.HOT\") +\n    tm_basemap(server = \"Esri.WorldImagery\") +\n    tm_shape(get(raster_var)) +  # Dynamically get the raster variable\n    tm_raster(\"layer\",\n              n = 10,\n              title = paste(raster_var),\n              alpha = 0.6,\n              palette = c(\"#fafac3\",\"#fd953b\",\"#f02a75\",\"#b62385\",\"#021c9e\")) +\n    tm_shape(boundary_sf) +\n    tm_polygons(alpha=0.1, id=\"DT\") +\n    tmap_options(check.and.fix = TRUE)\n  \n  return(kde_fixed_output)\n}\n\n# Create a list of tmap objects by iterating over the raster_quarters list\ntmap_list &lt;- lapply(raster_quarters, create_tmap)\n\n# Arrange and display the tmaps\ntmap_arrange(tmap_list, ncol = 2, nrow = 2, sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#nd-order-spatio-temporal-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Spatio-temporal_Ex1.html#nd-order-spatio-temporal-point-pattern-analysis",
    "title": "Take-home Exercise 1",
    "section": "8. 2nd Order Spatio-Temporal Point Pattern Analysis",
    "text": "8. 2nd Order Spatio-Temporal Point Pattern Analysis\nSimilar to the 2nd order spatial analysis in section 6, I want to explore spatio-temporal trends of Myanmar’s conflicts and how the events differ in distribution, from quarter to quarter. I’ll delve into the four districts I’m most interested in, that is the districts with the highest proportions of conflicts - Yinmarbin, Shwebo, Pakokku and Mandalay.\n\n8.1 Using K-Function Estimation\n\n8.1.1 Yinmarbin District\nWe’ll want to compute the K-Function by quarters via Kest() by iterating over each unique quarter in date format, then plotting an animated graph of the K-Function outputs per quarter.\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Yinmarbin District\n# Set up yinmarbin_ppp_owin_list\nconflict_yinmarbin &lt;- conflict_data_sf %&gt;% filter(DT == \"Yinmarbin\")\nunique_quarter &lt;- unique(conflict_yinmarbin$year_quarter)\nboundary_yinmarbin &lt;- filter(boundary_sf, DT == \"Yinmarbin\")\nyinmarbin_owin &lt;- as.owin(boundary_yinmarbin)\nyinmarbin_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_yinmarbin %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[yinmarbin_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  yinmarbin_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\nPlot K-function for Yinmarbin District\nlibrary(magick)\n\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_k_function\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n  K_result &lt;- Kest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_k_function/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_k_function/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_k_function/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"sec_order_k_function/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nWe can observe how the observed line (K-iso) is constantly above the actual line (K-pois) from 2021 Q2 to 2024 Q2. This confirms that conflict points in Yinmarbin are highly clustered. In fact, it is more clustered together than expected by the null hypothesis. There is no K-function outputted for 2021 Q1 as no conflict points were observed in Yinmarbin District for that time period.\n\n\n\n\n\n\n\n\nNote\n\n\n\nRipley’s Correction provides a way to mitigate the bias introduced by points near the edge of the study window by accounting for the reduced area for point comparisons near the edges. Hence, this results in a a more accurate estimate of the spatial distribution as seen in the slight difference between actual and expected K-function.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of conflict events in Myanmar are randomly distributed.\nH1= The distribution of conflict events in Myanmar are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nBy using envelop(), we can get a more robust interpretation by comparing the observed K-function against a simulation envelope of K-functions generated under the null hypothesis.\n\n\nMonta Carlo Simulation for Yinmarbin District\nlibrary(magick)\n\n# Unique quarters of the year in the dataset\nunique_quarter &lt;- unique(conflict_yinmarbin$year_quarter)\n\n# Create a directory to store PNG frames\npath &lt;- file.path(\"k_function_monta_carlo\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n  \n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"k_function_monta_carlo/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"k_function_monta_carlo/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"k_function_monta_carlo/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"k_function_monta_carlo/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nI noticed that the observed line(in solid) has a somewhat substantial deviation above the upper envelop (shaded region) generated from the Monte Carlo simulation. This indicates a strong tendancy for points to be clustered in the Yinmarbin district. Since this occurs across a wide range of distances, it implies that clustering is a prominent feature of the spatial distribution.\n\n\n\n\n8.1.2 Shwebo District\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Shwebo District\n# Set up shwebo_ppp_owin_list\nconflict_shwebo &lt;- conflict_data_sf %&gt;% filter(DT == \"Shwebo\")\nunique_quarter &lt;- unique(conflict_shwebo$year_quarter)\nboundary_shwebo &lt;- filter(boundary_sf, DT == \"Shwebo\")\nshwebo_owin &lt;- as.owin(boundary_shwebo)\nshwebo_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_shwebo %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[shwebo_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  shwebo_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\nPlot K-function for Shwebo District\nlibrary(magick)\n\n# Unique quarters of the year in the dataset\nunique_quarter &lt;- unique(conflict_shwebo$year_quarter)\n\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_k_function\", \"conflict_shwebo\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(shwebo_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- shwebo_ppp_owin_list[[quarter]]\n  \n  # Calculate the K-function\n  K_result &lt;- Kest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_k_function/conflict_shwebo\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Shwebo District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_k_function/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_k_function/kfunction_shwebo.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"sec_order_k_function/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFor the Shwebo District, the observed line (K-iso) also lies constantly above the actual line (K-pois) from 2021 Q2 to 2024 Q2, indicating clustering at all distances ‘r’ of our spatial points. Interestingly, conflict events in 2021 Q1 displayed some tendancy towards a dispersed point pattern as the observedK-function lies slightly below the actual line at a distance of 17km.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted.\n\n\nMonta Carlo Simulation for Shwebo District\n# Create a directory to store PNG frames\npath &lt;- file.path(\"k_function_monta_carlo\", \"conflict_shwebo\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(shwebo_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- shwebo_ppp_owin_list[[quarter]]\n\n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"k_function_monta_carlo/conflict_shwebo\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Shwebo District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"k_function_monta_carlo/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"k_function_monta_carlo/kfunction_shwebo.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"k_function_monta_carlo/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nIn 2021 Q1, a sharp jagged plot is generated due to the smaller dataset size of conflicts in Shwebo. In 2024 Q2, we see the highest variability in spatial patterns which results in a larger envelope size\nGenerally, the observed line has a smaller deviation above the upper envelop than in the Yinmarbin data. This indicates a a somewhat intense level of clustering in the Shwebo district and remains more clustered than would be expected if points were distributed randomly..\n\n\n\n\n8.1.3 Pakokku District\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Pakokku District\n# Set up pakokku_ppp_owin_list\nconflict_pakokku &lt;- conflict_data_sf %&gt;% filter(DT == \"Pakokku\")\nunique_quarter &lt;- unique(conflict_pakokku$year_quarter)\nboundary_pakokku &lt;- filter(boundary_sf, DT == \"Pakokku\")\npakokku_owin &lt;- as.owin(boundary_pakokku)\npakokku_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_pakokku %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[pakokku_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  pakokku_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\nPlot K-function for Pakokku District\nlibrary(magick)\n\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_k_function\", \"conflict_pakokku\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(pakokku_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- pakokku_ppp_owin_list[[quarter]]\n  K_result &lt;- Kest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_k_function/conflict_pakokku\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Pakokku District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_k_function/conflict_pakokku\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_k_function/kfunction_pakokku.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"sec_order_k_function/conflict_pakokku\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe observed K-function lies above the expected K-function outputted from 2021 to 2024, indicating clustering at all distances ‘r’ of our spatial points. However, we can observe milder clustering from 2021 Q4 to 2024 Q2 as the magnitude of deviation is significantly smaller than the period of 2021 Q1 to 2021 Q3.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of conflict events in Myanmar are randomly distributed.\nH1= The distribution of conflict events in Myanmar are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\n\n\nMonta Carlo Simulation for Pakokku District\n# Create a directory to store PNG frames\npath &lt;- file.path(\"k_function_monta_carlo\", \"conflict_pakokku\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(pakokku_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- pakokku_ppp_owin_list[[quarter]]\n  \n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"k_function_monta_carlo/conflict_pakokku\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Pakokku District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"k_function_monta_carlo/conflict_pakokku\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"k_function_monta_carlo/kfunction_pakokku.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"k_function_monta_carlo/conflict_pakokku\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nIn 2021 Q2, we see a large envelope which reflects greater variability in the expected K-function and this could stem from the mix of both clustering and dispersion across Myanmar for that period. Generally from 2021 Q1 to 2024 Q2, clustering is evident as the observed K-function continues to lie above the envelope.\n\n\n\n\n8.1.4 Mandalay District\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Mandalay District\n# Set up mandalay_ppp_owin_list\nconflict_mandalay &lt;- conflict_data_sf %&gt;% filter(DT == \"Mandalay\")\nunique_quarter &lt;- unique(conflict_mandalay$year_quarter)\nboundary_mandalay &lt;- filter(boundary_sf, DT == \"Mandalay\")\nmandalay_owin &lt;- as.owin(boundary_mandalay)\nmandalay_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_mandalay %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[mandalay_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  mandalay_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\nPlot K-function for Mandalay District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_k_function\", \"conflict_mandalay\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(mandalay_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- mandalay_ppp_owin_list[[quarter]]\n  \n  # Calculate the K-function\n  K_result &lt;- Kest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_k_function/conflict_mandalay\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Mandalay District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_k_function/conflict_mandalay\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_k_function/kfunction_mandalay.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"sec_order_k_function/conflict_mandalay\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe degree of clustering is less pronounced in Mandalay than the other districts since the gap between the observed line and the theoretical line is smaller. Clustering is large-scale in Mandalay where statistically significant clustering patterns are seen in larger distance ranges.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted.\n\n\nMonta Carlo Simulation for Mandalay District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"k_function_monta_carlo\", \"conflict_mandalay\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(mandalay_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- mandalay_ppp_owin_list[[quarter]]\n\n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"k_function_monta_carlo/conflict_mandalay\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Mandalay District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"k_function_monta_carlo/conflict_mandalay\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"k_function_monta_carlo/kfunction_mandalay.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"k_function_monta_carlo/conflict_mandalay\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nWe see the highest variability in spatial patterns in 2024 Q1 and Q2 which indicates that some areas in Mandalay District are more clustered with conflict events while other areas are more evenly spaced.\nWe can confirm statistically significant clustering from 2021 Q1 to 2023 Q3 as K value is larger than the upper confidence of the envelope than in 2024 Q1 and Q2. There is also strong evidence of clustering especially at larger distances which means Mandalay District faces large-scale clustering.\n\n\n\n\n\n8.2 Using L-Function Estimation\n\n8.2.1 Yinmarbin District\n1) Computing L-function Estimation\n\n\nPlot L-function for Yinmarbin District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_L_function\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n  \n  # Calculate the L-function\n  L_result &lt;- Lest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_L_function/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(L_result, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_L_function/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFirstly, the L-function plot appears more zig-zag than the K-function as the L-function can magnify small fluctuations in the K-function. Secondly, the theoretical line (dotted) is fixed at 0 where L(d)−r=0 which is an expected behavior under Complete Spatial Randomness.\nFrom 2022 Q1 to 2022 Q3, all of 2023 and 2024 Q2, there is large scale clustering as the observed line (K-iso) consistently lies above the theoretical line (K-pois) particularly at larger spatial distances. This suggests conflicts in Yinmarbin are more clustered than expected during this time period.\nFrom 2021, 2022 Q4 and 2024 Q1, there is a decreasing K value observed which indicates more localised clustering.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n\nMonta Carlo Simulation for Yinmarbin District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"L_function_monta_carlo\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n\n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"L_function_monta_carlo/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"L_function_monta_carlo/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe periods of 2022 Q4, 2024 Q1 and 2024 Q2 shows a wider envelope, that is that some areas are clustered while others are more evenly spaced in Yinmarbin. There’s also more widespread clustering observed in 2024 Q2 where L values are higher at larger distances.\n\n\n\n\n8.2.2 Shwebo District\n1) Computing L-function Estimation\n\n\nPlot L-function for Shwebo District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_L_function\", \"conflict_shwebo\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(shwebo_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- shwebo_ppp_owin_list[[quarter]]\n  \n  # Calculate the L-function\n  L_result &lt;- Lest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_L_function/conflict_shwebo\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(L_result, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Shwebo District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_L_function/kfunction_shwebo.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe 2021 Q1 observed K values are much more jagged than other quarters as we have a smalller dataset of conflicts in Shwebo district of that quarter. In general, we see stronger clustering in bigger areas of the district which suggests wide-scale clustering of conflicts.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n\nMonta Carlo Simulation for Shwebo District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"L_function_monta_carlo\", \"conflict_shwebo\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(shwebo_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- shwebo_ppp_owin_list[[quarter]]\n  \n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"L_function_monta_carlo/conflict_shwebo\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Shwebo District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"L_function_monta_carlo/kfunction_shwebo.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\n2021 Q2 and 2024 Q2 has the highest variability in spatial points with both clustering and dispersion patterns under the CRS test. Nonetheless, we can confirm strong significance of clustering throughout all quarters in Shwebo where the observed L values like above the theoretical values simulated.\n\n\n\n\n8.2.3 Pakokku District\n1) Computing L-function Estimation\n\n\nPlot L-function for Pakokku District\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_L_function\", \"conflict_pakokku\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(pakokku_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- pakokku_ppp_owin_list[[quarter]]\n  \n  # Calculate the L-function\n  L_result &lt;- Lest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_L_function/conflict_pakokku\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(L_result, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Pakokku District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_pakokku\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_L_function/kfunction_pakokku.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_pakokku\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nWe generally see strong evidence of localised clusterings in the Pakokku district with weaker significance of clustering in longer distances. The observed L values in 2021 Q1 and Q2 shows a jagged output which stems from our smaller data conflict points.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n\nMonta Carlo Simulation for Pakokku District\n# Create a directory to store PNG frames\npath &lt;- file.path(\"L_function_monta_carlo\", \"conflict_pakokku\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(pakokku_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- pakokku_ppp_owin_list[[quarter]]\n\n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"L_function_monta_carlo/conflict_pakokku\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Pakokku District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_pakokku\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"L_function_monta_carlo/kfunction_pakokku.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_pakokku\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe results of the simulation produces the greatest variability in conflict activity in Shwebo in 2021 Q2 and 2024 Q1. There are periods of high concentration (clustering) in certain areas and more dispersed activity in others. That said, our observed pattern exhibits strong clustering throughout all quarters in Shwebo.\n\n\n\n\n8.2.4 Mandalay District\n1) Computing L-function Estimation\n\n\nPlot L-function for Mandalay District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_L_function\", \"conflict_mandalay\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(mandalay_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- mandalay_ppp_owin_list[[quarter]]\n  \n  # Calculate the L-function\n  L_result &lt;- Lest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_L_function/conflict_mandalay\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(L_result, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Mandalay District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_mandalay\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_L_function/kfunction_mandalay.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_mandalay\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nGenerally from 2021 to 2024, we see an upward trend of observed L values with sharp fluctuations as distance increases.\nAt larger distance scales, we observe greater deviations of the observed line above the theoretical line compared to the deviations seen at smaller distances. This suggests strong clustering across Mandalay, though clustering is also present at local areas.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n\nMonta Carlo Simulation for Mandalay District\n# Create a directory to store PNG frames\npath &lt;- file.path(\"L_function_monta_carlo\", \"conflict_mandalay\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(mandalay_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- mandalay_ppp_owin_list[[quarter]]\n  \n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"L_function_monta_carlo/conflict_mandalay\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Mandalay District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_mandalay\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"L_function_monta_carlo/kfunction_mandalay.gif\"\nimage_write(animation, path = output_path)\n\n\n\n# Display Plot\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nIn 2021 Q1 and 2024 Q1-2, we can observe a bigger envelope from the CSR test especially at larger distances. This means certain areas in Mandalay show strong clustering (hotspots), while others are more dispersed, leading to greater variability in the overall spatial structure of conflict events.\nAdditionally, throughout 2021 to 2024, there isis prominent evidence of hotspots and clustering throughout Mandalay since observed L values deviate above the theoretical L values, across a range of distances."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#st-order-spatio-temporal-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#st-order-spatio-temporal-point-pattern-analysis",
    "title": "Take-home Exercise 1 - Part 1",
    "section": "7. 1st Order Spatio-Temporal Point Pattern Analysis",
    "text": "7. 1st Order Spatio-Temporal Point Pattern Analysis\n\n\nSet up DayofYear variable per quarter\nQ2_2024 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2024 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2024 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2024 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\n\n\n7.1 Creating ppp object\nIn the code chunk below, DayofYear from the fire_sf data frame is selected and is included in the output ppp object.\n\n# Create ppp object per quarter\nQ2_2024_ppp &lt;- Q2_2024 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2024_ppp &lt;- Q1_2024 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2023_ppp &lt;- Q4_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2023_ppp &lt;- Q3_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2023_ppp &lt;- Q2_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2023_ppp &lt;- Q1_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2022_ppp &lt;- Q4_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2022_ppp &lt;- Q3_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2022_ppp &lt;- Q2_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2022_ppp &lt;- Q1_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2021_ppp &lt;- Q4_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2021_ppp &lt;- Q3_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2021_ppp &lt;- Q2_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2021_ppp &lt;- Q1_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\n\n\n7.2 Combining ppp with owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\n# Mask the ppp object with owin object\nQ2_2024_owin &lt;- Q2_2024_ppp[myanmar_owin]\n\nQ1_2024_owin &lt;- Q1_2024_ppp[myanmar_owin]\n\nQ4_2023_owin &lt;- Q4_2023_ppp[myanmar_owin]\n\nQ3_2023_owin &lt;- Q3_2023_ppp[myanmar_owin]\n\nQ2_2023_owin &lt;- Q2_2023_ppp[myanmar_owin]\n\nQ1_2023_owin &lt;- Q1_2023_ppp[myanmar_owin]\n\nQ4_2022_owin &lt;- Q4_2022_ppp[myanmar_owin]\n\nQ3_2022_owin &lt;- Q3_2022_ppp[myanmar_owin]\n\nQ2_2022_owin &lt;- Q2_2022_ppp[myanmar_owin]\n\nQ1_2022_owin &lt;- Q1_2022_ppp[myanmar_owin]\n\nQ4_2021_owin &lt;- Q4_2021_ppp[myanmar_owin]\n\nQ3_2021_owin &lt;- Q3_2021_ppp[myanmar_owin]\n\nQ2_2021_owin &lt;- Q2_2021_ppp[myanmar_owin]\n\nQ1_2021_owin &lt;- Q1_2021_ppp[myanmar_owin]\n\nNow, I will perform a spatio-temporal kernel density estimate on the owin object which gives us insights into where and when conflict event occurrences are concentrated within the specified observation window.\n\n\nPerform spatial temporal KDE per quarter\nlibrary(spatstat)\nQ2_2024_stkde &lt;- spattemp.density(Q2_2024_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ1_2024_stkde &lt;- spattemp.density(Q1_2024_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ4_2023_stkde &lt;- spattemp.density(Q4_2023_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ3_2023_stkde &lt;- spattemp.density(Q3_2023_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ2_2023_stkde &lt;- spattemp.density(Q2_2023_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ1_2023_stkde &lt;- spattemp.density(Q1_2023_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ4_2022_stkde &lt;- spattemp.density(Q4_2022_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ3_2022_stkde &lt;- spattemp.density(Q3_2022_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ2_2022_stkde &lt;- spattemp.density(Q2_2022_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ1_2022_stkde &lt;- spattemp.density(Q1_2022_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ4_2021_stkde &lt;- spattemp.density(Q4_2021_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ3_2021_stkde &lt;- spattemp.density(Q3_2021_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ2_2021_stkde &lt;- spattemp.density(Q2_2021_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nPerform spatial temporal KDE per quarter\nQ1_2021_stkde &lt;- spattemp.density(Q1_2021_owin)\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n\n\n7.3 Plotting STKDE Outputs\nLet’s plot our animated spatio-temporal KDE outputs for each quarter.\n\n7.3.1 2024 Q1-2 STKDE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nAt the start of 2024 Q1, we see that the kernel density estimate of Myanmar conflicts tend to move sporadically where there are no specific patterns but in 2024 Q2, we start seeing conflict events occurring more intensely in Central and Southern Myanmar.\n\n\n\n\n7.3.2 2023 Q1-Q4 STKDE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFrom 2023 Q1 to Q3, there is a noticeable cluster of conflict events happening in Central and Southern regions of Myanmar than the other parts of the country. In 2023 Q4, we can notice more dispersion in conflict events across Myanmar, spreading into Western and Eastern regions. Throughout 2023, conflict events are least observed in North Myanmar.\n\n\n\n\n7.3.3 2022 Q1-Q4 STKDE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nSimilar to 2023, the spread of conflict events in 2022 is largely clustered in Central and Southen parts of Myanmar. However, we do see some jitters in conflict trends in 2022 Q1 with a rare sight of conflicts in the far North of Myanmar and occasional conflicts in Southern Myanmar.\n\n\n\n\n7.3.4 2021 Q1-Q4 STKDE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFinally, armed conflicts in 2021 is by far the most random spread of armed conflicts throughout Myanmar. There is also a high intensity of conflicts in South Myanmar, particularly in the state of Yangon while we rarely see conflicts occurring in the extreme North of Myanmar.\n\n\n\n\n7.3.5 OpenStreetMap in Myanmar - Spatio Temporal\nWe can observe the spatio-temporal conflict patterns per quarter using OpenStreetMap as well.\n\nQ2_2024_owin &lt;- rescale(Q2_2024_owin, 1000, \"km\")\nQ2_2024_stkde &lt;- density(Q2_2024_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ1_2024_owin &lt;- rescale(Q1_2024_owin, 1000, \"km\")\nQ1_2024_stkde &lt;- density(Q1_2024_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ4_2023_owin &lt;- rescale(Q4_2023_owin, 1000, \"km\")\nQ4_2023_stkde &lt;- density(Q4_2023_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ3_2023_owin &lt;- rescale(Q3_2023_owin, 1000, \"km\")\nQ3_2023_stkde &lt;- density(Q3_2023_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ2_2023_owin &lt;- rescale(Q2_2023_owin, 1000, \"km\")\nQ2_2023_stkde &lt;- density(Q2_2023_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ1_2023_owin &lt;- rescale(Q1_2023_owin, 1000, \"km\")\nQ1_2023_stkde &lt;- density(Q1_2023_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ4_2022_owin &lt;- rescale(Q4_2022_owin, 1000, \"km\")\nQ4_2022_stkde &lt;- density(Q4_2022_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ3_2022_owin &lt;- rescale(Q3_2022_owin, 1000, \"km\")\nQ3_2022_stkde &lt;- density(Q3_2022_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ2_2022_owin &lt;- rescale(Q2_2022_owin, 1000, \"km\")\nQ2_2022_stkde &lt;- density(Q2_2022_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ1_2022_owin &lt;- rescale(Q1_2022_owin, 1000, \"km\")\nQ1_2022_stkde &lt;- density(Q1_2022_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ4_2021_owin &lt;- rescale(Q4_2021_owin, 1000, \"km\")\nQ4_2021_stkde &lt;- density(Q4_2021_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ3_2021_owin &lt;- rescale(Q3_2021_owin, 1000, \"km\")\nQ3_2021_stkde &lt;- density(Q3_2021_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ2_2021_owin &lt;- rescale(Q2_2021_owin, 1000, \"km\")\nQ2_2021_stkde &lt;- density(Q2_2021_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nQ1_2021_owin &lt;- rescale(Q1_2021_owin, 1000, \"km\")\nQ1_2021_stkde &lt;- density(Q1_2021_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\n\n\nSet up raster and projection\nraster_Q2_2024 &lt;- raster(Q2_2024_stkde)\nraster_Q1_2024 &lt;- raster(Q1_2024_stkde)\nraster_Q4_2023 &lt;- raster(Q4_2023_stkde)\nraster_Q3_2023 &lt;- raster(Q3_2023_stkde)\nraster_Q2_2023 &lt;- raster(Q2_2023_stkde)\nraster_Q1_2023 &lt;- raster(Q1_2023_stkde)\nraster_Q4_2022 &lt;- raster(Q4_2022_stkde)\nraster_Q3_2022 &lt;- raster(Q3_2022_stkde)\nraster_Q2_2022 &lt;- raster(Q2_2022_stkde)\nraster_Q1_2022 &lt;- raster(Q1_2022_stkde)\nraster_Q4_2021 &lt;- raster(Q4_2021_stkde)\nraster_Q3_2021 &lt;- raster(Q3_2021_stkde)\nraster_Q2_2021 &lt;- raster(Q2_2021_stkde)\nraster_Q1_2021 &lt;- raster(Q1_2021_stkde)\nprojection(raster_Q2_2024) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q1_2024) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q4_2023) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q3_2023) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q2_2023) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q1_2023) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q4_2022) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q3_2022) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q2_2022) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q1_2022) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q4_2021) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q3_2021) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q2_2021) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_Q1_2021) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\n\n\n\n# Plot KDE Map on OpenStreetMap\nraster_quarters &lt;- list('raster_Q2_2024','raster_Q1_2024','raster_Q4_2023','raster_Q3_2023','raster_Q2_2023','raster_Q1_2023','raster_Q4_2022','raster_Q3_2022','raster_Q2_2022','raster_Q1_2022','raster_Q4_2021','raster_Q3_2021','raster_Q2_2021','raster_Q1_2021')\n\n# Set tmap mode to view\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\n# Function to create tmap for each raster\ncreate_tmap &lt;- function(raster_var) {\n  kde_fixed_output &lt;- tm_basemap(server = \"OpenStreetMap.HOT\") +\n    tm_basemap(server = \"Esri.WorldImagery\") +\n    tm_shape(get(raster_var)) +  # Dynamically get the raster variable\n    tm_raster(\"layer\",\n              n = 10,\n              title = paste(raster_var),\n              alpha = 0.6,\n              palette = c(\"#fafac3\",\"#fd953b\",\"#f02a75\",\"#b62385\",\"#021c9e\")) +\n    tm_shape(boundary_sf) +\n    tm_polygons(alpha=0.1, id=\"DT\") +\n    tmap_options(check.and.fix = TRUE)\n  \n  return(kde_fixed_output)\n}\n\n# Create a list of tmap objects by iterating over the raster_quarters list\ntmap_list &lt;- lapply(raster_quarters, create_tmap)\n\n# Arrange and display the tmaps\ntmap_arrange(tmap_list, ncol = 2, nrow = 2, sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe plots uncover the increasing levels of conflicts across each quarter. Interestingly, 2021 Q1 begins with higher concentration of armed conflicts in Southern and Eastern parts of Myanmar, but gradually becomes more concentrated in the Central districts. From 2022 Q4 onwards, we see that conflicts have spread outside the core central region of Myanmar towards the Western region. Conflicts return to occurring more frequently in the Central districts like Yinmarbin and Sagaing in 2024 Q1 and Q2,\n\n\nContinue to Part 2 &gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#nd-order-spatio-temporal-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#nd-order-spatio-temporal-point-pattern-analysis",
    "title": "Take-home Exercise 1",
    "section": "8. 2nd Order Spatio-Temporal Point Pattern Analysis",
    "text": "8. 2nd Order Spatio-Temporal Point Pattern Analysis\nSimilar to the 2nd order spatial analysis in section 6, I want to explore spatio-temporal trends of Myanmar’s conflicts and how the events differ in distribution, from quarter to quarter. I’ll delve into the four districts I’m most interested in, that is the districts with the highest proportions of conflicts - Yinmarbin, Shwebo, Pakokku and Mandalay.\n\n8.1 Using K-Function Estimation\n\n8.1.1 Yinmarbin District\nWe’ll want to compute the K-Function by quarters via Kest() by iterating over each unique quarter in date format, then plotting an animated graph of the K-Function outputs per quarter.\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Yinmarbin District\n# Set up yinmarbin_ppp_owin_list\nconflict_yinmarbin &lt;- conflict_data_sf %&gt;% filter(DT == \"Yinmarbin\")\nunique_quarter &lt;- unique(conflict_yinmarbin$year_quarter)\nboundary_yinmarbin &lt;- filter(boundary_sf, DT == \"Yinmarbin\")\nyinmarbin_owin &lt;- as.owin(boundary_yinmarbin)\nyinmarbin_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_yinmarbin %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[yinmarbin_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  yinmarbin_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\nPlot K-function for Yinmarbin District\nlibrary(magick)\n\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_k_function\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n  K_result &lt;- Kest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_k_function/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_k_function/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_k_function/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nWe can observe how the observed line (K-iso) is constantly above the actual line (K-pois) from 2021 Q2 to 2024 Q2. This confirms that conflict points in Yinmarbin are highly clustered. In fact, it is more clustered together than expected by the null hypothesis. There is no K-function outputted for 2021 Q1 as no conflict points were observed in Yinmarbin District for that time period.\n\n\n\n\n\n\n\n\nNote\n\n\n\nRipley’s Correction provides a way to mitigate the bias introduced by points near the edge of the study window by accounting for the reduced area for point comparisons near the edges. Hence, this results in a a more accurate estimate of the spatial distribution as seen in the slight difference between actual and expected K-function.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of conflict events in Myanmar are randomly distributed.\nH1= The distribution of conflict events in Myanmar are not randomly distributed.\nThe null hypothesis will be rejected if the observed K-function lies above/below the theoretical K-function and envelope.\n\nBy using envelop(), we can get a more robust interpretation by comparing the observed K-function against a simulation envelope of K-functions generated under the null hypothesis.\n\n\nMonta Carlo Simulation for Yinmarbin District\nlibrary(magick)\n\n# Unique quarters of the year in the dataset\nunique_quarter &lt;- unique(conflict_yinmarbin$year_quarter)\n\n# Create a directory to store PNG frames\npath &lt;- file.path(\"k_function_monta_carlo\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n  \n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"k_function_monta_carlo/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"k_function_monta_carlo/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"k_function_monta_carlo/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nI noticed that the observed line has a somewhat substantial deviation above the upper envelop (shaded region) generated from the Monte Carlo simulation. This indicates a strong tendancy for points to be clustered in the Yinmarbin district. Since this occurs across a wide range of distances, it implies that clustering is a prominent feature of the spatial distribution.\n\n\n\n\n8.1.2 Shwebo District\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Shwebo District\n# Set up shwebo_ppp_owin_list\nconflict_shwebo &lt;- conflict_data_sf %&gt;% filter(DT == \"Shwebo\")\nunique_quarter &lt;- unique(conflict_shwebo$year_quarter)\nboundary_shwebo &lt;- filter(boundary_sf, DT == \"Shwebo\")\nshwebo_owin &lt;- as.owin(boundary_shwebo)\nshwebo_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_shwebo %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[shwebo_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  shwebo_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFor the Shwebo District, the observed line (K-iso) also lies constantly above the actual line (K-pois) from 2021 Q2 to 2024 Q2, indicating clustering at all distances ‘r’ of our spatial points. Interestingly, conflict events in 2021 Q1 displayed some tendancy towards a dispersed point pattern as the observed K-function lies slightly below the actual line at a distance of 17km.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted.\n\n\n\n\n\n\n\nObservations\n\n\n\nIn 2021 Q1, a sharp jagged plot is generated due to the smaller dataset size of conflicts in Shwebo. In 2024 Q2, we see the highest variability in spatial patterns which results in a larger envelope size\nGenerally, the observed line has a smaller deviation above the upper envelop than in the Yinmarbin data. This indicates a a somewhat intense level of clustering in the Shwebo district and remains more clustered than would be expected if points were distributed randomly..\n\n\n\n\n8.1.3 Pakokku District\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Pakokku District\n# Set up pakokku_ppp_owin_list\nconflict_pakokku &lt;- conflict_data_sf %&gt;% filter(DT == \"Pakokku\")\nunique_quarter &lt;- unique(conflict_pakokku$year_quarter)\nboundary_pakokku &lt;- filter(boundary_sf, DT == \"Pakokku\")\npakokku_owin &lt;- as.owin(boundary_pakokku)\npakokku_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_pakokku %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[pakokku_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  pakokku_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe observed K-function lies above the expected K-function outputted from 2021 to 2024, indicating clustering at all distances ‘r’ of our spatial points. However, we can observe milder clustering from 2021 Q4 to 2024 Q2 as the magnitude of deviation is significantly smaller than the period of 2021 Q1 to 2021 Q3.\n\n\n2) Performing Complete Spatial Randomness Test\n\n\n\n\n\n\n\nObservations\n\n\n\nIn 2021 Q2, we see a large envelope which reflects greater variability in the expected K-function and this could stem from the mix of both clustering and dispersion across Myanmar for that period. Generally from 2021 Q1 to 2024 Q2, clustering is evident as the observed K-function continues to lie above the envelope.\n\n\n\n\n8.1.4 Mandalay District\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Mandalay District\n# Set up mandalay_ppp_owin_list\nconflict_mandalay &lt;- conflict_data_sf %&gt;% filter(DT == \"Mandalay\")\nunique_quarter &lt;- unique(conflict_mandalay$year_quarter)\nboundary_mandalay &lt;- filter(boundary_sf, DT == \"Mandalay\")\nmandalay_owin &lt;- as.owin(boundary_mandalay)\nmandalay_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_mandalay %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[mandalay_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  mandalay_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe degree of clustering is less pronounced in Mandalay than the other districts since the gap between the observed line and the theoretical line is smaller. Clustering is large-scale in Mandalay where statistically significant clustering patterns are seen in larger distance ranges.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted.\n\n\n\n\n\n\n\nObservations\n\n\n\nWe see the highest variability in spatial patterns in 2024 Q1 and Q2 which indicates that some areas in Mandalay District are more clustered with conflict events while other areas are more evenly spaced.\nWe can confirm statistically significant clustering from 2021 Q1 to 2023 Q3 as K value is larger than the upper confidence of the envelope than in 2024 Q1 and Q2. There is also strong evidence of clustering especially at larger distances which means Mandalay District faces large-scale clustering.\n\n\n\n\n\n8.2 Using L-Function Estimation\n\n8.2.1 Yinmarbin District\n1) Computing L-function Estimation\n\n\nPlot L-function for Yinmarbin District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_L_function\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n  \n  # Calculate the L-function\n  L_result &lt;- Lest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_L_function/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(L_result, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_L_function/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFirstly, the L-function plot appears more zig-zag than the K-function as the L-function can magnify small fluctuations in the K-function. Secondly, the theoretical line (dotted) is fixed at 0 where L(d)−r=0 which is an expected behavior under Complete Spatial Randomness.\nFrom 2022 Q1- Q3, all of 2023 and 2024 Q2, there is large scale clustering as the observed line (K-iso) consistently lies above the theoretical line (K-pois) particularly at larger spatial distances. This suggests conflicts in Yinmarbin are clustered across the district during this time period.\nFrom 2021, 2022 Q4 and 2024 Q1, there is a decreasing K value observed which indicates more localised clustering in specific towns on Yinmarbin.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n\nMonta Carlo Simulation for Yinmarbin District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"L_function_monta_carlo\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n\n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"L_function_monta_carlo/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"L_function_monta_carlo/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe periods of 2022 Q4, 2024 Q1 and 2024 Q2 shows a wider envelope which indicates that some areas are clustered while others are more evenly spaced in Yinmarbin. There’s also more widespread clustering observed in all of 2023 and in 2024 Q2 where deviation of L values above the envelope are signifiantly larger at bigger distances scales.\n\n\n\n\n8.2.2 Shwebo District\n1) Computing L-function Estimation\n\n# Display Plot\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe 2021 Q1 observed L values are much more jagged than other quarters as we have a smalller dataset of conflicts in Shwebo district of that quarter. In general, we see stronger clustering in bigger areas of the district which suggests wide-scale clustering of conflicts.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n# Display Plot\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\n2021 Q2 and 2024 Q2 has the highest variability in spatial points with both clustering and dispersion patterns under the CRS test in Shwebo district. Nonetheless, we can confirm strong significance of widespread clustering of conflicts throughout all quarters in Shwebo where the observed L values like above the theoretical values simulated, particularly at larger distance scales.\n\n\n\n\n8.2.3 Pakokku District\n1) Computing L-function Estimation\n\n\n\n\n\n\n\nObservations\n\n\n\nWe generally see strong evidence of localised clustering in the Pakokku district with weaker significance of clustering in bigger distance scales. This means that specific towns in Pakokku have more intense hotspots than others.It is worth noting that the jagged ouputs from the observed L values in 2021 Q1 and Q2 stems from our smaller data conflict points for these periods.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n\n\n\n\n\n\nObservations\n\n\n\nThe results of the simulation produces the greatest variability in conflict activity in Pakokku in 2021 Q2 and 2024 Q1. The CSR tests confirms significant clustering throughout all quarters in Pakokku. We can confirm that localised clustering are more promoinent in 2021 Q2, 2022 Q3 and 2024 Q1 where the L-values deviates more above the envelope at smaller distances. The remaning quarters show strong evidence of widespread clustering across a bigger distribution of Pakokku district.\n\n\n\n\n8.2.4 Mandalay District\n1) Computing L-function Estimation\n\n\n\n\n\n\n\nObservations\n\n\n\nGenerally from 2021 to 2024, we see an upward trend of observed L values with sharp fluctuations as distance increases.\nAt both small and large distance scales, we can observe deviations of the observed line above the theoretical line which suggests statistically strong evidence of clustering across Mandalay, where clustering is present at local towns and across Mandalay.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n\n\n\n\n\n\nObservations\n\n\n\nIn 2021 Q1 and 2024 Q1-2, we can observe a bigger envelope from the CSR test especially at larger distances. This means certain areas in Mandalay show strong clustering (hotspots), while others are more dispersed, leading to greater variability in the overall spatial structure of conflict events.\nAdditionally, throughout 2021 to 2024, there is prominent evidence of hotspots and clustering throughout Mandalay since observed L values deviate above the theoretical L values, across a range of distances."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#conclusion-and-reflection",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#conclusion-and-reflection",
    "title": "Take-home Exercise 1",
    "section": "9. Conclusion and Reflection",
    "text": "9. Conclusion and Reflection\nThis take-home exercise has significantly expanded my understanding and underscored the severe humanitarian conflicts in Myanmar, revealed through this spatial and spatio-temporal point pattern analysis.\nA key takeaway from Myanmar’s humanitarian conflict is how complex the interplay of ethnic, political, and religious struggles has been and continues to be an on-going humanitarian crisis, involving the military, ethnic armed groups, political militias, and civilians.\nMy analysis has revealed how central and southern states (notably, Sagaing, Mandalay, Magway and Yangon) have experienced intense clashes between state forces and politica/identity militias, while northern Myanmar sees high conflict levels between rebels and political militias. However, one should also consider the area of a state/district when computing KDE since a smaller area could increase the density of conflict quite significantly.\nThe political militia are found to me to be less involved with unarmed civilians than state forces, rebels and other policial militia. Conversely, civilians are seen to be embroiled mostly in conflicts resulting from strategic development and violence against civilians events, primarily in Central and Western Myanmar. Fortunately, conflicts involving explosions or remote violence is not as intense against civilians but this raises a great concern on the humanitarian crisis faced by civilians in Myanmar, especially since armed conflicts tend to occur repeatedly in the same parts of each state which indicates an unceasing cycle of conflicts in Myanmar.\nAdditionally, results from the Monte Carlo CSR test indicated a strong tendency for points to be clustered across a wide range of distances, implying that clustering is a prominent feature of the spatial distribution in districts like Sagaing, Mandalay, Magway and Yangon. Conversely, there are specific conflict hot spots observed in certain towns of the district which means localised clustering are also present.\nIt can also be derived that in 2021 Q1 and Q2, conflict points are less intense and slightly more random in its distribution. The intensity of conflicts continue to soar from 2022 Q1 to 2024 Q2 with both localised and widespread conflict events during these period of time.\nLastly, running computationally intensive codes such as envelope() for 2nd order spatial analysis may differ in processing speed from one student to another. My system, however, is running with 8 cores and it does take a lengthy amount of time for processing the large 40,000+ rows of conflict data. (1 simulation takes around 2 minutes to run). Hence, I would suggest other students to begin their take-home exercise as early as possible to provide buffer time for processing the data, handling code bugs and even data cleaning errors."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "title": "Take-home Exercise 1",
    "section": "9. Conclusion",
    "text": "9. Conclusion\nMy analysis has revealed how central districts (i.e., Yinmarbin, Shwebo, Pakokku and Mandalay) and western states (i.e. Yangon) have experienced intense clashes between state forces and politica/identity militias, while northern Myanmar sees high conflict levels between rebels and political militias. However, one should also consider the size of a state/district when computing KDE since a smaller area could increase the density of conflict quite significantly.\nThe political militia are found to be less involved with unarmed civilians than state forces, rebels and other policial militia. Conversely, civilians are seen to be embroiled mostly in conflicts resulting from strategic development and violence against civilians events, primarily in Central and Western Myanmar. Fortunately, conflicts involving explosions or remote violence is not as intense against civilians but this raises a great concern on the humanitarian crisis faced by civilians in Myanmar, especially since armed conflicts tend to occur repeatedly in the same parts of each state which indicates an unceasing cycle of conflicts in Myanmar.\nAdditionally, results from the Monte Carlo CSR test indicated a strong tendency for points to be clustered across a wide range of distances, implying that clustering is a prominent feature of the spatial distribution in districts like Sagaing, Mandalay, Magway and Yangon. Conversely, there are specific conflict hot spots observed in certain towns of the district which means localised clustering are also present.\nIt can also be derived that in 2021 Q1 and Q2, conflict points are less intense and slightly more random in its distribution. The intensity of conflicts continue to soar from 2022 Q1 to 2024 Q2 with both localised and widespread conflict events during these period of time."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#my-reflections",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#my-reflections",
    "title": "Take-home Exercise 1",
    "section": "10. My Reflections",
    "text": "10. My Reflections\nThis take-home exercise has significantly expanded my understanding and underscored the severe humanitarian conflicts in Myanmar, revealed through this spatial and spatio-temporal point pattern analysis.\nA key takeaway from Myanmar’s humanitarian conflict is how complex the interplay of ethnic, political, and religious struggles has been and continues to be an on-going humanitarian crisis, involving the military, ethnic armed groups, political militias, and civilians.\nLastly, running computationally intensive codes such as envelope() for 2nd order spatial analysis may differ in processing speed from one student to another. My system, however, is running with 8 cores and it does take a lengthy amount of time for processing the large 40,000+ rows of conflict data.\nHence, I would suggest other students to begin their take-home exercise as early as possible to provide buffer time for processing the data, handling code bugs and even data cleaning errors."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "In-class Exercise"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#install-required-libraries",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#install-required-libraries",
    "title": "In-class Exercise 6",
    "section": "1.1 Install Required Libraries",
    "text": "1.1 Install Required Libraries\nWe will first want to install the GWModel package from CRAN\n\ninstall.packages(\"GWmodel\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#importing-libraries-into-r",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#importing-libraries-into-r",
    "title": "In-class Exercise 6",
    "section": "1.2 Importing Libraries into R",
    "text": "1.2 Importing Libraries into R\nIn this in-class exercise, sf, sfdep, tmap, and tidyverse will be used.\n\nsf provides a standardized way to work with spatial data in R. It allows for the manipulation and analysis of geospatial data in simple feature format\nsfdep is designed for spatial dependency and autocorrelation analysis. It specifically integrates with sf to calculate spatial autocorrelation statistics such as Moran’s I, Geary’s C, and other local or global spatial measures.\ntmap is a powerful package for visualizing spatial data through thematic maps. It supports both static and interactive mapping, making it ideal for displaying spatial patterns, clusters, and the results of autocorrelation analysis.\ntidyverse is a collection of packages (e.g., dplyr, ggplot2, purrr, tibble) that are designed for data manipulation, visualization, and functional programming in R. It is not specific to spatial analysis but is essential for general data wrangling.\n\n\npacman::p_load(sf, sfdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#preparing-the-datasets",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#preparing-the-datasets",
    "title": "In-class Exercise 6",
    "section": "1.3 Preparing the Datasets",
    "text": "1.3 Preparing the Datasets\nI will be using the Hunan dataset used in the Hands-on Exercise 5 spatial weights and applications.\n\n1.3.1 Importing Geospatial Data\nFirstly, we will import the Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format. The code chunk below uses st_read() of sf package.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex6\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n1.3.2 Importing Aspatial Data\nNext, I will import the aspatial data set. This data is a csv file containing selected Hunan’s local development indicators in 2012.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n1.3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan_GDPPC &lt;- left_join(hunan, hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\n1.4 Plotting A Choropleth Map\nNext, let’s plot a choropleth map showing the distribution of GDPPC of Hunan Province.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by county, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#global-measures-of-spatial-association",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#global-measures-of-spatial-association",
    "title": "In-class Exercise 6",
    "section": "2. Global Measures of Spatial Association",
    "text": "2. Global Measures of Spatial Association\n\nStep 1: Deriving Queen’s contiguity weights: sfdep methods\nNotice that st_weights() provides tree arguments,\n\nnb: a neighbour list object as created by st_neighbors().\nstyle: Default “W” for row standardized weights. This value can also be “B”, “C”, “U”, “minmax”, and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nallow_zero: If TRUE, assigns zero as lagged value to zone without neighbors. 8\n\n\n# wm_q &lt;- hunan_GDPPC %&gt;%\n#   mutate(nb = st_contiguity(geometry),\n#          wt = st_weights(nb, style = \"W\"),\n#          .before = 1)\n\n\n\nComputing Global Moran’s I\nIn the code chunk below, global _moran() function is used to compute the Moran’s / value. Different from spdep package, the output is a tibble data.frame.\n\nk is the average neighbours found\n\n\n# moranI &lt;- global_moran(wm_1$GDPPC,\n#                        wm_q$nb,\n#                        wm_q$wt)\n# glimpse(moranI)\n\n\n\nPerforming Global Moran’s I Permutation Test\nIn practice, Monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by globel_ moran_perm().\nStep 1:\nIt’s always good practice to to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.\n\n# set.ssed(1234)\n\nStep 2\nNext, global_moral_perm() is used to perform Monte Carlo simulation.\n\n# global_moran(wm_1$GDPPC,\n#              wm_q$nb,\n#              wm_q$wt,\n#              nsim = 99)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html",
    "title": "Take-home Exercise 1 - Part 2",
    "section": "",
    "text": "&lt; Back to Part 1"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html#st-order-spatio-temporal-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html#st-order-spatio-temporal-point-pattern-analysis",
    "title": "Take-home Exercise 1 - Part 2",
    "section": "7. 1st Order Spatio-Temporal Point Pattern Analysis",
    "text": "7. 1st Order Spatio-Temporal Point Pattern Analysis\n\n\nSet up DayofYear variable per quarter\nQ2_2024 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2024 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2024 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2024 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2023 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2022 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ4_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q4\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ3_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q3\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ2_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q2\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nQ1_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter == \"2021 Q1\") %&gt;%\n  mutate(DayofYear = yday(event_date))\n\n\n\n7.1 Creating ppp object\nIn the code chunk below, DayofYear from the fire_sf data frame is selected and is included in the output ppp object.\n\n# Create ppp object per quarter\nQ2_2024_ppp &lt;- Q2_2024 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2024_ppp &lt;- Q1_2024 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2023_ppp &lt;- Q4_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2023_ppp &lt;- Q3_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2023_ppp &lt;- Q2_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2023_ppp &lt;- Q1_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2022_ppp &lt;- Q4_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2022_ppp &lt;- Q3_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2022_ppp &lt;- Q2_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2022_ppp &lt;- Q1_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ4_2021_ppp &lt;- Q4_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ3_2021_ppp &lt;- Q3_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ2_2021_ppp &lt;- Q2_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nQ1_2021_ppp &lt;- Q1_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\n\n\n7.2 Combining ppp with owin object\nNext, code chunk below is used to combine the ppp object and the owin object.\n\n# Mask the ppp object with owin object\nQ2_2024_owin &lt;- Q2_2024_ppp[myanmar_owin]\n\nQ1_2024_owin &lt;- Q1_2024_ppp[myanmar_owin]\n\nQ4_2023_owin &lt;- Q4_2023_ppp[myanmar_owin]\n\nQ3_2023_owin &lt;- Q3_2023_ppp[myanmar_owin]\n\nQ2_2023_owin &lt;- Q2_2023_ppp[myanmar_owin]\n\nQ1_2023_owin &lt;- Q1_2023_ppp[myanmar_owin]\n\nQ4_2022_owin &lt;- Q4_2022_ppp[myanmar_owin]\n\nQ3_2022_owin &lt;- Q3_2022_ppp[myanmar_owin]\n\nQ2_2022_owin &lt;- Q2_2022_ppp[myanmar_owin]\n\nQ1_2022_owin &lt;- Q1_2022_ppp[myanmar_owin]\n\nQ4_2021_owin &lt;- Q4_2021_ppp[myanmar_owin]\n\nQ3_2021_owin &lt;- Q3_2021_ppp[myanmar_owin]\n\nQ2_2021_owin &lt;- Q2_2021_ppp[myanmar_owin]\n\nQ1_2021_owin &lt;- Q1_2021_ppp[myanmar_owin]\n\nNow, I will perform a spatio-temporal kernel density estimate on the owin object which gives us insights into where and when conflict event occurrences are concentrated within the specified observation window.\n\n\nPerform spatial temporal KDE per quarter\nlibrary(spatstat)\nQ2_2024_stkde &lt;- spattemp.density(Q2_2024_owin)\n\nQ1_2024_stkde &lt;- spattemp.density(Q1_2024_owin)\n\nQ4_2023_stkde &lt;- spattemp.density(Q4_2023_owin)\n\nQ3_2023_stkde &lt;- spattemp.density(Q3_2023_owin)\n\nQ2_2023_stkde &lt;- spattemp.density(Q2_2023_owin)\n\nQ1_2023_stkde &lt;- spattemp.density(Q1_2023_owin)\n\nQ4_2022_stkde &lt;- spattemp.density(Q4_2022_owin)\n\nQ3_2022_stkde &lt;- spattemp.density(Q3_2022_owin)\n\nQ2_2022_stkde &lt;- spattemp.density(Q2_2022_owin)\n\nQ1_2022_stkde &lt;- spattemp.density(Q1_2022_owin)\n\nQ4_2021_stkde &lt;- spattemp.density(Q4_2021_owin)\n\nQ3_2021_stkde &lt;- spattemp.density(Q3_2021_owin)\n\nQ2_2021_stkde &lt;- spattemp.density(Q2_2021_owin)\n\nQ1_2021_stkde &lt;- spattemp.density(Q1_2021_owin)\n\n\n\n\n7.3 Plotting STKDE Outputs\nLet’s plot our animated spatio-temporal KDE outputs for each quarter.\n\n7.3.1 2024 Q1-2 STKDE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nAt the start of 2024 Q1, we see that the kernel density estimate of Myanmar conflicts tend to move sporadically where there are no specific patterns but in 2024 Q2, we start seeing conflict events occurring more intensely in Central and Southern Myanmar.\n\n\n\n\n7.3.2 2023 Q1-Q4 STKDE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFrom 2023 Q1 to Q3, there is a noticeable cluster of conflict events happening in Central and Southern regions of Myanmar than the other parts of the country. In 2023 Q4, we can notice more dispersion in conflict events across Myanmar, spreading into Western and Eastern regions. Throughout 2023, conflict events are least observed in North Myanmar.\n\n\n\n\n7.3.3 2022 Q1-Q4 STKDE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nSimilar to 2023, the spread of conflict events in 2022 is largely clustered in Central and Southen parts of Myanmar. However, we do see some jitters in conflict trends in 2022 Q1 with a rare sight of conflicts in the far North of Myanmar and occasional conflicts in Southern Myanmar.\n\n\n\n\n7.3.4 2021 Q1-Q4 STKDE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFinally, armed conflicts in 2021 is by far the most random spread of armed conflicts throughout Myanmar. There is also a high intensity of conflicts in South Myanmar, particularly in the state of Yangon while we rarely see conflicts occurring in the extreme North of Myanmar.\n\n\n\n\n7.3.5 OpenStreetMap in Myanmar - Spatio Temporal\nWe can observe the spatio-temporal conflict patterns per quarter using OpenStreetMap as well.\n\n# Get yearly conflict data\nyear_2024 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter %in% c(\"2024 Q1\", \"2024 Q2\")) %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nyear_2023 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter %in% c(\"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\")) %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nyear_2022 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter %in% c(\"2022 Q1\", \"2022 Q2\", \"2022 Q3\", \"2022 Q4\")) %&gt;%\n  mutate(DayofYear = yday(event_date))\n\nyear_2021 &lt;- conflict_data_sf %&gt;%\n  filter(year_quarter %in% c(\"2021 Q1\", \"2021 Q2\", \"2021 Q3\", \"2021 Q4\")) %&gt;%\n  mutate(DayofYear = yday(event_date))\n\n# Create ppp object per quarter\nyear_2024_ppp &lt;- year_2024 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nyear_2023_ppp &lt;- year_2023 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nyear_2022_ppp &lt;- year_2022 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\nyear_2021_ppp &lt;- year_2021 %&gt;% \n  select(DayofYear) %&gt;%\n  as.ppp()\n\n# Mask the ppp object with owin object\nyear_2024_owin &lt;- year_2024_ppp[myanmar_owin]\nyear_2023_owin &lt;- year_2023_ppp[myanmar_owin]\nyear_2022_owin &lt;- year_2022_ppp[myanmar_owin]\nyear_2021_owin &lt;- year_2021_ppp[myanmar_owin]\n\nyear_2024_owin &lt;- rescale(year_2024_owin, 1000, \"km\")\nyear_2024_stkde &lt;- density(year_2024_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nyear_2023_owin &lt;- rescale(year_2023_owin, 1000, \"km\")\nyear_2023_stkde &lt;- density(year_2023_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nyear_2022_owin &lt;- rescale(year_2022_owin, 1000, \"km\")\nyear_2022_stkde &lt;- density(year_2022_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\nyear_2021_owin &lt;- rescale(year_2021_owin, 1000, \"km\")\nyear_2021_stkde &lt;- density(year_2021_owin, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\n\n\n\nSet up raster and projection\nraster_2024 &lt;- raster(year_2024_stkde)\nraster_2023 &lt;- raster(year_2023_stkde)\nraster_2022 &lt;- raster(year_2022_stkde)\nraster_2021 &lt;- raster(year_2021_stkde)\n\nprojection(raster_2024) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_2023) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_2022) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_2021) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\n\n\n\n# Plot KDE Map on OpenStreetMap\nraster_quarters &lt;- list('raster_2024','raster_2023','raster_2022','raster_2021')\n\n# Set tmap mode to view\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\n# Function to create tmap for each raster\ncreate_tmap &lt;- function(raster_var) {\n  kde_fixed_output &lt;- tm_basemap(server = \"OpenStreetMap.HOT\") +\n    tm_basemap(server = \"Esri.WorldImagery\") +\n    tm_shape(get(raster_var)) +  # Dynamically get the raster variable\n    tm_raster(\"layer\",\n              n = 10,\n              title = paste(raster_var),\n              alpha = 0.6,\n              palette = c(\"#fafac3\",\"#fd953b\",\"#f02a75\",\"#b62385\",\"#021c9e\")) +\n    tm_shape(boundary_sf) +\n    tm_polygons(alpha=0.1, id=\"DT\") +\n    tmap_options(check.and.fix = TRUE)\n  \n  return(kde_fixed_output)\n}\n\n# Create a list of tmap objects by iterating over the raster_quarters list\ntmap_list &lt;- lapply(raster_quarters, create_tmap)\n\n# Arrange and display the tmaps\ntmap_arrange(tmap_list, ncol = 2, nrow = 2, sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe plots uncover the increasing levels of conflicts across each quarter. Interestingly, 2021 Q1 begins with higher concentration of armed conflicts in Southern and Eastern parts of Myanmar, but gradually becomes more concentrated in the Central districts. From 2022 Q4 onwards, we see that conflicts have spread outside the core central region of Myanmar towards the Western region. Conflicts return to occurring more frequently in the Central districts like Yinmarbin and Sagaing in 2024 Q1 and Q2,"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html#nd-order-spatio-temporal-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html#nd-order-spatio-temporal-point-pattern-analysis",
    "title": "Take-home Exercise 1 - Part 2",
    "section": "8. 2nd Order Spatio-Temporal Point Pattern Analysis",
    "text": "8. 2nd Order Spatio-Temporal Point Pattern Analysis\nSimilar to the 2nd order spatial analysis in section 6, I want to explore spatio-temporal trends of Myanmar’s conflicts and how the events differ in distribution, from quarter to quarter. I’ll delve into the four districts I’m most interested in, that is the districts with the highest proportions of conflicts - Yinmarbin, Shwebo, Pakokku and Mandalay.\n\n8.1 Using K-Function Estimation\n\n8.1.1 Yinmarbin District\nWe’ll want to compute the K-Function by quarters via Kest() by iterating over each unique quarter in date format, then plotting an animated graph of the K-Function outputs per quarter.\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Yinmarbin District\n# Set up yinmarbin_ppp_owin_list\nconflict_yinmarbin &lt;- conflict_data_sf %&gt;% filter(DT == \"Yinmarbin\")\nunique_quarter &lt;- unique(conflict_yinmarbin$year_quarter)\nboundary_yinmarbin &lt;- filter(boundary_sf, DT == \"Yinmarbin\")\nyinmarbin_owin &lt;- as.owin(boundary_yinmarbin)\nyinmarbin_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_yinmarbin %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[yinmarbin_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  yinmarbin_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\nPlot K-function for Yinmarbin District\nlibrary(magick)\n\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_k_function\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n  K_result &lt;- Kest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_k_function/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_k_function/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_k_function/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nWe can observe how the observed line (K-iso) is constantly above the actual line (K-pois) from 2021 Q2 to 2024 Q2. This confirms that conflict points in Yinmarbin are highly clustered. In fact, it is more clustered together than expected by the null hypothesis. There is no K-function outputted for 2021 Q1 as no conflict points were observed in Yinmarbin District for that time period.\n\n\n\n\n\n\n\n\nNote\n\n\n\nRipley’s Correction provides a way to mitigate the bias introduced by points near the edge of the study window by accounting for the reduced area for point comparisons near the edges. Hence, this results in a a more accurate estimate of the spatial distribution as seen in the slight difference between actual and expected K-function.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of conflict events in Myanmar are randomly distributed.\nH1= The distribution of conflict events in Myanmar are not randomly distributed.\nThe null hypothesis will be rejected if the observed K-function lies above/below the theoretical K-function and envelope.\n\nBy using envelop(), we can get a more robust interpretation by comparing the observed K-function against a simulation envelope of K-functions generated under the null hypothesis.\n\n\nMonta Carlo Simulation for Yinmarbin District\nlibrary(magick)\n\n# Unique quarters of the year in the dataset\nunique_quarter &lt;- unique(conflict_yinmarbin$year_quarter)\n\n# Create a directory to store PNG frames\npath &lt;- file.path(\"k_function_monta_carlo\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the K-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n  \n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"k_function_monta_carlo/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"k_function_monta_carlo/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"k_function_monta_carlo/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nI noticed that the observed line has a somewhat substantial deviation above the upper envelop (shaded region) generated from the Monte Carlo simulation. This indicates a strong tendancy for points to be clustered in the Yinmarbin district. Since this occurs across a wide range of distances, it implies that clustering is a prominent feature of the spatial distribution.\n\n\n\n\n8.1.2 Shwebo District\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Shwebo District\n# Set up shwebo_ppp_owin_list\nconflict_shwebo &lt;- conflict_data_sf %&gt;% filter(DT == \"Shwebo\")\nunique_quarter &lt;- unique(conflict_shwebo$year_quarter)\nboundary_shwebo &lt;- filter(boundary_sf, DT == \"Shwebo\")\nshwebo_owin &lt;- as.owin(boundary_shwebo)\nshwebo_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_shwebo %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[shwebo_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  shwebo_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFor the Shwebo District, the observed line (K-iso) also lies constantly above the actual line (K-pois) from 2021 Q2 to 2024 Q2, indicating clustering at all distances ‘r’ of our spatial points. Interestingly, conflict events in 2021 Q1 displayed some tendancy towards a dispersed point pattern as the observed K-function lies slightly below the actual line at a distance of 17km.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted.\n\n\n\n\n\n\n\nObservations\n\n\n\nIn 2021 Q1, a sharp jagged plot is generated due to the smaller dataset size of conflicts in Shwebo. In 2024 Q2, we see the highest variability in spatial patterns which results in a larger envelope size\nGenerally, the observed line has a smaller deviation above the upper envelop than in the Yinmarbin data. This indicates a a somewhat intense level of clustering in the Shwebo district and remains more clustered than would be expected if points were distributed randomly..\n\n\n\n\n8.1.3 Pakokku District\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Pakokku District\n# Set up pakokku_ppp_owin_list\nconflict_pakokku &lt;- conflict_data_sf %&gt;% filter(DT == \"Pakokku\")\nunique_quarter &lt;- unique(conflict_pakokku$year_quarter)\nboundary_pakokku &lt;- filter(boundary_sf, DT == \"Pakokku\")\npakokku_owin &lt;- as.owin(boundary_pakokku)\npakokku_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_pakokku %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[pakokku_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  pakokku_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe observed K-function lies above the expected K-function outputted from 2021 to 2024, indicating clustering at all distances ‘r’ of our spatial points. However, we can observe milder clustering from 2021 Q4 to 2024 Q2 as the magnitude of deviation is significantly smaller than the period of 2021 Q1 to 2021 Q3.\n\n\n2) Performing Complete Spatial Randomness Test\n\n\n\n\n\n\n\nObservations\n\n\n\nIn 2021 Q2, we see a large envelope which reflects greater variability in the expected K-function and this could stem from the mix of both clustering and dispersion across Myanmar for that period. Generally from 2021 Q1 to 2024 Q2, clustering is evident as the observed K-function continues to lie above the envelope.\n\n\n\n\n8.1.4 Mandalay District\n1) Computing K-function Estimation\n\n\nPrepare Dataset for Mandalay District\n# Set up mandalay_ppp_owin_list\nconflict_mandalay &lt;- conflict_data_sf %&gt;% filter(DT == \"Mandalay\")\nunique_quarter &lt;- unique(conflict_mandalay$year_quarter)\nboundary_mandalay &lt;- filter(boundary_sf, DT == \"Mandalay\")\nmandalay_owin &lt;- as.owin(boundary_mandalay)\nmandalay_ppp_owin_list &lt;- list()\n\nfor (quarter in unique_quarter) {\n  quarter_data &lt;- conflict_mandalay %&gt;% \n    filter(year_quarter == quarter)\n\n  ppp_obj &lt;- as.ppp(quarter_data$geometry)\n  ppp_owin_obj &lt;- ppp_obj[mandalay_owin]\n  ppp_owin_obj_km &lt;- rescale(ppp_owin_obj, 1000, \"km\")\n  mandalay_ppp_owin_list[[quarter]] &lt;- ppp_owin_obj_km\n}\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe degree of clustering is less pronounced in Mandalay than the other districts since the gap between the observed line and the theoretical line is smaller. Clustering is large-scale in Mandalay where statistically significant clustering patterns are seen in larger distance ranges.\n\n\n2) Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted.\n\n\n\n\n\n\n\nObservations\n\n\n\nWe see the highest variability in spatial patterns in 2024 Q1 and Q2 which indicates that some areas in Mandalay District are more clustered with conflict events while other areas are more evenly spaced.\nWe can confirm statistically significant clustering from 2021 Q1 to 2023 Q3 as K value is larger than the upper confidence of the envelope than in 2024 Q1 and Q2. There is also strong evidence of clustering especially at larger distances which means Mandalay District faces large-scale clustering.\n\n\n\n\n\n8.2 Using L-Function Estimation\n\n8.2.1 Yinmarbin District\n1) Computing L-function Estimation\n\n\nPlot L-function for Yinmarbin District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"sec_order_L_function\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n  \n  # Calculate the L-function\n  L_result &lt;- Lest(ppp_owin_obj_km, correction = \"Ripley\")\n\n  # Create PNG filename\n  png_filename &lt;- file.path(\"sec_order_L_function/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(L_result, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(km)\",\n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"sec_order_L_function/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nFirstly, the L-function plot appears more zig-zag than the K-function as the L-function can magnify small fluctuations in the K-function. Secondly, the theoretical line (dotted) is fixed at 0 where L(d)−r=0 which is an expected behavior under Complete Spatial Randomness.\nFrom 2022 Q1- Q3, all of 2023 and 2024 Q2, there is large scale clustering as the observed line (K-iso) consistently lies above the theoretical line (K-pois) particularly at larger spatial distances. This suggests conflicts in Yinmarbin are clustered across the district during this time period.\nFrom 2021, 2022 Q4 and 2024 Q1, there is a decreasing K value observed which indicates more localised clustering in specific towns on Yinmarbin.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n\nMonta Carlo Simulation for Yinmarbin District\nlibrary(magick)\n# Create a directory to store PNG frames\npath &lt;- file.path(\"L_function_monta_carlo\", \"conflict_yinmarbin\")\nif (!dir.exists(path)) {\n  dir.create(path, recursive = TRUE)\n}\n\n# Loop through each unique quarter and plot the L-function\nfor (quarter in names(yinmarbin_ppp_owin_list)) {\n  ppp_owin_obj_km &lt;- yinmarbin_ppp_owin_list[[quarter]]\n\n  # Calculate the envelope\n  K_result &lt;- envelope(ppp_owin_obj_km, Kest, nsim = 39, \n                       rank = 1, glocal=TRUE)\n  # Create PNG filename\n  png_filename &lt;- file.path(\"L_function_monta_carlo/conflict_yinmarbin\", \n                            sprintf(\"frame_%s.png\", quarter))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(K_result, \n       main = paste(\"Yinmarbin District -\",quarter))\n  dev.off()\n}\n\n# Read all PNG files from the frames directory\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_yinmarbin\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1)\noutput_path &lt;- \"L_function_monta_carlo/kfunction_yinmarbin.gif\"\nimage_write(animation, path = output_path)\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe periods of 2022 Q4, 2024 Q1 and 2024 Q2 shows a wider envelope which indicates that some areas are clustered while others are more evenly spaced in Yinmarbin. There’s also more widespread clustering observed in all of 2023 and in 2024 Q2 where deviation of L values above the envelope are signifiantly larger at bigger distances scales.\n\n\n\n\n8.2.2 Shwebo District\n1) Computing L-function Estimation\n\n# Display Plot\nframes &lt;- image_read(list.files(\"sec_order_L_function/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe 2021 Q1 observed L values are much more jagged than other quarters as we have a smalller dataset of conflicts in Shwebo district of that quarter. In general, we see stronger clustering in bigger areas of the district which suggests wide-scale clustering of conflicts.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n# Display Plot\nframes &lt;- image_read(list.files(\"L_function_monta_carlo/conflict_shwebo\", full.names = TRUE, pattern = \"*.png\"))\nanimation &lt;- image_animate(image_join(frames), fps = 1) \nanimation\n\n\n\n\n\n\n\n\nObservations\n\n\n\n2021 Q2 and 2024 Q2 has the highest variability in spatial points with both clustering and dispersion patterns under the CRS test in Shwebo district. Nonetheless, we can confirm strong significance of widespread clustering of conflicts throughout all quarters in Shwebo where the observed L values like above the theoretical values simulated, particularly at larger distance scales.\n\n\n\n\n8.2.3 Pakokku District\n1) Computing L-function Estimation\n\n\n\n\n\n\n\nObservations\n\n\n\nWe generally see strong evidence of localised clustering in the Pakokku district with weaker significance of clustering in bigger distance scales. This means that specific towns in Pakokku have more intense hotspots than others.It is worth noting that the jagged ouputs from the observed L values in 2021 Q1 and Q2 stems from our smaller data conflict points for these periods.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n\n\n\n\n\n\nObservations\n\n\n\nThe results of the simulation produces the greatest variability in conflict activity in Pakokku in 2021 Q2 and 2024 Q1. The CSR tests confirms significant clustering throughout all quarters in Pakokku. We can confirm that localised clustering are more promoinent in 2021 Q2, 2022 Q3 and 2024 Q1 where the L-values deviates more above the envelope at smaller distances. The remaning quarters show strong evidence of widespread clustering across a bigger distribution of Pakokku district.\n\n\n\n\n8.2.4 Mandalay District\n1) Computing L-function Estimation\n\n\n\n\n\n\n\nObservations\n\n\n\nGenerally from 2021 to 2024, we see an upward trend of observed L values with sharp fluctuations as distance increases.\nAt both small and large distance scales, we can observe deviations of the observed line above the theoretical line which suggests statistically strong evidence of clustering across Mandalay, where clustering is present at local towns and across Mandalay.\n\n\n2) Performing Complete Spatial Randomness Test\nI will also perform monta carlo simulation test using envelope() of the spatstat package.\n\n\n\n\n\n\n\nObservations\n\n\n\nIn 2021 Q1 and 2024 Q1-2, we can observe a bigger envelope from the CSR test especially at larger distances. This means certain areas in Mandalay show strong clustering (hotspots), while others are more dispersed, leading to greater variability in the overall spatial structure of conflict events.\nAdditionally, throughout 2021 to 2024, there is prominent evidence of hotspots and clustering throughout Mandalay since observed L values deviate above the theoretical L values, across a range of distances."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html#conclusion",
    "title": "Take-home Exercise 1 - Part 2",
    "section": "9. Conclusion",
    "text": "9. Conclusion\nMy analysis has revealed how central districts (i.e., Yinmarbin, Shwebo, Pakokku and Mandalay) and western states (i.e. Yangon) have experienced intense clashes between state forces and politica/identity militias, while northern Myanmar sees high conflict levels between rebels and political militias. However, one should also consider the size of a state/district when computing KDE since a smaller area could increase the density of conflict quite significantly.\nThe political militia are found to be less involved with unarmed civilians than state forces, rebels and other policial militia. Conversely, civilians are seen to be embroiled mostly in conflicts resulting from strategic development and violence against civilians events, primarily in Central and Western Myanmar. Fortunately, conflicts involving explosions or remote violence is not as intense against civilians but this raises a great concern on the humanitarian crisis faced by civilians in Myanmar, especially since armed conflicts tend to occur repeatedly in the same parts of each state which indicates an unceasing cycle of conflicts in Myanmar.\nAdditionally, results from the Monte Carlo CSR test indicated a strong tendency for points to be clustered across a wide range of distances, implying that clustering is a prominent feature of the spatial distribution in districts like Sagaing, Mandalay, Magway and Yangon. Conversely, there are specific conflict hot spots observed in certain towns of the district which means localised clustering are also present.\nIt can also be derived that in 2021 Q1 and Q2, conflict points are less intense and slightly more random in its distribution. The intensity of conflicts continue to soar from 2022 Q1 to 2024 Q2 with both localised and widespread conflict events during these period of time."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html#my-reflections",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html#my-reflections",
    "title": "Take-home Exercise 1 - Part 2",
    "section": "10. My Reflections",
    "text": "10. My Reflections\nThis take-home exercise has significantly expanded my understanding and underscored the severe humanitarian conflicts in Myanmar, revealed through this spatial and spatio-temporal point pattern analysis.\nA key takeaway from Myanmar’s humanitarian conflict is how complex the interplay of ethnic, political, and religious struggles has been and continues to be an on-going humanitarian crisis, involving the military, ethnic armed groups, political militias, and civilians.\nLastly, running computationally intensive codes such as envelope() for 2nd order spatial analysis may differ in processing speed from one student to another. My system, however, is running with 8 cores and it does take a lengthy amount of time for processing the large 40,000+ rows of conflict data.\nHence, I would suggest other students to begin their take-home exercise as early as possible to provide buffer time for processing the data, handling code bugs and even data cleaning errors."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html#references",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1_Part2.html#references",
    "title": "Take-home Exercise 1 - Part 2",
    "section": "11. References",
    "text": "11. References\n\nCrawley, M. J. (2007). The R Book. Wiley.\nCrisis Group. (2024, August 27). Breaking Away: The Battle for Myanmar’s Rakhine State. https://www.crisisgroup.org/asia/south-east-asia/myanmar/339-breaking-away-battle-myanmars-rakhine-state \nFarge, E., & Mantovani, C. (2024, September 17). Myanmar military stepping up civilian killings and arrests, says UN report. https://www.reuters.com/world/asia-pacific/myanmar-military-intensifies-civilian-killings-arrests-says-un-report-2024-09-17/#:~:text=The%20report%20by%20the%20United,the%20military%20since%20the%20coup. \nFishbein, E., & Lusan, N. N. (2022, December 14). ‘Afraid of the gun’: Military coup fuels Myanmar resource grab. Al Jazeera. https://www.aljazeera.com/news/2022/12/14/afraid-of-the-gun-military-coup-fuels-myanmar-resource-grab \nRajagopalan, B., Lall, U., & Tarboton, D. (1997). Evaluation of kernel density estimation methods for daily precipitation resampling. Springer-Verlag.\nShen, B., Xiang Xu, Plaza, A., & Huang, Q. (2020, November 15). Unfolding Spatial-Temporal Patterns of Taxi Trip based on an Improved Network Kernel Density Estimation. MDPI. Retrieved September 22, 2024, from https://www.mdpi.com/2220-9964/9/11/683 \nThe Stata Journal. (2003). Adaptive kernel density estimation. Sage Journals. https://journals.sagepub.com/doi/pdf/10.1177/1536867X0300300204"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "In 2022, 567,609 drug users in ASEAN were treated, in which Thailand was found to have the highest number of drug users requiring treatment among ASEAN countries, followed by Malaysia, Indonesia, Laos, the Philippines, and Singapore. (Kahanto M., et al, 2022) Drug abuse is a significant social issue in Thailand, with profound health, financial, and societal implications. Positioned near the Golden Triangle—one of the largest drug production areas in Asia—Thailand faces ongoing challenges due to its geographical proximity and extensive transportation routes, which facilitate drug trafficking. Within Thailand, drug abuse is particularly prevalent among the youth, with approximately 2.7 million young people involved. Of those aged 15–19, around 300,000 are in need of drug treatment, and vocational students are disproportionately affected compared to their peers in secondary school.\nThis underscores the importance of drug treatment in addressing the complex problem of substance abuse and reduces the societal costs associated with drug abuse, such as healthcare expenses, lost productivity, and crime. Hence, to better allocate resources and develop targeted interventions, it is crucial to understand where drug abuse is most concentrated and how it spreads geographically. This is where geospatial analysis becomes essential. \nIn this exercise, I will utilise geospatial analysis methods to explore the province-level dynamics of drug abuse in Thailand. This will involve preparing a study area layer as sf polygon features at the province level, including Bangkok, and creating a drug abuse indicators layer within this study area. Using these extracted data layers, I will conduct global spatial autocorrelation analysis using sfdep methods, followed by local spatial autocorrelation analysis. Finally, I will describe the spatial patterns revealed by determining whether key indicators are spatially dependent, and identifying trends of clusters, outliers and hotspots over time."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#setting-the-scene-geospatial-analysis-of-drug-abuse-in-thailand",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#setting-the-scene-geospatial-analysis-of-drug-abuse-in-thailand",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "In 2022, 567,609 drug users in ASEAN were treated, in which Thailand was found to have the highest number of drug users requiring treatment among ASEAN countries, followed by Malaysia, Indonesia, Laos, the Philippines, and Singapore. (Kahanto M., et al, 2022) Drug abuse is a significant social issue in Thailand, with profound health, financial, and societal implications. Positioned near the Golden Triangle—one of the largest drug production areas in Asia—Thailand faces ongoing challenges due to its geographical proximity and extensive transportation routes, which facilitate drug trafficking. Within Thailand, drug abuse is particularly prevalent among the youth, with approximately 2.7 million young people involved. Of those aged 15–19, around 300,000 are in need of drug treatment, and vocational students are disproportionately affected compared to their peers in secondary school.\nThis underscores the importance of drug treatment in addressing the complex problem of substance abuse and reduces the societal costs associated with drug abuse, such as healthcare expenses, lost productivity, and crime. Hence, to better allocate resources and develop targeted interventions, it is crucial to understand where drug abuse is most concentrated and how it spreads geographically. This is where geospatial analysis becomes essential. \nIn this exercise, I will utilise geospatial analysis methods to explore the province-level dynamics of drug abuse in Thailand. This will involve preparing a study area layer as sf polygon features at the province level, including Bangkok, and creating a drug abuse indicators layer within this study area. Using these extracted data layers, I will conduct global spatial autocorrelation analysis using sfdep methods, followed by local spatial autocorrelation analysis. Finally, I will describe the spatial patterns revealed by determining whether key indicators are spatially dependent, and identifying trends of clusters, outliers and hotspots over time."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#methods-used",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#methods-used",
    "title": "Take-home Exercise 2",
    "section": "2. Methods Used",
    "text": "2. Methods Used\n\n2.1 Spatial Autocorrelation\n\n\n\n\n\nThis quote from Tobler (1970) highlights the essence of spatial autocorrelation, emphasising the importance of studying how values of the same variable are interconnected across space. By examining spatial dependence, we can better understand local and global patterns and variations. This law suggests that phenomena that are geographically close to each other are more likely to be similar or have some kind of spatial relationship compared to phenomena that are farther apart. \nIt is also important to note that spatial structure and spatial autocorrelation are inherently interconnected (Tiefelsdorf, 1998):\n\nSpatial structure encompasses all the connections through which the autocorrelated phenomenon spreads.\nWithout a significant autocorrelated process, spatial structure cannot be empirically observed.\n\nThus, the observed spatial distribution is regarded as a reflection of the underlying spatial process. When spatial autocorrelation is present, the value of a variable at a given observation is connected to the values of that same variable at neighbouring observations:\n\n\n\n\n\nConfiguration of areas showing different types of autocorrelation (Nguyen K. et al., 2022)\n\nPositive Spatial Autocorrelation occurs when similar values of the variable cluster geographically.\nNegative Spatial Autocorrelation arises when dissimilar values are geographically close, indicating that nearby locations tend to differ more than those that are farther apart. This situation often reflects spatial competition.\nIn the absence of spatial autocorrelation, the distribution of observations can be considered random.\n\n\n\n2.2 Cluster and Outlier Analysis\nCluster and Outlier Analysis can be effectively applied using Local Moran’s I, Local Geary’s C, Moran scatterplots, and LISA Cluster Maps to identify and understand spatial patterns in data. Here’s how each of these methods can be utilised\n\n2.2.1 Local Moran’s I and Local Geary’s C\n\nLocal Moran’s I: This statistic assesses local spatial autocorrelation by measuring the degree of similarity of a location’s value to those of its neighbours. It identifies clusters of high or low values (hotspots and cold spots) and outliers (areas where a value is significantly different from its neighbours). By calculating Local Moran’s I for each location, we can highlight areas with significant spatial dependence, helping to identify regions where interventions may be needed.\nLocal Geary’s C: Similar to Local Moran’s I, Local Geary’s C focuses on differences rather than similarities. It quantifies the spatial variation between nearby locations, emphasising dissimilarity. This method can help detect spatial competition, where nearby areas have contrasting values. By using Local Geary’s C, we can uncover regions that may experience conflicting trends or behaviours, providing insights into localised dynamics.\n\n\n\n2.22. Moran Scatterplot\n\nThe Moran scatterplot visualises the relationship between the value of a variable at a location and the average value of its neighbours. We can plot scatterplot to represent a location, with the x-axis showing the local mean of neighbouring values and the y-axis showing the local value. \nPlots like this can help us in identifying clusters (high-high or low-low) and outliers (high-low or low-high). The scatterplot can reveal spatial patterns that are not immediately obvious.\n\n\n\n2.2.3. LISA Cluster Map\n\nA LISA Cluster Map visually represents the results of Local Indicators of Spatial Association, indicating the spatial clusters of similar values (hotspots) and outliers. \nI will use these maps to quickly identify regions of interest such that areas identified as hotspots will be marked in red to signify high values surrounded by high values, while cold spots will be marked in blue for low values surrounded by low values. Outliers will be highlighted in contrasting colours.\n\n\n\n\n2.3 Emerging Hot Spot Analysis\nThere are different methods for analysing spatial patterns and detecting hotspots including spatial autocorrelation and cluster analysis. Emerging Hot Spot Analysis (EHSA) is a specific spatio-temporal method used to examine hotspots over a designated observation period. It integrates two well-known techniques: the traditional Getis-Ord Gi* statistic for hotspot detection and the Mann-Kendall test for assessing monotonic trends over time. The main goal of EHSA is to analyse how hot and cold spots change over time, focusing on whether these areas are increasing in intensity, decreasing, or remaining constant."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#importing-packages-into-r",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#importing-packages-into-r",
    "title": "Take-home Exercise 2",
    "section": "3. Importing Packages into R",
    "text": "3. Importing Packages into R\nLet’s load all the required packages for conducting our analysis.\n\nsf : provides a standardised way to encode spatial vector data in R environment, facilitating spatial data operations and analysis.\nst : create simple features from numeric vectors, matrices, or lists, enabling the representation and manipulation of spatial structures in R.\ntidyverse : a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structure.\nsfdep : for computing spatial weights, global and local spatial autocorrelation statistics\ntmap : for creating static and interactive visualisations and maps.\nggplot2 : for creating advanced visualisations, graphics and maps using the Grammar of Graphics.\nknitr : for dynamic report generation in R using Literate Programming techniques.\nKendall : for computing the Kendall rank correlation and Mann-Kendall trend test\n\n\npacman::p_load(sf, st, tidyverse, lubridate, sfdep, tmap, ggplot2, knitr, Kendall)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#importing-datasets-into-r",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#importing-datasets-into-r",
    "title": "Take-home Exercise 2",
    "section": "4. Importing Datasets into R",
    "text": "4. Importing Datasets into R\n\n\n\n\n\nWe will be leveraging two datasets in this exercise. The first dataset to be used is Thailand’s provincial boundary is tha_admbnda_adm1_rtsd_20220121 which exists in ESRI .shp format and is based on the Thailand geographic coordinate system. This dataset is extracted from Thailand - Subnational Administrative Boundaries via the HDX portal.\nThe second dataset thai_drug_offenses_2017_2022 consists of aspatial data in a CSV format that contains reported cases of drug offences in Thailand from 2017 to 2022. The dataset is extracted from Thailand Drug Offenses [2017-2022] in Kaggle.\n\n4.1 Importing Geospatial Data\nIn this section, st_read() of sf package will be used to import tha_admbnda_adm1_rtsd_20220121 dataset into the R environment. The st_transform() function below converts the CRS of the sf object to EPSG:32647 which maps to Thailand’s UTM zone, particularly for Western/Central parts.\n\nthai_boundary &lt;- st_read(dsn = \"data/geospatial\",layer = \"tha_admbnda_adm1_rtsd_20220121\") %&gt;% st_transform(crs = 32647)\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n# Inspect data\nglimpse(thai_boundary)\n\nRows: 77\nColumns: 17\n$ Shape_Leng &lt;dbl&gt; 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area &lt;dbl&gt; 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    &lt;chr&gt; \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    &lt;chr&gt; \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE &lt;chr&gt; \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    &lt;chr&gt; \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    &lt;chr&gt; \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE &lt;chr&gt; \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       &lt;date&gt; 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    &lt;date&gt; 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    &lt;date&gt; -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((674339.8 15..., MULTIPOLYGON (…\n\n\nLet’s verify the coordinate reference systems of the thai_boundary object to ensure the assignment of the correct CRS value.\n\nst_crs(thai_boundary)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nBefore we delve into further data analysis, it is crucial that we first understand the levels of administration that makes up Thailand today. In particular, Thailand has 4 levels of administration, i.e. level 0 (country), 1 (province), 2 (district), and 3 (sub-district) boundaries. Thailand comprises 76 provinces (known as จังหวัด in Thai or changwat in English), along with one special administrative area, Bangkok, the capital. \n\nThese provinces function as the main local government units and possess legal personhood. \nEach province is subdivided into amphoe (districts), which are further broken down into tambon (sub-districts), representing the next tier of local governance. \nFor this analysis, I will only focus on the province administration level.\n\nWe can visualise the structure of our geospatial object as such.\n\ntmap_mode(\"plot\")\n\n# Plot the provinces of Thailand with labels\ntm_shape(thai_boundary) +\n  tm_borders(col = \"black\", lwd = 0.3, alpha = 0.6) + \n  tm_polygons()+\n  tm_layout(\n    main.title = \"Provinces of Thailand\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.show = FALSE,\n    frame = FALSE\n  ) +\n  tm_text(\"ADM1_EN\", size = 0.2)\n\n\n\n\n4.2 Importing Aspatial Data\nIn this section, read_csv() of sf package will be used to import the csv file into the R environment. The output is a R dataframe class containing 5 unique columns of drug offences in Thailand from 2017 - 2022.\n\ndrug_cases &lt;- read_csv(\"data/aspatial/thai_drug_offenses_2017_2022.csv\")\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(drug_cases)\n\n# A tibble: 6 × 5\n  fiscal_year types_of_drug_offenses no_cases province_th   province_en         \n        &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;               \n1        2017 drug_use_cases            11871 กรุงเทพมหานคร  Bangkok             \n2        2017 drug_use_cases              200 ชัยนาท         Chai Nat            \n3        2017 drug_use_cases              553 นนทบุรี         Nonthaburi          \n4        2017 drug_use_cases              450 ปทุมธานี        Pathum Thani        \n5        2017 drug_use_cases              378 พระนครศรีอยุธยา Phra Nakhon Si Ayut…\n6        2017 drug_use_cases              727 ลพบุรี          Loburi              \n\n\n\n\n\n\n\n\n\n\nColumn Name\nData Type\nDescription\n\n\nfiscal_year\n&lt;dbl&gt;\nThe fiscal year during which the drug offenses were recorded.\n\n\ntypes_of_drug_offenses\n&lt;chr&gt;\nThe specific type or category of drug offence being reported.\n\n\nno_cases\n&lt;dbl&gt;\nThe total number of cases recorded for the specific combination of fiscal year\n\n\nprovince_th\n&lt;chr&gt;\nThe name of the province in Thailand, written in Thai.\n\n\nprovince_en\n&lt;chr&gt;\nThe name of the province in Thailand, written in English.\n\n\n\n\n\n4.3 Performing a Join on Geometry Column\nNext, we will want to aggregate the total number of drug use cases according to each 77 provinces in Thailand. Here, I use left_join() to associate each drug use case to its respective province (i.e. the geometry of the drug case).\n\nlibrary(dplyr)\n\n# Step 1: Count rows before the join\ninitial_row_count &lt;- nrow(drug_cases)\n\n# Step 2: Perform the join and convert to sf\ndrug_cases &lt;- drug_cases %&gt;%\n  left_join(thai_boundary %&gt;% select(geometry, ADM1_EN, ADM1_PCODE), \n            by = c(\"province_en\" = \"ADM1_EN\")) %&gt;%\n  st_as_sf()\n\n# Step 3: Count rows after the join\nfinal_row_count &lt;- nrow(drug_cases)\n\n# Step 4: Check if rows were dropped\nif (initial_row_count != final_row_count) {\n  cat(\"Rows were dropped during the join.\\n\")\n  cat(\"Rows before join:\", initial_row_count, \"\\n\")\n  cat(\"Rows after join:\", final_row_count, \"\\n\")\n} else {\n  cat(\"No rows were dropped during the join.\\n\")\n}\n\nNo rows were dropped during the join.\n\nglimpse(drug_cases)\n\nRows: 7,392\nColumns: 7\n$ fiscal_year            &lt;dbl&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,…\n$ types_of_drug_offenses &lt;chr&gt; \"drug_use_cases\", \"drug_use_cases\", \"drug_use_c…\n$ no_cases               &lt;dbl&gt; 11871, 200, 553, 450, 378, 727, 820, 69, 127, 2…\n$ province_th            &lt;chr&gt; \"กรุงเทพมหานคร\", \"ชัยนาท\", \"นนทบุรี\", \"ปทุมธานี\", \"พร…\n$ province_en            &lt;chr&gt; \"Bangkok\", \"Chai Nat\", \"Nonthaburi\", \"Pathum Th…\n$ ADM1_PCODE             &lt;chr&gt; \"TH10\", \"TH18\", \"TH12\", \"TH13\", \"TH14\", NA, \"TH…\n$ geometry               &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((674339.8 15..., MU…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#data-wrangling",
    "title": "Take-home Exercise 2",
    "section": "5. Data Wrangling",
    "text": "5. Data Wrangling\n\n5.1 Reduce Data Size\nTo reduce the memory load, we can drop the province names in Thai from our aspatial dataset as it is not relevant for this study.\n\ndrug_cases &lt;- subset(drug_cases, select = c(-province_th))\nhead(drug_cases)\n\nSimple feature collection with 6 features and 5 fields (with 1 geometry empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 577383.3 ymin: 1492136 xmax: 710569.3 ymax: 1704842\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 6\n  fiscal_year types_of_drug_offenses no_cases province_en             ADM1_PCODE\n        &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt;                   &lt;chr&gt;     \n1        2017 drug_use_cases            11871 Bangkok                 TH10      \n2        2017 drug_use_cases              200 Chai Nat                TH18      \n3        2017 drug_use_cases              553 Nonthaburi              TH12      \n4        2017 drug_use_cases              450 Pathum Thani            TH13      \n5        2017 drug_use_cases              378 Phra Nakhon Si Ayuttha… TH14      \n6        2017 drug_use_cases              727 Loburi                  &lt;NA&gt;      \n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [m]&gt;\n\n\nWe’ll also only retain columns that are most useful from thai_boundary.\n\nthai_boundary &lt;- subset(thai_boundary, select = c(Shape_Leng, Shape_Area, ADM1_EN, ADM1_PCODE, geometry))\nhead(thai_boundary)\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 628303 ymin: 1490796 xmax: 712440.5 ymax: 1636901\nProjected CRS: WGS 84 / UTM zone 47N\n  Shape_Leng Shape_Area                  ADM1_EN ADM1_PCODE\n1   2.417227 0.13133873                  Bangkok       TH10\n2   1.695100 0.07926199             Samut Prakan       TH11\n3   1.251111 0.05323766               Nonthaburi       TH12\n4   1.884945 0.12698345             Pathum Thani       TH13\n5   3.041716 0.21393797 Phra Nakhon Si Ayutthaya       TH14\n6   1.739908 0.07920961                Ang Thong       TH15\n                        geometry\n1 MULTIPOLYGON (((674339.8 15...\n2 MULTIPOLYGON (((687139.8 15...\n3 MULTIPOLYGON (((644817.9 15...\n4 MULTIPOLYGON (((704086 1575...\n5 MULTIPOLYGON (((662941.6 16...\n6 MULTIPOLYGON (((643472.8 16...\n\n\n\n\n5.2 Fixing Missing Values\nThere are no troublesome rows in the drug_cases dataframe.\n\nany(is.na(thai_boundary))\n\n[1] FALSE\n\n#thai_boundary[!complete.cases(st_drop_geometry(thai_boundary)), ]\n\n\nany(is.na(drug_cases))\n\n[1] TRUE\n\n\n\n5.2.1 Identify Missing Values\nWe can observe 192 reported offences that do not include the ADM1_PCODE as seen from how some rows contain empty values ‘NA’. We are also getting the 192 empty geometry values as returned from the null test below.\n\ndrug_cases %&gt;%\n  filter(is.na(ADM1_PCODE)) %&gt;%\n  select(province_en, ADM1_PCODE)\n\nSimple feature collection with 192 features and 2 fields (with 192 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 192 × 3\n   province_en ADM1_PCODE           geometry\n   &lt;chr&gt;       &lt;chr&gt;      &lt;MULTIPOLYGON [m]&gt;\n 1 Loburi      &lt;NA&gt;                    EMPTY\n 2 buogkan     &lt;NA&gt;                    EMPTY\n 3 Loburi      &lt;NA&gt;                    EMPTY\n 4 buogkan     &lt;NA&gt;                    EMPTY\n 5 Loburi      &lt;NA&gt;                    EMPTY\n 6 buogkan     &lt;NA&gt;                    EMPTY\n 7 Loburi      &lt;NA&gt;                    EMPTY\n 8 buogkan     &lt;NA&gt;                    EMPTY\n 9 Loburi      &lt;NA&gt;                    EMPTY\n10 buogkan     &lt;NA&gt;                    EMPTY\n# ℹ 182 more rows\n\n\nThe root cause of this problem lies in how these two province names were incorrectly spelled in the province_en column of drug_casses , causing an incomplete left_join() to be executed.\n\nunique(drug_cases[!complete.cases(st_drop_geometry(drug_cases)), ][c('province_en')])\n\nSimple feature collection with 2 features and 1 field (with 2 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2 × 2\n  province_en           geometry\n  &lt;chr&gt;       &lt;MULTIPOLYGON [m]&gt;\n1 Loburi                   EMPTY\n2 buogkan                  EMPTY\n\n\n\nthai_boundary %&gt;%\n  filter(ADM1_EN == \"Lop Buri\" | ADM1_EN == \"Bueng Kan\") %&gt;%\n  select(ADM1_PCODE, ADM1_EN) %&gt;%\n  as_tibble()\n\n# A tibble: 2 × 3\n  ADM1_PCODE ADM1_EN                                                    geometry\n  &lt;chr&gt;      &lt;chr&gt;                                            &lt;MULTIPOLYGON [m]&gt;\n1 TH16       Lop Buri  (((751293.3 1742960, 751337.4 1742928, 751437.2 1742942,…\n2 TH38       Bueng Kan (((965496 2045531, 965625.5 2045528, 965836.6 2045537, 9…\n\n\n\n\n5.2.2 Fix Missing Values Discovered\nLet’s fix these NA values by transforming the two province names to their correct names.\n\nStep 1: Replace Loburi –&gt; Lop Buri, buogkan –&gt; Bueng Kan\nStep 2: Replace ‘NA’ ADM1_PCDOE with the correct province code - TH16 and TH38 for Lop Buri and Bueng Kan respectively\nStep 3: Replace the existing geometry column in drug_cases with the right geometry\n\n\n# Extract the geometry for Lop Buri\nlop_buri_geometry &lt;- drug_cases %&gt;%\n  filter(province_en == \"Lop Buri\") %&gt;%\n  reframe(first_geometry = st_union(geometry)) %&gt;%  \n  pull(first_geometry)\n\n# Extract the geometry for Bueng Kan\nbueng_kan_geometry &lt;- drug_cases %&gt;%\n  filter(province_en == \"Bueng Kan\") %&gt;%\n  reframe(first_geometry = st_union(geometry)) %&gt;%\n  pull(first_geometry)\n\n# Fix incorrect province names\ndrug_cases &lt;- drug_cases %&gt;%\n  mutate(\n    province_en = case_when(\n      province_en == \"Loburi\" ~ \"Lop Buri\",\n      province_en == \"buogkan\" ~ \"Bueng Kan\",\n      TRUE ~ province_en  \n    )\n  )\n\n# Fix empty province code\ndrug_cases &lt;- drug_cases %&gt;%\n  mutate(ADM1_PCODE = ifelse(province_en == \"Lop Buri\" & \n                             is.na(ADM1_PCODE),\"TH16\", \n                      ifelse(province_en == \"Bueng Kan\" & \n                             is.na(ADM1_PCODE),\"TH38\", ADM1_PCODE)))\n\n# Fix empty geometry\nthai_boundary_no_geom &lt;- thai_boundary %&gt;%\n  select(ADM1_EN, geometry)\ndrug_cases &lt;- drug_cases %&gt;%\n  st_drop_geometry() %&gt;%\n  left_join(thai_boundary_no_geom, by = c(\"province_en\" = \"ADM1_EN\")) \ndrug_cases &lt;- st_as_sf(drug_cases)\n\nWe have successfully removed all NA values found in drug_cases.\n\nany(is.na(drug_cases))\n\n[1] FALSE\n\n\n\n# Check the updated drug_cases\ndrug_cases[!complete.cases(st_drop_geometry(drug_cases)), ]\n\nSimple feature collection with 0 features and 5 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 0 × 6\n# ℹ 6 variables: fiscal_year &lt;dbl&gt;, types_of_drug_offenses &lt;chr&gt;,\n#   no_cases &lt;dbl&gt;, province_en &lt;chr&gt;, ADM1_PCODE &lt;chr&gt;,\n#   geometry &lt;GEOMETRY [m]&gt;\n\n\n\n\n\n5.3 Create New total_cases Column\nNext, I create a new dataframe drug_cases_province to count the total number of cases per province.\n\ndrug_cases_province &lt;- drug_cases %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(\n    total_cases = sum(no_cases), \n    ADM1_PCODE = first(ADM1_PCODE),              \n    geometry = first(geometry), \n    .groups = \"drop\"                           \n  ) %&gt;%\n  st_as_sf()\n\nprint(drug_cases_province)\n\nSimple feature collection with 77 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 4\n   province_en   total_cases ADM1_PCODE                                 geometry\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                            &lt;MULTIPOLYGON [m]&gt;\n 1 Amnat Charoen       35435 TH37       (((1137720 1809629, 1137724 1809622, 11…\n 2 Ang Thong           16168 TH15       (((643472.8 1636469, 643496 1636423, 64…\n 3 Bangkok            286480 TH10       (((674339.8 1543300, 674382.3 1543278, …\n 4 Bueng Kan           35287 TH38       (((965496 2045531, 965625.5 2045528, 96…\n 5 Buri Ram            57352 TH31       (((921217 1750212, 921217 1750211, 9212…\n 6 Chachoengsao        53514 TH24       (((722656.1 1546054, 722796 1546041, 72…\n 7 Chai Nat            15310 TH18       (((620165.4 1704256, 620291.4 1704247, …\n 8 Chaiyaphum          64497 TH36       (((772997.4 1851276, 773104.5 1851216, …\n 9 Chanthaburi         31473 TH22       (((853764.8 1360716, 853783.1 1360713, …\n10 Chiang Mai         121812 TH50       (((554883.3 2226795, 555000.6 2226791, …\n# ℹ 67 more rows\n\n\nI will also create a new drug_cases_province_year to aggregate the total number of cases for each province and based on each year, regardless of drug offense type.\n\ndrug_cases_province_year &lt;- drug_cases %&gt;%\n  group_by(province_en, fiscal_year) %&gt;%\n  summarise(\n    fiscal_year = first(fiscal_year),\n    total_cases = sum(no_cases), \n    ADM1_PCODE = first(ADM1_PCODE),              \n    geometry = first(geometry), \n    .groups = \"drop\"                           \n  ) %&gt;%\n  st_as_sf()\n\nprint(drug_cases_province_year)\n\nSimple feature collection with 462 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 462 × 5\n   province_en   fiscal_year total_cases ADM1_PCODE                     geometry\n   &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;                &lt;MULTIPOLYGON [m]&gt;\n 1 Amnat Charoen        2017        5076 TH37       (((1137720 1809629, 1137724…\n 2 Amnat Charoen        2018        5651 TH37       (((1137720 1809629, 1137724…\n 3 Amnat Charoen        2019        7339 TH37       (((1137720 1809629, 1137724…\n 4 Amnat Charoen        2020        3949 TH37       (((1137720 1809629, 1137724…\n 5 Amnat Charoen        2021        8961 TH37       (((1137720 1809629, 1137724…\n 6 Amnat Charoen        2022        4459 TH37       (((1137720 1809629, 1137724…\n 7 Ang Thong            2017        1614 TH15       (((643472.8 1636469, 643496…\n 8 Ang Thong            2018        2717 TH15       (((643472.8 1636469, 643496…\n 9 Ang Thong            2019        2781 TH15       (((643472.8 1636469, 643496…\n10 Ang Thong            2020        2636 TH15       (((643472.8 1636469, 643496…\n# ℹ 452 more rows"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#deriving-queens-contiguity-weights-sfdep-methods",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#deriving-queens-contiguity-weights-sfdep-methods",
    "title": "In-class Exercise 6",
    "section": "2.1 Deriving Queen’s contiguity weights: sfdep methods",
    "text": "2.1 Deriving Queen’s contiguity weights: sfdep methods\nNotice that st_weights() provides tree arguments,\n\nnb: a neighbour list object as created by st_neighbors().\nstyle: Default “W” for row standardized weights. This value can also be “B”, “C”, “U”, “minmax”, and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nallow_zero: If TRUE, assigns zero as lagged value to zone without neighbors. 8\n\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\n# Inspect the dataframe\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#computing-global-morans-i",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#computing-global-morans-i",
    "title": "In-class Exercise 6",
    "section": "2.2 Computing Global Moran’s I",
    "text": "2.2 Computing Global Moran’s I\nIn the code chunk below, global_moran() function is used to compute the Moran’s I value. Different from spdep package, the output is a tibble data.frame.\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#performing-global-moransi-test",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#performing-global-moransi-test",
    "title": "In-class Exercise 6",
    "section": "2.3 Performing Global Moran’sI test",
    "text": "2.3 Performing Global Moran’sI test\nIn general, Moran’s I test will be performed instead of just computing the Moran’s I statistics. With sfdep package, Moran’s I test can be performed by using global_moran_test() as shown in the code chunk below.\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\n\n\n\nTip\n\n\n\n\nThe default for alternative argument is “two.sided”. Other supported arguments are “greater” or “less”. randomization, and\nBy default the randomization argument is TRUE. If FALSE, under the assumption of normality."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#performing-global-morans-i-permutation-test",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#performing-global-morans-i-permutation-test",
    "title": "In-class Exercise 6",
    "section": "2.4 Performing Global Moran’s I Permutation Test",
    "text": "2.4 Performing Global Moran’s I Permutation Test\nIn practice, Monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by globel_ moran_perm().\nStep 1:\nIt’s always good practice to to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.\n\nset.seed(1234)\n\nStep 2\nNext, global_moral_perm() is used to perform Monte Carlo simulation.\n\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nStep 3: Analyse!\n\n\n\n\n\n\nNote\n\n\n\nThe statistical report on previous tab shows that the p-value is smaller than alpha value of 0.05. Hence, we have enough statistical evidence to reject the null hypothesis that the spatial distribution of GPD per capita are resemble random distribution (i.e. independent from spatial).\nSince the Moran’s I statistics is greater than 0, we can infer that the spatial distribution shows sign of clustering. i.e. it indicates positive spatial autocorrelation, which means that similar values (either high or low) tend to cluster together in space."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#computing-local-morans-i",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#computing-local-morans-i",
    "title": "In-class Exercise 6",
    "section": "3.1 Computing local Moran’s I",
    "text": "3.1 Computing local Moran’s I\nIn this section, I will learn how to compute Local Moran’s I of GDPPC at county level by using local_moran() of sfdep package.\n\nlisa &lt;- wm_q %&gt;% \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-local-morans-i",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-local-morans-i",
    "title": "In-class Exercise 6",
    "section": "3.2 Visualising local Moran’s I",
    "text": "3.2 Visualising local Moran’s I\nIn this code chunk below, tmap functions are used prepare a choropleth map by using value in the ii field.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of GDPPC\",\n    main.title.size = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-p-value-of-local-morans-i",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-p-value-of-local-morans-i",
    "title": "In-class Exercise 6",
    "section": "3.3 Visualising p-value of local Moran’s I",
    "text": "3.3 Visualising p-value of local Moran’s I\nIn the code chunk below, tmap functions are used prepare a choropleth map by using value in the p_ii_sim field.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor p-values, the appropriate classification should be 0.001, 0.01, 0.05 and not significant instead of using default classification scheme.\nSuggested Classification for p-values:\n\np &lt; 0.001: Highly significant clustering\np &lt; 0.01: Very significant clustering\np &lt; 0.05: Significant clustering\nNot significant (p &gt;= 0.05): No significant clustering"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-local-morans-i-and-p-value",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-local-morans-i-and-p-value",
    "title": "In-class Exercise 6",
    "section": "3.4 Visualising local Moran’s I and p-value",
    "text": "3.4 Visualising local Moran’s I and p-value\nFor effective comparison, it will be better for us to plot both maps next to each other.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#plotting-a-lisa-map",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#plotting-a-lisa-map",
    "title": "In-class Exercise 6",
    "section": "3.5 Plotting a LISA Map",
    "text": "3.5 Plotting a LISA Map\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are mean, median and pysal. In general, classification in mean will be used as shown in the code chunk below.\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#computing-local-gi-statistics",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#computing-local-gi-statistics",
    "title": "In-class Exercise 6",
    "section": "4.1 Computing local Gi* statistics",
    "text": "4.1 Computing local Gi* statistics\nAs usual, we will need to derive a spatial weight matrix before we can compute local Gi* statistics. Code chunk below will be used to derive a spatial weight matrix by using sfdep functions and tidyverse approach.\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wts = st_inverse_distance(nb, \n                              geometry, \n                              scale = 1,\n                              alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nGi* and local Gi* are distance-based spatial statistics. Hence, distance methods instead of contiguity methods should be used to derive the spatial weight matrix.\nSince we are going to compute Gi* statistics, include_self()is used.\n\n\n\nNow, we will compute the local Gi* by using the code chunk below.\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wts, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n    gi_star cluster     e_gi  var_gi std_dev p_value p_sim p_folded_sim skewness\n      &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.261   Low     0.00126  1.07e-7  0.283  7.78e-1  0.66         0.33    0.783\n 2 -0.276   Low     0.000969 4.76e-8 -0.123  9.02e-1  0.98         0.49    0.713\n 3  0.00573 High    0.00156  2.53e-7 -0.0571 9.54e-1  0.78         0.39    0.972\n 4  0.528   High    0.00155  2.97e-7  0.321  7.48e-1  0.56         0.28    0.942\n 5  0.466   High    0.00137  2.76e-7  0.386  7.00e-1  0.52         0.26    1.32 \n 6 -0.445   High    0.000992 7.08e-8 -0.588  5.57e-1  0.68         0.34    0.692\n 7  2.99    High    0.000700 4.05e-8  3.13   1.74e-3  0.04         0.02    0.975\n 8  2.04    High    0.00152  1.58e-7  1.77   7.59e-2  0.16         0.08    1.26 \n 9  4.42    High    0.00130  1.18e-7  4.22   2.39e-5  0.02         0.01    1.20 \n10  1.21    Low     0.00175  1.25e-7  1.49   1.36e-1  0.18         0.09    0.408\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-gi",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-gi",
    "title": "In-class Exercise 6",
    "section": "4.2 Visualising Gi*",
    "text": "4.2 Visualising Gi*\nIn the code chunk below, tmap functions are used to plot the local Gi* (i.e. gi_star) at the province level.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-p-value-of-hcsa",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-p-value-of-hcsa",
    "title": "In-class Exercise 6",
    "section": "4.3 Visualising p-value of HCSA",
    "text": "4.3 Visualising p-value of HCSA\nIn the code chunk below, tmap functions are used to plot the p-values of local Gi* (i.e. p_sim) at the province level\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visuaising-local-hcsa",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visuaising-local-hcsa",
    "title": "In-class Exercise 6",
    "section": "4.4 Visuaising local HCSA",
    "text": "4.4 Visuaising local HCSA\nFor effective comparison, you can plot both maps next to each other as shown below.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-hot-spot-and-cold-spot-areas",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#visualising-hot-spot-and-cold-spot-areas",
    "title": "In-class Exercise 6",
    "section": "4.5 Visualising hot spot and cold spot areas",
    "text": "4.5 Visualising hot spot and cold spot areas\nNow, we are ready to plot the significant (i.e. p-values less than 0.05) hot spot and cold spot areas by using appropriate tmap functions as shown below.\n\nHCSA_sig &lt;- HCSA  %&gt;%\n  filter(p_sim &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"cluster\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFigure above reveals that there is one hot spot area and two cold spot areas. Interestingly, the hot spot areas coincide with the High-high cluster identifies by using local Moran’s I method in the earlier sub-section."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#setting-the-scene-drug-abuse-in-thailand",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#setting-the-scene-drug-abuse-in-thailand",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "In 2022, 567,609 drug users in ASEAN were treated, in which Thailand was found to have the highest number of drug users requiring treatment among ASEAN countries, followed by Malaysia, Indonesia, Laos, the Philippines, and Singapore. (Kahanto M., et al, 2022) Drug abuse is a significant social issue in Thailand, with profound health, financial, and societal implications. Positioned near the Golden Triangle—one of the largest drug production areas in Asia—Thailand faces ongoing challenges due to its geographical proximity and extensive transportation routes, which facilitate drug trafficking. Within Thailand, drug abuse is particularly prevalent among the youth, with approximately 2.7 million young people involved. Of those aged 15–19, around 300,000 are in need of drug treatment, and vocational students are disproportionately affected compared to their peers in secondary school.\nThis underscores the importance of drug treatment in addressing the complex problem of substance abuse and reduces the societal costs associated with drug abuse, such as healthcare expenses, lost productivity, and crime. Hence, to better allocate resources and develop targeted interventions, it is crucial to understand where drug abuse is most concentrated and how it spreads geographically. This is where geospatial analysis becomes essential. \nIn this exercise, I will utilise geospatial analysis methods to explore the province-level dynamics of drug abuse in Thailand. This will involve preparing a study area layer as sf polygon features at the province level, including Bangkok, and creating a drug abuse indicators layer within this study area. Using these extracted data layers, I will conduct global spatial autocorrelation analysis using sfdep methods, followed by local spatial autocorrelation analysis. Finally, I will describe the spatial patterns revealed by determining whether key indicators are spatially dependent, and identifying trends of clusters, outliers and hotspots over time."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#exploratory-geospatial-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#exploratory-geospatial-data-analysis",
    "title": "Take-home Exercise 2",
    "section": "6. Exploratory Geospatial Data Analysis",
    "text": "6. Exploratory Geospatial Data Analysis\n\n6.1 Overall Histogram of Drug Cases\nI employed the geom_histogram function of the ggplot package to plot histogram distributions of the spread of the number of drug cases found in Thailand from 2017 to 2022.\nOverall, the number of cases appears to be relatively right-skewed with some outliers indicating a significantly high number of drug cases.\n\nggplot(drug_cases, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Histogram of Total Drug Cases in Thailand (2017-2022)\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n6.2 Histogram of Drug Cases by Year\nBased on each year category, we see that there is a similar pattern of drug cases skewed towards the lower end with an uneven distribution.\n\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(dplyr)\n\n# Create histogram for each year\ndrug_cases_2017 &lt;- filter(drug_cases, fiscal_year == 2017)\nhist_2017 &lt;- ggplot(drug_cases_2017, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2017\") +\n  theme_minimal(base_size = 9) \n\ndrug_cases_2018 &lt;- filter(drug_cases, fiscal_year == 2018)\nhist_2018 &lt;- ggplot(drug_cases_2018, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2018\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2019 &lt;- filter(drug_cases, fiscal_year == 2019)\nhist_2019 &lt;- ggplot(drug_cases_2019, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2019\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2020 &lt;- filter(drug_cases, fiscal_year == 2020)\nhist_2020 &lt;- ggplot(drug_cases_2020, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2020\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2021 &lt;- filter(drug_cases, fiscal_year == 2021)\nhist_2021 &lt;- ggplot(drug_cases_2021, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2021\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2022 &lt;- filter(drug_cases, fiscal_year == 2022)\nhist_2022 &lt;- ggplot(drug_cases_2022, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2022\") +\n  theme_minimal(base_size = 9)\n\n# Arrange all histograms in a grid layout\ngrid.arrange(hist_2017, hist_2018, hist_2019, hist_2020, hist_2021, hist_2022, nrow = 2)\n\n\n\n\n6.3 Overall Plot of Drug Cases\nAs such, an quantile interval will be more suitable in plotting the total number of cases for each province as shown in the tmap output below. Additionally, we can use the default break of 5 to capture a suitable level of granularity across all provinces. For comparison purposes, I will also plot the equal scale as shown.\n\n# First plot using quantile interval\nplot_quantile &lt;- tm_shape(drug_cases_province) +\n  tm_polygons(\"total_cases\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          n = 5,\n          title = \"Number of Drug Cases\") +\n  tm_layout(main.title = \"Distribution of Drug Cases in Thailand \\n by Province (Quantile Interval)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", size = 2, position = c(\"right\", \"top\")) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n# Second plot using equal interval\nplot_equal &lt;- tm_shape(drug_cases_province) +\n  tm_polygons(\"total_cases\", \n          style = \"equal\", \n          palette = \"Blues\",\n          n = 5,\n          title = \"Number of Drug Cases\") +\n  tm_layout(main.title = \"Distribution of Drug Cases in Thailand \\n by Province (Equal Interval)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", size = 2, position = c(\"right\", \"top\")) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n# Combine both plots side by side\ntmap_arrange(plot_quantile, plot_equal, nrow = 1)\n\n\n\n\n\n\n\n\nObservations\n\n\n\nOverall, we can observe that the highest number of drug cases are found in the north-western, central, eastern and southern provinces of Thailand as seen in the darker regions. Namely..\n\nNorth-west: Chiang Mai, Chiang Rai\nCentral: Chaiyaphum, Khon Kaen and Nakhon-Ratchasima\nEast: Sisaket, Ubon-Ratchathani\nSouth: Surat Thani, Nakhon Si Thammarat, Phuket\n\nIt is worth noting that smaller provinces are likely to be lighter in shade due to their smaller geographic area.\n\n\n\n\n6.4 Plot of Drug Cases by Year\nWhen we further categorise the drug cases by year, we can see that there is an even spread of cases\n\nplot_quantile_year &lt;- tm_shape(drug_cases_province_year) +\n  tm_polygons(\"total_cases\", \n          style = \"quantile\", \n          palette = \"Blues\") +\n  tm_facets(by=\"fiscal_year\", free.coords = FALSE) +\n  tm_layout(main.title = \"Distribution of Drug Cases in Thailand \\n by Province for Each Year (Quantile Interval)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) \n\nplot_quantile_year\n\n\n\n# Load necessary libraries\nlibrary(tmap)\nlibrary(knitr)\n\n# Create temporal maps\ntemporal_maps &lt;- tm_shape(drug_cases_province_year) +  \n  tm_polygons(\"total_cases\",  \n              palette = \"Blues\",  \n              style = \"quantile\", \n              title = \"Drug Cases\") + \n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(legend.title.size = 1.8,\n            legend.text.size = 1.5) +\n  tm_facets(along = \"fiscal_year\", free.coords = FALSE)\n\n# Generate animation\ntmap_animation(temporal_maps, filename = \"thailand_drugs_temporal.gif\", \n               delay = 150, width = 1000, height = 1200)\n\nCreating frames\n\n\n===========================\n\n\n=============\n\n\n=============\n\n\n==============\n\n\n=============\n\n\n\nCreating animation\nAnimation saved to C:\\SamanthaxFoo\\IS415-GAA\\Take-home_Ex\\Take-home_Ex2\\thailand_drugs_temporal.gif \n\n# Include the generated GIF\nknitr::include_graphics(\"thailand_drugs_temporal.gif\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#global-measures-of-spatial-autocorrelation",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#global-measures-of-spatial-autocorrelation",
    "title": "Take-home Exercise 2",
    "section": "7. Global Measures of Spatial Autocorrelation",
    "text": "7. Global Measures of Spatial Autocorrelation\n\n7.1 Methods Used\nThis section delves into analysing the spatial autocorrelation of our drug cases dataset and assessing how the presence of drug abuse in a province may influence and form clusters around it.\n\n\n\n\n\n\n\n\n\n\n&lt;INSERT THE THREE TYPES OF METHODS&gt;\n\n\n7.2 Computing Contiguity Neighbours\nI decided to use the Queen criterion in deriving our neighbour list object. To do so, we will utilise the st_contiguity() function from the sfdep package to create contiguity weight matrices for the study area. This function generates a list of neighbors based on provinces that share contiguous boundaries. It is worth noting that the function only supports the rook and queen criteria which is suitable for our analysis.\n\nthailand_nb_q &lt;- st_contiguity(drug_cases_province, queen=TRUE)\nsummary(thailand_nb_q)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n\n\nEach number returned above is an ID assigned to each province from the st_contiguity() function. Let’s find out the specific provinces highlighted by the summary above!\n\nprovince_ids &lt;- data.frame(\n  region_id = seq_along(drug_cases_province$province_en),\n  province_en = drug_cases_province$province_en\n)\n\nprovince_ids[province_ids$region_id %in% c(17, 48, 69, 71), ]\n\n   region_id province_en\n17        17   Khon Kaen\n48        48      Phuket\n69        69         Tak\n71        71        Trat\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nI can observe a total of 77 provinces (regions) in the dataset with 352 neighbouring links between the provinces\nThere is roughly 5.94% non-zero neighbour relationships. This indicates only a small proportion of total possible connections have neighbours.\nOn average, we can also observe that each province has 4.57 neighbouring regions.\nRegion 48 (Phuket province) has no neighbouring regions\nRegion 71 (Trat province) is one of the least connected provinces with only 1 neighbouring region\nRegions 17 (Khon Kaen province) and 69 (Tak province) are the two provinces with the most neighbours, each sharing boundaries with 9 other provinces\n\n\n\n\n\n7.3 Computing Row-Standardised Weight Matrix\nNext, I attempt to calculate spatial weights but the isolated region (48) is causing issues as spatial weights calculations require all regions to have neighbors.\nTo resolve the issue caused by the isolated region, I will use the allow_zero = TRUE option when calculating spatial weights, which will allow the analysis to proceed despite isolated regions.\n\nthailand_wt &lt;- st_weights(thailand_nb_q, style = \"W\", allow_zero = TRUE)\n\nWe will mutate the newly created neighbour list object thailand_nb_1 and weight matrix thailand_wt into our existing drug_cases_province. This results in a newly created object called wm_1.\n\nwm_q &lt;- drug_cases_province %&gt;%\n  mutate(nb = thailand_nb_q,\n         wt = thailand_wt,\n         .before = 1) \n\n# Inspect\nwm_q\n\nSimple feature collection with 77 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 6\n   nb        wt     province_en total_cases ADM1_PCODE                  geometry\n * &lt;nb&gt;      &lt;list&gt; &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;             &lt;MULTIPOLYGON [m]&gt;\n 1 &lt;int [3]&gt; &lt;dbl&gt;  Amnat Char…       35435 TH37       (((1137720 1809629, 1137…\n 2 &lt;int [4]&gt; &lt;dbl&gt;  Ang Thong         16168 TH15       (((643472.8 1636469, 643…\n 3 &lt;int [6]&gt; &lt;dbl&gt;  Bangkok          286480 TH10       (((674339.8 1543300, 674…\n 4 &lt;int [3]&gt; &lt;dbl&gt;  Bueng Kan         35287 TH38       (((965496 2045531, 96562…\n 5 &lt;int [5]&gt; &lt;dbl&gt;  Buri Ram          57352 TH31       (((921217 1750212, 92121…\n 6 &lt;int [8]&gt; &lt;dbl&gt;  Chachoengs…       53514 TH24       (((722656.1 1546054, 722…\n 7 &lt;int [4]&gt; &lt;dbl&gt;  Chai Nat          15310 TH18       (((620165.4 1704256, 620…\n 8 &lt;int [4]&gt; &lt;dbl&gt;  Chaiyaphum        64497 TH36       (((772997.4 1851276, 773…\n 9 &lt;int [5]&gt; &lt;dbl&gt;  Chanthaburi       31473 TH22       (((853764.8 1360716, 853…\n10 &lt;int [5]&gt; &lt;dbl&gt;  Chiang Mai       121812 TH50       (((554883.3 2226795, 555…\n# ℹ 67 more rows"
  }
]