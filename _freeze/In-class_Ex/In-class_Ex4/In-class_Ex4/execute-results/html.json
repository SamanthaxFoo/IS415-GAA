{
  "hash": "25c191be35a86f6ce3896debaa08fc6d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 3\"\nauthor: \"Foo Jia Yi Samantha\"\ndate-modified: \"September 12, 2024\"\ndate: \"September 12, 2024\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n```{=html}\n<button>In-class Exercise</button> <button>R</button> <button>sf</button><button>STKDE</button>\n```\n\n## **1. Overall**\n\n### **1.1 The research questions**\n\nThe specific question we would like to answer is:\n\n-   are the locations of forest fire in Kepulauan Bangka Belitung spatial and spatio-temporally independent?\n-   if the answer is NO, where and when the observed forest fire locations tend to cluster?\n\n### **1.2 The data**\n\nFor the purpose of this exercise, two data sets are used, they are:\n\n-   forestfires, a csv file provides locations of forest fire detected from the Moderate Resolution Imaging Spectroradiometer (MODIS) sensor data. The data are downloaded from [Fire Information for Resource Management System](https://firms.modaps.eosdis.nasa.gov/download/). For the purpose of this exercise, only forest fires within Kepulauan Bangka Belitung will be used.\n-   Kepulauan_Bangka_Belitung, an ESRI shapefile showing the sub-district (i.e.Â [kelurahan](https://en.wikipedia.org/wiki/Villages_of_Indonesia)) boundary of Kepulauan Bangka Belitung. The data set was downloaded from [Indonesia Geospatial](https://www.indonesia-geospasial.com/2023/05/download-shapefile-batas-administrasi.html) portal. The original data covers the whole Indonesia. For the purpose of this exercise, only sub-districts within Kepulauan Bangka Belitung are extracted.\n\n## **2. Installing and Loading the R packages**\n\nFor the purpose of this study, I will be using these five R packages. They are:\n\n-   rgdal for importing geospatial data in GIS file format such as shapefile into R and save them as Spatial\\*DataFrame,\n-   maptools for converting Spatial\\* object into ppp object,\n-   raster for handling raster data in R,\n-   spatstat for performing Spatial Point Patterns Analysis such as kcross, Lcross, etc., and\n-   tmap for producing cartographic quality thematic maps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)\n```\n:::\n\n\n## 3. Importing and Preparing Study Area\n\n#### 3.1 Importing Study Area\n\nLet us first import the data using the **`st_read()`** function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb <- st_read(dsn=\"data/rawdata\",\n               layer = \"Kepulauan_Bangka_Belitung\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex4\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nkbb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID         NAMOBJ      FCODE REMARK\n1     26195        Airbara BA03070040   <NA>\n2     26196       Airgegas BA03070040   <NA>\n3     26197    Arung Dalam BA03070040   <NA>\n4     26202 Batu Betumpang BA03070040   <NA>\n5     26205      Bedengung BA03070040   <NA>\n6     26206      Belimbing BA03070040   <NA>\n7     26207         Bencah BA03070040   <NA>\n8     26209          Berok BA03070040   <NA>\n9     26210         Bikang BA03070040   <NA>\n10    26212    Bukit Terap BA03070040   <NA>\n                                       METADATA SRS_ID KDBBPS KDCBPS   KDCPUM\n1  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   <NA>   <NA> 19.03.03\n2  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   <NA>   <NA> 19.03.03\n3  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   <NA>   <NA> 19.04.01\n4  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   <NA>   <NA> 19.03.07\n5  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   <NA>   <NA> 19.03.05\n6  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   <NA>   <NA> 19.04.06\n7  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   <NA>   <NA> 19.03.03\n8  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   <NA>   <NA> 19.04.01\n9  TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   <NA>   <NA> 19.03.01\n10 TASWIL1000020221227_DATA_BATAS_DESAKELURAHAN   4326   <NA>   <NA> 19.03.06\n   KDEBPS        KDEPUM KDPBPS KDPKAB KDPPUM LUASWH TIPADM      WADMKC\n1    <NA> 19.03.03.2008   <NA>  19.03     19      0      1   Air Gegas\n2    <NA> 19.03.03.2001   <NA>  19.03     19      0      1   Air Gegas\n3    <NA> 19.04.01.1002   <NA>  19.04     19      0      2        Koba\n4    <NA> 19.03.07.2001   <NA>  19.03     19      0      1  Pulaubesar\n5    <NA> 19.03.05.2006   <NA>  19.03     19      0      1      Payung\n6    <NA> 19.04.06.2009   <NA>  19.04     19      0      1 Lubuk Besar\n7    <NA> 19.03.03.2004   <NA>  19.03     19      0      1   Air Gegas\n8    <NA> 19.04.01.1017   <NA>  19.04     19      0      2        Koba\n9    <NA> 19.03.01.2006   <NA>  19.03     19      0      1     Toboali\n10   <NA> 19.03.06.2005   <NA>  19.03     19      0      1 Tukak Sadai\n           WADMKD         WADMKK                    WADMPR WIADKC WIADKK WIADPR\n1         Airbara Bangka Selatan Kepulauan Bangka Belitung   <NA>   <NA>   <NA>\n2        Airgegas Bangka Selatan Kepulauan Bangka Belitung   <NA>   <NA>   <NA>\n3     Arung Dalam  Bangka Tengah Kepulauan Bangka Belitung   <NA>   <NA>   <NA>\n4  Batu Betumpang Bangka Selatan Kepulauan Bangka Belitung   <NA>   <NA>   <NA>\n5       Bedengung Bangka Selatan Kepulauan Bangka Belitung   <NA>   <NA>   <NA>\n6       Belimbing  Bangka Tengah Kepulauan Bangka Belitung   <NA>   <NA>   <NA>\n7          Bencah Bangka Selatan Kepulauan Bangka Belitung   <NA>   <NA>   <NA>\n8           Berok  Bangka Tengah Kepulauan Bangka Belitung   <NA>   <NA>   <NA>\n9          Bikang Bangka Selatan Kepulauan Bangka Belitung   <NA>   <NA>   <NA>\n10    Bukit Terap Bangka Selatan Kepulauan Bangka Belitung   <NA>   <NA>   <NA>\n   WIADKD                            UUPP       LUAS      AREA\n1    <NA> Hasil Delineasi Batas Desa 2019  77.160034  77160034\n2    <NA> Hasil Delineasi Batas Desa 2019  68.445344  68445426\n3       0 Hasil Delineasi Batas Desa 2019  20.759893  20759893\n4    <NA> Hasil Delineasi Batas Desa 2019 138.255656 138247711\n5    <NA> Hasil Delineasi Batas Desa 2019  96.103135  96102987\n6    <NA> Hasil Delineasi Batas Desa 2019  21.356034  21356035\n7    <NA> Hasil Delineasi Batas Desa 2019 133.589935 133590216\n8       0 Hasil Delineasi Batas Desa 2019   3.196318   3196318\n9    <NA> Hasil Delineasi Batas Desa 2019  53.235589  53235592\n10   <NA> Hasil Delineasi Batas Desa 2019  18.038894  18038895\n                         geometry\n1  POLYGON Z ((106.4285 -2.562...\n2  POLYGON Z ((106.4589 -2.692...\n3  POLYGON Z ((106.3998 -2.478...\n4  POLYGON Z ((106.0563 -2.778...\n5  POLYGON Z ((106.2187 -2.679...\n6  POLYGON Z ((106.4636 -2.568...\n7  POLYGON Z ((106.5133 -2.724...\n8  POLYGON Z ((106.4047 -2.477...\n9  POLYGON Z ((106.522 -2.8827...\n10 POLYGON Z ((106.6278 -2.968...\n```\n\n\n:::\n:::\n\n\nWe will need to drop the 'z' dimension value from the dataset as we are only working with x,y dimensions, not with height data. Hence, let's re-read the data and perform some wrangling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_sf <- st_read(dsn=\"data/rawdata\", layer=\"Kepulauan_Bangka_Belitung\") %>%\n  st_union() %>%\n  st_zm(drop = TRUE, what = \"ZM\") %>%\n  st_transform(crs = 32748)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex4\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nst_as_s2(): dropping Z and/or M coordinate\n```\n\n\n:::\n:::\n\n\n::: callout-note\n-   `st_read()` reads the spatial data from the specified file.\n-   `st_union()` performs a spatial union, combining all separate geometries (e.g., polygons) into one single geometry object. This is useful if you want to treat the entire area as a single entity, rather than as individual geometries (e.g., islands or districts).\n-   `st_zm(drop = TRUE, what = \"ZM\")` removes the Z (elevation) and M (measure) dimensions, simplifying the geometry to 2D.\n-   `st_transform(crs = 32748)` reprojects the geometry to the specified coordinate reference system (CRS), EPSG:32748 (UTM zone 48S, often used for areas around Southeast Asia).\n:::\n\nLet's inspect the newly created dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 512066.8 ymin: 9655398 xmax: 705559.4 ymax: 9834006\nProjected CRS: WGS 84 / UTM zone 48S\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((590979.6 9741359, 590966.1 9741...\n```\n\n\n:::\n:::\n\n\n### 3.2 Converting to OWIN Layer\n\nNext, **`as.owin()`** is used to convert the kbb data into an **own** object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_owin <- as.owin(kbb_sf)\nkbb_owin\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n```\n\n\n:::\n:::\n\n\nNext, **`class()`** is used to confirm if the output is indeed an owin object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(kbb_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"owin\"\n```\n\n\n:::\n:::\n\n\n## 4. Importing and Preparing Forest Fire Data.\n\nNext, we will import the forest fire data (i.e. forestfires.csv) into the R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_sf <- read_csv(\"data/rawdata/forestfires.csv\") %>%\n  st_as_sf(coords = c(\"longitude\",\"latitude\"),\n           crs = 4326) %>%\n  st_transform(crs = 32748)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 741 Columns: 15\nââ Column specification ââââââââââââââââââââââââââââââââââââââââââââââââââââââââ\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nâ¹ Use `spec()` to retrieve the full column specification for this data.\nâ¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nSince **ppp object** only acce\\[ts a numerical or character as mark, we will use the codes below to convert the data type of acq_dae to numeric.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_sf <- fire_sf %>%\n  mutate(DayofYear = yday(acq_date)) %>%\n  mutate(Month_num = month(acq_date)) %>%\n  mutate(Month_fac = month(acq_date, \n                         label = TRUE,\n                         abbr = FALSE))\n\nfire_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 741 features and 16 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 521564.1 ymin: 9658137 xmax: 695791 ymax: 9828767\nProjected CRS: WGS 84 / UTM zone 48S\n# A tibble: 741 Ã 17\n   brightness  scan track acq_date   acq_time satellite instrument confidence\n *      <dbl> <dbl> <dbl> <date>        <dbl> <chr>     <chr>           <dbl>\n 1       312.   1.3   1.1 2023-01-10      629 Aqua      MODIS              67\n 2       314.   1.2   1.1 2023-01-10      629 Aqua      MODIS              70\n 3       315.   1.2   1.1 2023-01-10      629 Aqua      MODIS              71\n 4       309.   1.2   1.1 2023-01-10      629 Aqua      MODIS              54\n 5       308.   1.2   1.1 2023-01-10      629 Aqua      MODIS              33\n 6       322.   1.3   1.1 2023-01-10      629 Aqua      MODIS              72\n 7       318.   1.2   1.1 2023-01-10      629 Aqua      MODIS              71\n 8       318.   1.2   1.1 2023-01-10      629 Aqua      MODIS              75\n 9       327.   2     1.4 2023-01-12      616 Aqua      MODIS              73\n10       321.   2     1.4 2023-01-12      616 Aqua      MODIS              75\n# â¹ 731 more rows\n# â¹ 9 more variables: version <dbl>, bright_t31 <dbl>, frp <dbl>,\n#   daynight <chr>, type <dbl>, geometry <POINT [m]>, DayofYear <dbl>,\n#   Month_num <dbl>, Month_fac <ord>\n```\n\n\n:::\n:::\n\n\n## 5. Visualise the Plot\n\n### 5.1 Overall Plot\n\nNow, I will prepare a point symbol map showing the distribution of fire points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kbb_sf)+\n  tm_polygons() +\ntm_shape(fire_sf)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex4_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### 5.2 **Visuaising geographic distribution of forest fires by month**\n\nNext, I will prepare a point symbol map showing the monthly geographic distribution of forest fires in 2023.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kbb_sf)+\n  tm_polygons() +\ntm_shape(fire_sf)+\n  tm_dots(size = 0.1) +\n  tm_facets(by = \"Month_fac\",\n            free.coords = FALSE,\n            drop.units = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex4_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## 6. Computing STKDE by Month\n\nIn this section, I will learn how to compute STKDE by usingÂ [`spattemp.density()`](https://tilmandavies.github.io/sparr/reference/spattemp.density.html)Â ofÂ **sparr**Â package.\n\n### 6.1 Extracting Forest Fires by Month\n\nThe code below is used to remove the unwanted fields from the **`fire_sf`** simple feature data frame. This is because **as.ppp()** only needs the mark field and geometry field from the input of the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month <- fire_sf %>%\n  select(Month_num)\n\nhead(fire_month)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 606178.8 ymin: 9682757 xmax: 669933.6 ymax: 9703062\nProjected CRS: WGS 84 / UTM zone 48S\n# A tibble: 6 Ã 2\n  Month_num           geometry\n      <dbl>        <POINT [m]>\n1         1 (606178.8 9703062)\n2         1 (661410.6 9683536)\n3         1 (637808.8 9682757)\n4         1 (654882.2 9690665)\n5         1 (669933.6 9697468)\n6         1 (609133.5 9700119)\n```\n\n\n:::\n:::\n\n\n### 6.2 Creating ppp objects\n\nThe code below is used to derive a **ppp** object called the **fire_month** from **fire_month** of data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month_ppp <- as.ppp(fire_month)\nfire_month_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n```\n\n\n:::\n:::\n\n\nThe code below is used to check the output is in the correct object class\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fire_month_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n```\n\n\n:::\n:::\n\n\nWe can check the duplication in aÂ **`ppp`**Â object by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(fire_month_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n### 6.3 Including Owin object\n\nHere we combine **`fire_month_ppp`** object with the **`kkb_owin`** object into one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month_owin <- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n```\n\n\n:::\n:::\n\n\nAs a good practice,Â `plot()`Â is used to plotÂ *ff_owin*Â so that we can examine the correctness of the output object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(fire_month_owin)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex4_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### 6.4 Computing Spatio-temporal KDE\n\nNext,Â `spattemp.density()`Â of sparr package is used to compute the STKDE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde <- spattemp.density(fire_month_owin)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n```\n\n\n:::\n:::\n\n\n### 6.5 Plotting the spatio-temporal KDE object\n\nWe'll use the `plot()` function of R base to plot the KDE between July 2023 to December 2023.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(7,8,9,10,11,12)\npar(mfcol=c(1,2))\nfor(i in tims){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}\n```\n\n::: {.cell-output-display}\n![](In-class_Ex4_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex4_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex4_files/figure-html/unnamed-chunk-18-3.png){width=672}\n:::\n:::\n\n\n## **7. Computing STKDE by Day of Year**\n\nNow, I will compute the STKDE of forest fires by day of year.\n\n### 7.1 **Creating ppp object**\n\nIn the code chunk below, **DayofYear** from the **fire_sf** data frame is selected and is included in the output ppp object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_yday_ppp <- fire_sf %>% \n  select(DayofYear) %>%\n  as.ppp()\n```\n:::\n\n\n::: {.cell}\n\n```{.fire_yday_ppp .cell-code}\n\n```\n:::\n\n### 7.2 **Including Owin object**\n\nNext, code chunk below is used to combine the ppp object and the owin object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_yday_owin <- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n```\n\n\n:::\n:::\n\n\n### 7.3 Performing Spatio-Temporal KDE\n\nNow, I will perform a **spatio-temporal kernel density estimate** on the `fire_yday_owin` object which gives us insights into where and when fire occurrences are concentrated within the specified observation window.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_yday <- spattemp.density(\n  fire_yday_owin)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(kde_yday)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n```\n\n\n:::\n:::\n\n\nPlotting the graph by days of the year will produce 365/366 charts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot(kde_yday)\n```\n:::\n\n\nInstead, let us plot an animated plot to show the change in KDE across each day of the year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_yday$z$'10'\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nreal-valued pixel image\n128 x 128 pixel array (ny, nx)\nenclosing rectangle: [512070, 705560] x [9655400, 9834000] units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(kde_yday$z$'10')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex4_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(spatstat)\nlibrary(magick)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to ImageMagick 6.9.12.98\nEnabled features: cairo, freetype, fftw, ghostscript, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fontconfig, x11\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(viridis)  # For color mapping\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: viridisLite\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create a directory to store PNG frames\nif (!dir.exists(\"frames\")) {\n  dir.create(\"frames\")\n}\n\n# Get the unique day values from kde_yday\ndays <- names(kde_yday$z)  # Assuming 'kde_yday$z' contains KDE results for each day\n\n# Loop through each day and save the plot\nfor (day in days) {\n  kde_result <- kde_yday$z[[day]]  # Access KDE result for the day\n  \n  # Create PNG filename\n  png_filename <- file.path(\"frames\", sprintf(\"frame_%s.png\", day))\n  \n  # Save the plot as PNG\n  png(filename = png_filename, width = 800, height = 800)\n  plot(kde_result, main = paste(\"Day\", day), col = viridis::viridis(100))\n  dev.off()\n}\n\n# Load magick library\nlibrary(magick)\n\n# Read all PNG files from the frames directory\nframes <- image_read(list.files(\"frames\", full.names = TRUE, pattern = \"*.png\"))\n\n# Create animated GIF\nanimation <- image_animate(image_join(frames), fps = 10)  # Adjust fps as needed\n\n# Save the animation\noutput_path <- \"animated_kde_yday.gif\"\nimage_write(animation, path = output_path)\n\n# Display the GIF (optional)\nprint(animation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 Ã 7\n   format width height colorspace matte filesize density\n   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  \n 1 gif      800    800 sRGB       FALSE        0 72x72  \n 2 gif      800    800 sRGB       TRUE         0 72x72  \n 3 gif      800    800 sRGB       TRUE         0 72x72  \n 4 gif      800    800 sRGB       TRUE         0 72x72  \n 5 gif      800    800 sRGB       TRUE         0 72x72  \n 6 gif      800    800 sRGB       TRUE         0 72x72  \n 7 gif      800    800 sRGB       TRUE         0 72x72  \n 8 gif      800    800 sRGB       TRUE         0 72x72  \n 9 gif      800    800 sRGB       TRUE         0 72x72  \n10 gif      800    800 sRGB       TRUE         0 72x72  \n# â¹ 334 more rows\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex4_files/figure-html/unnamed-chunk-26-1.gif)\n:::\n:::\n",
    "supporting": [
      "In-class_Ex4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}