{
  "hash": "edcdce340c477573e10a107529c23346",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 7\"\nsubtitle: \"Building Interactive Shiny Applications\"\nauthor: \"Foo Jia Yi Samantha\"\ndate-modified: \"September 30, 2024\"\ndate: \"September 30, 2024\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n```{=html}\n<button>In-class Exercise</button> <button>R</button> <button>Shiny</button> <button>reconnect</button>\n```\n\n## 1. Install Package\n\nFirstly, we install the `shiny` package in our R terminal. This will allow us to work with interactive packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"shiny\")\n```\n:::\n\n\n## 2. Building a Fluid Page\n\nNext, we will start creating our first Shiny app using the Hunan 2012 dataset used in previous in-class exercises.\n\nRStudio acts as a server here in which our `shinyApp()` runs the server logic function defined in `server`. Additionally, the `shinyApp()` function takes in the UI defined by the `ui` variable and outputs a dashboard containing a choropleth along with dropdown and slider features for the user to use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\npacman::p_load(shiny, sf, tmap, bslib, tidyverse)\n\n# Load spatial data\nhunan <- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\ndata <- read_csv(\"data/aspatial/Hunan_2012.csv\")\nhunan_data <- left_join(hunan, data, by = c(\"County\" = \"County\"))\n\n# Define UI with default width sidebar\nui <- fluidPage(\n  titlePanel(\"Choropleth Mapping\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"variable\", \n                  label = \"Mapping variable\",\n                  choices = list(\"Gross Domestic Product, GDP\" = \"GDP\",\n                                 \"Gross Domestic Product Per Capita\" = \"GDPPC\",\n                                 \"Gross Industry Output\" = \"GIO\",\n                                 \"Output Value of Agriculture\" = \"OVA\",\n                                 \"Output Value of Service\" = \"OVS\"),\n                  selected = \"GDPPC\"),\n      sliderInput(inputId = \"classes\",\n                  label = \"Number of classes\",\n                  min = 5,\n                  max = 10,\n                  value = 6)\n    ),\n    \n    mainPanel(\n      plotOutput(\"mapPlot\")  # Map output placeholder\n    )\n  )\n)\n\n# Define server logic function\nserver <- function(input, output) {\n  \n  output$mapPlot <- renderPlot({\n    # Generate a choropleth map based on the selected input variable\n    tmap_options(check.and.fix = TRUE) +\n      tm_shape(hunan_data) +\n      tm_fill(col = input$variable, \n              n = input$classes, \n              style = \"quantile\") +\n      tm_borders(lwd = 0.1, alpha = 1)\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n![](images/clipboard-3755316557.png)\n\n## 3. Building a Navigation Bar Page\n\nThis time, we will build a Shiny dashboard which allows us to select our preferred Shiny theme for beautifying the UI. We expose additional UI such as the a slider panel for classification methods, for colour and the level of transparency which allows the user to interact with.\n\nLet's load the required `shinydashboard` and `shinythemes` packages first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(shiny, sf, tmap, bslib, tidyverse,\n               sfdep, shinydashboard, shinythemes)\n```\n:::\n\n\n-   `tm_view(set.zoom.limits = c(6.5, 8)` allows you to set the limit of which your user can zoom in. This allows us to reduce the computational load and resources of the laptop\n\n-   `choices = c(\"Queen\" = TRUE, \"Rook\" = FALSE)` we will let the user choose either Queen or Rook as a form of design consideratio but at the back-end, we'll just consider the TRUE/FALSE boolean\n\n-   `st_contiguity(geometry, queen = !!input$Contiguity1)` here we use double exclamation marks since the computer won;t be able to read the \"Queen\" and \"Rook\" but TRUE/FALSE values.\n\n-   We use `plotOutput()` for regular maps but since we are using tmap, we shall use `tmapOutput()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\", \n                layer = \"Hunan\")\ndata <- read_csv(\"data/aspatial/Hunan_2012.csv\")\nhunan_profile <- left_join(hunan, data,\n                        by = c(\"County\" = \"County\"))\n\n#========================#\n###### Shiny UI ######\n#========================#  \n\nui <- navbarPage(\n  title = \"GLSA Application\",\n  fluid = TRUE,\n  theme=shinytheme(\"flatly\"),\n  id = \"navbarID\",\n  tabPanel(\"GeoVisualisation\",\n           sidebarLayout(\n             sidebarPanel(\n               selectInput(inputId = \"variable\",\n                           label = \"Mapping variable\",\n                           choices = list(\"Gross Domestic Product, GDP\" = \"GDP\",\n                                          \"Gross Domestic Product Per Capita\" = \"GDPPC\",\n                                          \"Gross Industry Output\" = \"GIO\",\n                                          \"Output Value of Agriculture\" = \"OVA\",\n                                          \"Output Value of Service\" = \"OVS\"),\n                           selected = \"GDPPC\"),\n               selectInput(inputId = \"classification\",\n                           label = \"Classification method:\",\n                           choices = list(\"sd\" = \"sd\", \n                                          \"equal\" = \"equal\", \n                                          \"pretty\" = \"pretty\", \n                                          \"quantile\" = \"quantile\", \n                                          \"kmeans\" = \"kmeans\", \n                                          \"hclust\" = \"hclust\", \n                                          \"bclust\" = \"bclust\", \n                                          \"fisher\" = \"fisher\", \n                                          \"jenks\" = \"jenks\"),\n                           selected = \"pretty\"),\n               sliderInput(inputId = \"classes\",\n                           label = \"Number of classes\",\n                           min = 5,\n                           max = 10,\n                           value = c(6)),\n               selectInput(inputId = \"colour\",\n                           label = \"Colour scheme:\",\n                           choices = list(\"blues\" = \"Blues\", \n                                          \"reds\" = \"Reds\", \n                                          \"greens\" = \"Greens\",\n                                          \"Yellow-Orange-Red\" = \"YlOrRd\",\n                                          \"Yellow-Orange-Brown\" = \"YlOrBr\",\n                                          \"Yellow-Green\" = \"YlGn\",\n                                          \"Orange-Red\" = \"OrRd\"),\n                           selected = \"YlOrRd\"),\n               sliderInput(inputId = \"opacity\",\n                           label = \"Level of transparency\",\n                           min = 0,\n                           max = 1,\n                           value = c(0.5))\n               ),\n             mainPanel(\n               tmapOutput(\"mapPlot\",\n                          width = \"100%\", \n                          height = 580)\n               )\n             )\n           ),\n  navbarMenu(\"Global Measures\",\n             tabPanel(\"Moran's I\"),\n             tabPanel(\"Geary's c\"),\n             tabPanel(\"Getis-Ord Global G\")\n             ),\n  navbarMenu(\"Local Measures\",\n             tabPanel(\"Local Moran\",\n                      sidebarLayout(\n                        sidebarPanel(\n                          selectInput(inputId = \"variable\",\n                                      label = \"Mapping variable\",\n                                      choices = list(\"Gross Domestic Product, GDP\" = \"GDP\",\n                                                     \"Gross Domestic Product Per Capita\" = \"GDPPC\",\n                                                     \"Gross Industry Output\" = \"GIO\",\n                                                     \"Output Value of Agriculture\" = \"OVA\",\n                                                     \"Output Value of Service\" = \"OVS\"),\n                                      selected = \"GDPPC\"),\n                          radioButtons(inputId = \"Contiguity1\",\n                                       label = \"Contiguity Method\",\n                                       choices = c(\"Queen\" = TRUE, \n                                                   \"Rook\" = FALSE),\n                                       selected = \"TRUE\",\n                                       inline = TRUE),\n                          selectInput(\"MoranWeights\", \"Spatial Weights Style\",\n                                      choices = c(\"W: Row standardised\" = \"W\",\n                                                  \"B: Binary\" = \"B\",\n                                                  \"C: Globally standardised\" = \"C\",\n                                                  \"U: C / no of neighbours\" = \"U\",\n                                                  \"minmax\" = \"minmax\",\n                                                  \"S: Variance\" = \"S\"),\n                                      selected = \"W\"),\n                          sliderInput(inputId = \"MoranSims\", \n                                      label = \"Number of Simulations:\", \n                                      min = 99, max = 499,\n                                      value = 99, step = 100),\n                          actionButton(\"MoranUpdate\", \"Update Plot\"),\n                          hr(),\n                          radioButtons(inputId = \"MoranConf\",\n                                       label = \"Select Confidence level\",\n                                       choices = c(\"0.95\" = 0.05, \n                                                   \"0.99\" = 0.01),\n                                       selected = 0.05,\n                                       inline = TRUE),\n                          selectInput(\"LisaClass\", \"Select Lisa Classification\",\n                                      choices = c(\"mean\" = \"mean\",\n                                                  \"median\" = \"median\",\n                                                  \"pysal\" = \"pysal\"),\n                                      selected = \"mean\"),\n                          selectInput(\"localmoranstats\", \"Select Local Moran's Stat:\",\n                                      choices = c(\"local moran(ii)\" = \"local moran(ii)\",\n                                                  \"expectation(eii)\" = \"expectation(eii)\",\n                                                  \"variance(var_ii)\" = \"variance(var_ii)\",\n                                                  \"std deviation(z_ii)\" = \"std deviation(z_ii)\",\n                                                  \"P-value\" = \"p_value\"),\n                                      selected = \"local moran(ii)\")\n                        ),\n                        mainPanel(\n                          fluidRow(\n                            column(6, tmapOutput(\"LocalMoranMap\")),\n                            column(6, tmapOutput(\"LISA\"))\n                          )\n                        )\n                      )\n                      ),\n             tabPanel(\"Local Gi\")\n             ),\n  navbarMenu(\"Emerging Hot Spot Analysis\")\n)\n\n#========================#\n###### Shiny Server ######\n#========================# \n\nserver <- function(input, output){\n    output$mapPlot <- renderTmap({\n      tmap_options(check.and.fix = TRUE) +\n        tm_shape(hunan_profile)+\n        tm_fill(input$variable,\n                n = input$classes,\n                style = input$classification,\n                palette = input$colour,\n                alpha = input$opacity) +\n        tm_borders(lwd = 0.1,  alpha = 1) +\n        tm_view(set.zoom.limits = c(6.5, 8)\n                )\n    })\n    \n    #==========================================================\n    # Local Measures of Spatial AutoCorrelation\n    #==========================================================   \n    \n    localMIResults <- eventReactive(input$MoranUpdate,{\n      \n      if(nrow(hunan_profile) == 0) return(NULL)  # Exit if no data\n      \n      # Computing Contiguity Spatial Weights\n      wm_q <- hunan_profile %>%\n        mutate(nb = st_contiguity(geometry, \n                                  queen = !!input$Contiguity1),\n               wt = st_weights(nb,\n                               style = input$MoranWeights))\n\n      # Computing Local Moran's I\n\n      lisa <- wm_q %>%\n        mutate(local_moran = local_moran(\n          hunan_profile$GDPPC, nb, wt, \n          nsim = as.numeric(input$MoranSims)),\n          .before = 5) %>%\n        unnest(local_moran)\n\n      lisa <- lisa %>%\n        rename(\"local moran(ii)\" = \"ii\", \"expectation(eii)\" = \"eii\",\n               \"variance(var_ii)\" = \"var_ii\", \"std deviation(z_ii)\" = \"z_ii\",\n               \"p_value\" = \"p_ii\")\n      \n      return(lisa)       \n    })\n    \n    #==========================================================\n    # Render output maps\n    #==========================================================\n    \n    #Render local Moran I statistics\n    output$LocalMoranMap <- renderTmap({\n      df <- localMIResults()\n      \n      if(is.null(df) || nrow(df) == 0) return()  # Exit if no data\n      \n      # Map creation using tmap\n      localMI_map <- tm_shape(df) +\n        tm_fill(col = input$localmoranstats, \n                style = \"pretty\", \n                palette = \"RdBu\", \n                title = input$localmoranstats) +\n        tm_borders() +\n        tm_view(set.zoom.limits = c(6, 7))\n      \n      localMI_map \n    })\n\n    #Render LISA map \n    output$LISA <- renderTmap({\n      df <- localMIResults()\n      if(is.null(df)) return()\n      \n      \n      lisa_sig <- df  %>%\n        filter(p_value < as.numeric(input$MoranConf))  \n      \n      lisamap <- tm_shape(df) +\n        tm_polygons() +\n        tm_borders() +\n        \n        tm_shape(lisa_sig) +\n        tm_fill(col = input$LisaClass,  \n                palette = \"-RdBu\",  \n                title = (paste(\"Significance:\", input$LisaClass))) +\n        tm_borders(alpha = 0.4) +\n        tm_view(set.zoom.limits = c(6, 7))\n\n      lisamap \n    })\n}\n\nshinyApp (ui=ui, server=server)\n```\n:::\n\n\n![](images/clipboard-1147026403.png)\n\n## 4. Deploying Shiny App to the Cloud\n\nWe'll set up our ShinyApp.io account and save the token in our local device.\n\n> **NOTE:** rename your app3.R file to app.R. Else, RStudio will not be able to find the file\n\nLet's download the required `rsconnect` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"rsconnect\")\n```\n:::\n\n\nAfter running the app.R file, click the 'publish' buttona, select ShinyApp.io and enter in the token. You can monitor website metrics on ShinyApp.io\n\n![](images/clipboard-3553463400.png)\n\nHere is my link to the deployed app: <https://samanthafoo.shinyapps.io/In-class_ex7/>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}