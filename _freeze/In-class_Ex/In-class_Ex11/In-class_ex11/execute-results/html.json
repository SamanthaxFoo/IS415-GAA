{
  "hash": "0bb1290b2926e5138ee141d36cbbfa46",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 11\"\nsubtitle: \"Calibrating Hedonic Pricing Model for Private Highrise Property: gwr methods\"\nauthor: \"Foo Jia Yi Samantha\"\ndate-modified: 11/04/2024\ndate: 11/04/2024\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## 1. Load Required R Packages\n\n-   Spatial data handling\n\n    -   **sf**\n\n-   Attribute data handling\n\n    -   **tidyverse**, especially **readr**, **ggplot2** and **dplyr**\n\n-   Choropleth mapping\n\n    -   **tmap**\n\n-   Making HTTP requests in R to simplify process of working with web APIs\n\n    -   **httr**\n\n-   Assess the performance and fit of statistical models in R\n\n    -   **performance**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, httr, performance)\n```\n:::\n\n\n## 2. Importing the Data\n\nThe code chunk below imports multiple csv files in a specified folder and append them into a single tibble data frame.\n\n-   Postal code consisting of 6 digits should be in string since the downtown region starts with 0\n\n-   Sale date should not be treated as a character\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder_path <- \"data/aspatial\"\nfile_list <- list.files(path = folder_path, \n                        pattern = \"^realis.*\\\\.csv$\", \n                        full.names = TRUE)\n\nrealis_data <- file_list %>%\n  map_dfr(read_csv)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 10000 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (2): Area (SQM), Number of Units\nnum  (4): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Unit Price ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 6643 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(realis_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 16,643\nColumns: 21\n$ `Project Name`                <chr> \"THE LANDMARK\", \"POLLEN COLLECTION\", \"SK…\n$ `Transacted Price ($)`        <dbl> 2726888, 3850000, 2346000, 2190000, 1954…\n$ `Area (SQFT)`                 <dbl> 1076.40, 1808.35, 1087.16, 807.30, 796.5…\n$ `Unit Price ($ PSF)`          <dbl> 2533, 2129, 2158, 2713, 2453, 2577, 1097…\n$ `Sale Date`                   <chr> \"01 Jan 2024\", \"01 Jan 2024\", \"01 Jan 20…\n$ Address                       <chr> \"173 CHIN SWEE ROAD #22-11\", \"34 POLLEN …\n$ `Type of Sale`                <chr> \"New Sale\", \"New Sale\", \"New Sale\", \"New…\n$ `Type of Area`                <chr> \"Strata\", \"Land\", \"Strata\", \"Strata\", \"S…\n$ `Area (SQM)`                  <dbl> 100.0, 168.0, 101.0, 75.0, 74.0, 123.0, …\n$ `Unit Price ($ PSM)`          <dbl> 27269, 22917, 23228, 29200, 26405, 27741…\n$ `Nett Price($)`               <chr> \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", …\n$ `Property Type`               <chr> \"Condominium\", \"Terrace House\", \"Apartme…\n$ `Number of Units`             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Tenure                        <chr> \"99 yrs from 28/08/2020\", \"99 yrs from 0…\n$ `Completion Date`             <chr> \"Uncompleted\", \"Uncompleted\", \"Uncomplet…\n$ `Purchaser Address Indicator` <chr> \"Private\", \"N.A\", \"HDB\", \"N.A\", \"Private…\n$ `Postal Code`                 <chr> \"169878\", \"807233\", \"469657\", \"118992\", …\n$ `Postal District`             <chr> \"03\", \"28\", \"16\", \"05\", \"21\", \"21\", \"19\"…\n$ `Postal Sector`               <chr> \"16\", \"80\", \"46\", \"11\", \"59\", \"58\", \"53\"…\n$ `Planning Region`             <chr> \"Central Region\", \"North East Region\", \"…\n$ `Planning Area`               <chr> \"Outram\", \"Serangoon\", \"Bedok\", \"Queenst…\n```\n\n\n:::\n:::\n\n\n## 3. Data Wrangling\n\n### 3.1 Adjusting Data Types\n\nHence, we will want to convert values in ***Sale Date*** field from character to numerical date format, and extract ***resale*** and ***condominium*** transaction records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale <- realis_data %>%\n  mutate(`Sale Date` = dmy(`Sale Date`)) %>%\n  filter(`Type of Sale` == \"Resale\" &\n           `Property Type` == \"Condominium\")\n```\n:::\n\n\n### 3.2 Performing Geocoding\n\n-   We can conduct reverse geocoding by getting the location based on the postal codes\n\n-   A request is being made to SLA to configure the geocoding. Note that this requires an internet connection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare the Data\npostcode <- unique(condo_resale$`Postal Code`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Geocoding\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"\nfound <- data.frame()\nnot_found <- data.frame()\n\nfor (postcode in postcode){\n  query <- list('searchVal'=postcode, 'returnGeom'='Y', \n                'getAddrDetails'='Y', 'pageNum'='1')\n  res <- GET(url, query=query)\n  if ((content(res)$found)!=0){\n    found <- rbind(found, data.frame(content(res))[4:13])\n  } else {not_found = data.frame(postcode)\n  }\n}\n```\n:::\n\n\n### 3.3 Tidying Field Names\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfound <- found %>%\n  select(c(6:8)) %>%\n  rename(POSTAL = `results.POSTAL`,\n         XCOORD = `results.X`,\n         YCOORD = `results.Y`)\n```\n:::\n\n\n### 3.4 Converting to Point Feature Data Frame\n\nNow let us perform these two tasks\n\n-   Write a code chunk to join *condo_resale* and *found*. Name the output *condo_resale_geocoded*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join tables\ncondo_resale_geocoded = left_join(\n  condo_resale, found, \n  by = c('Postal Code' = 'POSTAL'))\n```\n:::\n\n\n-   Write a code chunk to convert *condo_resale_geocoded* from tibble data frame to sf point feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to sf\ncondo_resale_sf <- st_as_sf(condo_resale_geocoded, \n                            coords = c(\"XCOORD\",\n                                       \"YCOORD\"),\n                            crs=3414)\n```\n:::\n\n\n### 3.5 Cleaning Spatial Data\n\nNext, let's check of any overlapping point features. The code chunk below is used to check if there are overlapping point features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- condo_resale_sf %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\n```\n:::\n\n\nNext, in the code code chunk below, `st_jitter()` of sf package is used to move the point features by 5m to avoid overlapping point features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- condo_resale_sf %>%\n  st_jitter(amount = 2)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}