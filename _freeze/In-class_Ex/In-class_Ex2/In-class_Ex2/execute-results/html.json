{
  "hash": "a50ac27eec156abd32ccb221d9789b63",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 2\"\nauthor: \"Foo Jia Yi Samantha\"\ndate-modified: \"August 29, 2024\"\ndate: \"August 29, 2024\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n```{=html}\n<button>In-class Exercise</button> <button>R</button> <button>sf</button>\n```\n\n# 1. Importing Libraries into R\n\nIn this exercise, we will use the following R packages:\n\n-   **sf**, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\n-   **tidyverse** for tidying data (<https://tidyr.tidyverse.org/>)\n-   **tmap** which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n# 2. Importing Data Sets into R\n\nWe will first import the three geospatial data sets into R usingÂ [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html)Â of theÂ **sf**Â package.\n\n## 2.1 I**mporting** MP14_SUBZONE_WEB_PL (Web) **.shp Data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import shapefile\nmpsz14_shp <- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nThere are **3 ways** to explore the contents of a simple feature data frame like **`mpsz`**!\n\n### 1) Using *st_geometry()*\n\nThe sf data.frame contains a **geometry** column, that is a list of class `sfc`. We can retrieve the geometry list-column in this case by `mpsz$geom` or `mpsz[[1]]`, but the more general way usesÂ **`st_geometry()`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve geometry column \nst_geometry(mpsz14_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n```\n\n\n:::\n:::\n\n\n> ðŸ”Ž **Observations:** This `MP14_SUBZONE_WEB_PL` file consists of **323 features,** consisting of multipolygon features.\n\n### 2) Using *glimpse()*\n\nWe use **`glimpse()`** from the **dplyr** package to understand the data type of each fields.\n\nE.g.Â `FMEL-UPD_D`Â field is inÂ **date**Â data type andÂ `X_ADDR`,Â `Y_ADDR`,Â `SHAPE_L`Â andÂ `SHAPE_AREA`Â fields are in **double-precision values**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get data types \nglimpse(mpsz14_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, â€¦\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, â€¦\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HILâ€¦\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",â€¦\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",â€¦\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",â€¦\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",â€¦\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTâ€¦\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",â€¦\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",â€¦\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05â€¦\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,â€¦\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,â€¦\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,â€¦\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103â€¦\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (â€¦\n```\n\n\n:::\n:::\n\n\n> ðŸ”Ž **Observations:** This `MP14_SUBZONE_WEB_PL` file consists of **323 rows** and **16 columns** with datatypes ranging from integers, characters, date and doubles.\n\n### 3) Using *head()*\n\nWe use **`head()`** from the **base R** package to get the full information of the feature object **`mpsz`**. The `n` value indicates the no. of rows. I will use thiis method for this in-class exercise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display top 5 rows of the feature object \nhead(mpsz14_shp, n=5)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n```\n\n\n:::\n:::\n\n\n> ðŸ”Ž **Observations:** We can notice that the `MP14_SUBZONE_WEB_PL` file consists of **5 features** and **15 fields,** with the top 5 rows per column.\n\n## 2.2 I**mporting** MP14_SUBZONE_WEB_PL (Web) **.kml Data** \n\nWe use the below code chunk to export **`mpsz14_shp`** sf data.frame into **kml** file which saves the file into our data folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert .shp file into .kml\nst_write(mpsz14_shp, \n         \"data/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting source `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Import KML file\nmpsz14_kml = st_read(\"data/MP14_SUBZONE_WEB_PL.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data\\MP14_SUBZONE_WEB_PL.kml' \n  using driver `KML'\nSimple feature collection with 323 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display top 5 rows of the feature object \nhead(mpsz14_kml, n=5)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.8142 ymin: 1.272838 xmax: 103.8725 ymax: 1.291523\nGeodetic CRS:  WGS 84\n  Name Description                       geometry\n1                  MULTIPOLYGON (((103.8647 1....\n2                  MULTIPOLYGON (((103.8431 1....\n3                  MULTIPOLYGON (((103.8507 1....\n4                  MULTIPOLYGON (((103.8255 1....\n5                  MULTIPOLYGON (((103.8194 1....\n```\n\n\n:::\n:::\n\n\n> ðŸ’¡ **Note:** **`delete_dsn = TRUE`** will help delete the original data before rendering it\n\n## 2.3 Importing MP19_SUBZONE_WEB_PL (No Sea) .shp Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import shapefile\nmpsz19_shp <- st_read(dsn = \"data\", layer = \"MPSZ-2019\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n> ðŸ”Ž **Observations:** We can notice that the data file consists of **332 features** and **6 fields,** and follows the WGS64 coordinate system. Here we can notice it uses the \\`ESRI Shapefile' driver.\n\n## 2.4 Importing MP19_SUBZONE_WEB_PL (No Sea) .kml Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert .shp file into .kml\nst_write(mpsz19_shp, \n         \"data/MP19_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting source `data/MP19_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP19_SUBZONE_WEB_PL' to data source \n  `data/MP19_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 332 features with 6 fields and geometry type Multi Polygon.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Import KML file\nmpsz19_kml = st_read(\"data/MP19_SUBZONE_WEB_PL.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP19_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex2\\data\\MP19_SUBZONE_WEB_PL.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display top 5 rows of the feature object \nhead(mpsz19_kml, n=5)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6537 ymin: 1.216215 xmax: 103.8811 ymax: 1.29742\nGeodetic CRS:  WGS 84\n  Name Description                       geometry\n1                  MULTIPOLYGON (((103.8802 1....\n2                  MULTIPOLYGON (((103.8376 1....\n3                  MULTIPOLYGON (((103.8341 1....\n4                  MULTIPOLYGON (((103.7125 1....\n5                  MULTIPOLYGON (((103.8472 1....\n```\n\n\n:::\n:::\n\n\n> ðŸ”Ž **Observations:** We can notice that the `data`file also consists of **332 features** and **6 fields,** and follows the WGS64 coordinate system, but it uses the **kml driver** accordingly.\n\n# 3. Handling Coordinate Systems\n\nRecall that the **geographic coordinate system (e.g., WGS84)** is not appropriate for analyses that involve distance/area. Hence, it's common for us to **transform the original data** to a **projected coordinate system**.\n\nLet's take a look at the `mpsz19_shp` simple feature data frame. It shows that it is in the WGS84 coordinate system, i.e., geographic coordinate system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz19_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 332 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((103.8802 1.283859, 103.8802 1.2...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((103.8376 1.295599, 103.8377 1.2...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((103.8341 1.292476, 103.8341 1.2...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((103.7125 1.291625, 103.7126 1.2...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((103.8472 1.297, 103.8473 1.2969...\n```\n\n\n:::\n:::\n\n\nNow, we'll transform `mpsz19_shp`'s coordinate system from geographic (WGS84) to projected (SVY21).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_transform(mpsz19_shp, crs = 3414)\n\n# Display top 5 rows of the feature object \nhead(mpsz19_shp, n=5)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 8012.578 ymin: 22108.68 xmax: 33316.59 ymax: 31087.61\nProjected CRS: SVY21 / Singapore TM\n                SUBZONE_N SUBZONE_C      PLN_AREA_N PLN_AREA_C       REGION_N\n1             MARINA EAST    MESZ01     MARINA EAST         ME CENTRAL REGION\n2        INSTITUTION HILL    RVSZ05    RIVER VALLEY         RV CENTRAL REGION\n3          ROBERTSON QUAY    SRSZ01 SINGAPORE RIVER         SR CENTRAL REGION\n4 JURONG ISLAND AND BUKOM    WISZ01 WESTERN ISLANDS         WI    WEST REGION\n5            FORT CANNING    MUSZ02          MUSEUM         MU CENTRAL REGION\n  REGION_C                       geometry\n1       CR MULTIPOLYGON (((33222.98 29...\n2       CR MULTIPOLYGON (((28481.45 30...\n3       CR MULTIPOLYGON (((28087.34 30...\n4       WR MULTIPOLYGON (((14557.7 304...\n5       CR MULTIPOLYGON (((29542.53 31...\n```\n\n\n:::\n:::\n\n\n> ðŸ”Ž **Observations:** Notice that the `mpsz19_shp` object has been updated to the **SVY21** **projected CRS**\n\n# 4. Working with Population Data\n\nFor aspatial datasets like *`respopagsex2011to2020.csv`,* we will import into Rstudio using `read_csv()` function of **readr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/respopagesextod2023.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 100928 Columns: 7\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n> ðŸ”Ž **Observations:** The *`respopagsex2023.csv`* data contains **100928 rows** and **7 columns**\n\nAggregate the data to prepare a data.frame showing population by Planning Area and Planning Subzone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from=AG,\n              values_from=POP)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(popdata2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023%>%\n  mutate_at(.vars = vars(PA, SZ),\n            .funs = list(toupper))\n```\n:::\n\n\n> **ðŸ’¡ Note:** we use **`muttate()`** to convert all values to a common **UPPERCASE** before we do a left-join since R requires data of similar datatype when matching the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check column names\ncolnames(mpsz19_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"SUBZONE_N\"  \"SUBZONE_C\"  \"PLN_AREA_N\" \"PLN_AREA_C\" \"REGION_N\"  \n[6] \"REGION_C\"   \"geometry\"  \n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(popdata2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join 'popdata2023' with 'mpsz19_shp'\nmpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n> **ðŸ’¡ Note:** The merge is done using a `left_join`, meaning that all rows from `mpsz19_shp` will be kept, even if there is no corresponding row in `popdata2023`.\n>\n> ðŸ”Ž **Observations**: The resulting data frame, `mpsz_pop2023`, will contain all the columns from `mpsz19_shp` plus any additional columns from `popdata2023` that match the `SUBZONE_N` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join 'mpsz19_shp' with 'popdata2023'\npop2023_mpsz <- left_join(popdata2023, mpsz19_shp,\n                          by = c(\"SZ\" = \"SUBZONE_N\"))\n```\n:::\n\n\n> ðŸ”Ž **Observations**: The resulting data frame, `pop2023_mpsz`, will contain all the columns from `popdata2023` plus any additional columns from `mpsz19_shp` that match the `sz` column.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}