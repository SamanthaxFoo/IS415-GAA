{
  "hash": "12263d5d7cd432bf7efb6b28dcfbdb98",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 3\"\nauthor: \"Foo Jia Yi Samantha\"\ndate-modified: \"September 2, 2024\"\ndate: \"September 2, 2024\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n```{=html}\n<button>In-class Exercise</button> <button>R</button> <button>sf</button>\n```\n\n# Overview\n\nIn this in-class exercise 3, I will explore some of the common issues encountered by students during the Hands-on Exercise 3 work, facilitated by Prof Kam Tin Seong.\n\n# Common Code Issues\n\nInstall required packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n```\n:::\n\n\n## Issue #1: Installing maptools\n\n**`maptools`** have been retired and **`binary`** have been removed from CRAN. However, we can download from **Posit Public Package Manager** snapshots by using this code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You can use this but it's not encouraged since maptools has depreciated!\ninstall.packages(\"maptools\",\n                 repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n```\n:::\n\n\n## Issue #2: Creating Coastal Outline Data\n\nIn `sf` package, there are two functions that allow us to combine multiple simple features into one simple features. They are **st\\_ combine()** and **st_union().**\n\n-   **st_combine()** returns a single, combined geometry, with no resolved boundaries; returned geometries may well be invalid.\n-   If y is missing, **st_union(x)** returns a single geometry with resolved boundaries, else the geometries for all unioned pairs of xi\\] and yfil.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Impmort dataset into R\nmpsz_sf <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\In-class_Ex\\In-class_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\n# Derive costal outline sf tibble data.frame\nsg_sf <- mpsz_sf %>%\n  st_union()\n```\n:::\n\n\n## Issue #3: Converting Data to SpatialGridDataFrame\n\nSince maptools isn't installed in the Hands-on Exercise 3, we will need to use another method for converting the results of kde_childcareSG.bw to a Spatial Grid Data Frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## This code won't work anymore\n# gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\n\n## This code should work instead\n# kde_raster <- raster(kde_childcareSG.bw)\n# gridded_kde_childcareSG_bw <- as(kde_raster, \"SpatialGridDataFrame\")\n```\n:::\n\n\n# Reading ACLED Myanmar Data\n\nHere, I practised reading from the ACLED Myanmar dataset which will be used for the Take-home exercise 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- read_csv(\"data/aspatial/ACLED_Myanmar.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 55574 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nConvert \"character\" format of our Date column to \"date\" format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- read_csv(\"data/aspatial/ACLED_Myanmar.csv\") %>%\n  st_as_sf(coords = c(\"longitude\",\"latitude\"),crs=4326) %>%\n             st_transform(crs = 32647) %>%\n             mutate(event_date = dmy(event_date))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 55574 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n> **Note:** Myanmar's EPSG code is 32647 (one of the two EPSG codes that Myanmar has since the country cuts through two regions)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}