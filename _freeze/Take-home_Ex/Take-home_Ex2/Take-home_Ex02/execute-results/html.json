{
  "hash": "34d173bb8a211b03dd237ac888e150e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2 - Part 1\"\nsubtitle: \"Harnessing Geospatial Methods to Analyse Drug Abuse Patterns in Thailand\"\nauthor: \"Foo Jia Yi Samantha\"\ndate-modified: 10/13/2024\ndate: 10/13/2024\nformat: \n  html:\n    toc-depth: 5\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## **1. Setting the Scene: Drug Abuse in Thailand**\n\nIn 2022, **567,609 drug users in ASEAN** were treated, in which Thailand was found to have the **highest number of drug users requiring treatment** among ASEAN countries, followed by Malaysia, Indonesia, Laos, the Philippines, and Singapore. (Kahanto M., et al, 2022) Drug abuse is a significant social issue in Thailand, with profound health, financial, and societal implications. Positioned near the Golden Triangle—one of the largest drug production areas in Asia—Thailand faces ongoing challenges due to its geographical proximity and extensive transportation routes, which facilitate drug trafficking. Within Thailand, drug abuse is particularly **prevalent among the youth**, with approximately **2.7 million young people involved**. Of those aged 15–19, around **300,000 are in need of drug treatment**, and vocational students are disproportionately affected compared to their peers in secondary school.\n\nThis underscores the importance of drug treatment in addressing the complex problem of substance abuse and reduces the societal costs associated with drug abuse, such as healthcare expenses, lost productivity, and crime. Hence, to better allocate resources and develop targeted interventions, it is **crucial to understand where drug abuse is most concentrated and how it spreads geographically.** This is where geospatial analysis becomes essential. \n\nIn this exercise, I will utilise geospatial analysis methods to explore the province-level dynamics of drug abuse in Thailand. This will involve preparing a study area layer as `sf` polygon features at the province level, including Bangkok, and creating a drug abuse indicators layer within this study area. Using these extracted data layers, I will conduct **global spatial autocorrelation analysis** using `sfdep` methods, followed by **local spatial autocorrelation analysis.** Finally, I will describe the spatial patterns revealed by determining whether key indicators are spatially dependent, and identifying trends of clusters, outliers and hotspots over time.\n\n> **This take-home exercise consists of two parts:**\n>\n> 1.  [Take-home Ex 2 - Part 1](https://is415-samanthafoo.netlify.app/take-home_ex/take-home_ex2/take-home_ex02)\n> 2.  [Take-home Ex 2 - Part 2](https://is415-samanthafoo.netlify.app/take-home_ex/take-home_ex2/take-home_ex02_part2)\n\n## **2. Methods Used**\n\n### **2.1 Spatial Autocorrelation**\n\n![](images/clipboard-2006676839.png){fig-align=\"center\" width=\"524\"}\n\nThis quote from Tobler (1970) highlights the essence of spatial autocorrelation, emphasising the importance of studying how values of the same variable are interconnected across space. By examining spatial dependence, we can better understand local and global patterns and variations. This law suggests that phenomena that are geographically close to each other are more likely to be similar or have some kind of spatial relationship compared to phenomena that are farther apart. \n\nIt is also important to note that spatial structure and spatial autocorrelation are inherently interconnected (Tiefelsdorf, 1998):\n\n-   **Spatial structure** encompasses all the connections through which the autocorrelated phenomenon spreads.\n\n-   Without a significant autocorrelated process, spatial structure **cannot be empirically observed.**\n\nThus, the observed spatial distribution is regarded as a reflection of the underlying spatial process. When spatial autocorrelation is present, the value of a variable at a given observation is connected to the values of that same variable at neighbouring observations:\n\nConfiguration of areas showing different types of autocorrelation (Nguyen K. et al., 2022)\n\n![](images/clipboard-3880014486.png){fig-align=\"center\" width=\"544\"}\n\n-   **Positive Spatial Autocorrelation** occurs when similar values of the variable cluster geographically.\n\n-   **Negative Spatial Autocorrelation** arises when dissimilar values are geographically close, indicating that nearby locations tend to differ more than those that are farther apart. This situation often reflects spatial competition.\n\n-   In the **absence of spatial autocorrelation**, the distribution of observations can be considered random.\n\n### **2.2 Cluster and Outlier Analysis**\n\nCluster and Outlier Analysis can be effectively applied using Local Moran's I, Local Geary's C, Moran scatterplots, and LISA Cluster Maps to identify and understand spatial patterns in data. Here’s how each of these methods can be utilised\n\n#### **2.2.1 Local Moran's I and Local Geary's C**\n\n-   **Local Moran's I**: This statistic assesses local spatial autocorrelation by measuring the degree of similarity of a location's value to those of its neighbours. It identifies clusters of high or low values (hotspots and cold spots) and outliers (areas where a value is significantly different from its neighbours). By calculating Local Moran's I for each location, we can highlight areas with significant spatial dependence, helping to identify regions where interventions may be needed.\n\n-   **Local Geary's C**: Similar to Local Moran's I, Local Geary's C focuses on differences rather than similarities. It quantifies the spatial variation between nearby locations, emphasising dissimilarity. This method can help detect spatial competition, where nearby areas have contrasting values. By using Local Geary's C, we can uncover regions that may experience conflicting trends or behaviours, providing insights into localised dynamics.\n\n#### **2.2.2 Moran Scatterplot**\n\n-   The **Moran scatterplot** visualises the relationship between the value of a variable at a location and the average value of its neighbours. We can plot scatterplot to represent a location, with the x-axis showing the local mean of neighbouring values and the y-axis showing the local value. \n\n-   Plots like this can help us in identifying clusters (high-high or low-low) and outliers (high-low or low-high). The scatterplot can reveal spatial patterns that are not immediately obvious.\n\n#### **2.2.3 LISA Cluster Map**\n\n-   A **LISA Cluster Map** visually represents the results of Local Indicators of Spatial Association, indicating the spatial clusters of similar values (hotspots) and outliers. \n\n-   I will use these maps to quickly identify regions of interest such that areas identified as **hotspots will be marked in red** to signify high values surrounded by high values, while **cold spots will be marked in blue** for low values surrounded by low values. Outliers will be highlighted in contrasting colours.\n\n### **2.3 Emerging Hot Spot Analysis**\n\nThere are different methods for analysing spatial patterns and detecting hotspots including spatial autocorrelation and cluster analysis. **Emerging Hot Spot Analysis (EHSA)** is a specific spatio-temporal method used to examine hotspots over a designated **observation period**. It integrates two well-known techniques: the traditional **Getis-Ord Gi\\* statistic** for hotspot detection and the **Mann-Kendall test** for assessing monotonic trends over time. The main goal of EHSA is to analyse how hot and cold spots change over time, focusing on whether these areas are increasing in intensity, decreasing, or remaining constant.\n\n## **3. Importing Packages into R**\n\nLet's load all the required packages for conducting our analysis.\n\n-   [`sf`](https://rdrr.io/github/r-spatial/sf/man/sf-package.html) : provides a standardised way to encode spatial vector data in R environment, facilitating spatial data operations and analysis.\n-   [`st`](https://rdrr.io/cran/sf/man/st.html) : create simple features from numeric vectors, matrices, or lists, enabling the representation and manipulation of spatial structures in R.\n-   [`tidyverse`](https://www.tidyverse.org/) : a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structure.\n-   [`sfdep`](https://cran.r-project.org/web/packages/spdep/) : for computing spatial weights, global and local spatial autocorrelation statistics. Offers a more streamlined approach with **sf** objects.\n-   [`tmap`](https://cran.r-project.org/web/packages/tmap/) : for creating static and interactive visualisations and maps.\n-   [`ggplot2`](https://cran.r-project.org/web/packages/ggplot2/) : for creating advanced visualisations, graphics and maps using the Grammar of Graphics.\n-   [`knitr`](https://cran.r-project.org/web/packages/spdep/) : for dynamic report generation in R using Literate Programming techniques.\n-   [`Kendall`](https://cran.r-project.org/web/packages/Kendall/) : for computing the Kendall rank correlation and Mann-Kendall trend test\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, st, tidyverse, lubridate, sfdep, tmap, ggplot2, knitr, Kendall)\n```\n:::\n\n\n## **4. Importing Datasets into R**\n\n![](images/clipboard-3730540943.png){fig-align=\"center\" width=\"531\"}\n\nWe will be leveraging two datasets in this exercise. The first dataset to be used is Thailand’s provincial boundary is `tha_admbnda_adm1_rtsd_20220121` which exists in **ESRI .shp** **format** and is based on the Thailand geographic coordinate system. This dataset is extracted from [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) via the HDX portal.\n\nThe second dataset `thai_drug_offenses_2017_2022` consists of aspatial data in a **CSV format** that contains reported cases of drug offences in Thailand from 2017 to 2022. The dataset is extracted from [Thailand Drug Offenses \\[2017-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022) in Kaggle.\n\n### **4.1 Importing Geospatial Data**\n\nIn this section, `st_read()` of sf package will be used to import `tha_admbnda_adm1_rtsd_20220121` dataset into the R environment. The **`st_transform()`** function below converts the CRS of the **`sf`** object to EPSG:32647 which maps to Thailand's UTM zone, particularly for Western/Central parts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_boundary <- st_read(dsn = \"data/geospatial\",layer = \"tha_admbnda_adm1_rtsd_20220121\") %>% st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Inspect data\nglimpse(thai_boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((674339.8 15..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\nLet’s verify the coordinate reference systems of the `thai_boundary` object to ensure the assignment of the correct CRS value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thai_boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nBefore we delve into further data analysis, it is crucial that we first understand the levels of administration that makes up Thailand today. In particular, Thailand has 4 levels of administration, i.e. **level 0 (country), 1 (province), 2 (district),** and **3 (sub-district) boundaries.** Thailand comprises 76 provinces (known as จังหวัด in Thai or changwat in English), along with one special administrative area, Bangkok, the capital. \n\n-   These provinces function as the main local government units and possess legal personhood. \n-   Each province is subdivided into amphoe (districts), which are further broken down into tambon (sub-districts), representing the next tier of local governance. \n-   **For this analysis, I will only focus on the province administration level.**\n\nWe can visualise the structure of our geospatial object as such.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")  \n# Plot the provinces of Thailand with labels \ntm_shape(thai_boundary) +   \n  tm_borders(col = \"black\", lwd = 0.3, alpha = 0.6) +    \n  tm_polygons()+\n  tm_layout(main.title = \"Provinces of Thailand\",main.title.size = 1,    \n            main.title.position = \"center\", legend.show = FALSE, \n            frame = FALSE   ) +   \n  tm_text(\"ADM1_EN\", size = 0.2)\n```\n:::\n\n\n![](images/clipboard-2171615491.png)\n\n### **4.2 Importing Aspatial Data**\n\nIn this section, `read_csv()` of **sf** package will be used to import the csv file into the R environment. The output is a R dataframe class containing 5 unique columns of drug offences in Thailand from 2017 - 2022.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases <- read_csv(\"data/aspatial/thai_drug_offenses_2017_2022.csv\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(drug_cases)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  fiscal_year types_of_drug_offenses no_cases province_th   province_en         \n        <dbl> <chr>                     <dbl> <chr>         <chr>               \n1        2017 drug_use_cases            11871 กรุงเทพมหานคร  Bangkok             \n2        2017 drug_use_cases              200 ชัยนาท         Chai Nat            \n3        2017 drug_use_cases              553 นนทบุรี         Nonthaburi          \n4        2017 drug_use_cases              450 ปทุมธานี        Pathum Thani        \n5        2017 drug_use_cases              378 พระนครศรีอยุธยา Phra Nakhon Si Ayut…\n6        2017 drug_use_cases              727 ลพบุรี          Loburi              \n```\n\n\n:::\n:::\n\n\n|                        |               |                                                                                |\n|------------------|------------------|-------------------------------------|\n| **Column Name**        | **Data Type** | **Description**                                                                |\n| fiscal_year            | *\\<dbl\\>*     | The fiscal year during which the drug offenses were recorded.                  |\n| types_of_drug_offenses | *\\<chr\\>*     | The specific type or category of drug offence being reported.                  |\n| no_cases               | *\\<dbl\\>*     | The total number of cases recorded for the specific combination of fiscal year |\n| province_th            | *\\<chr\\>*     | The name of the province in Thailand, written in Thai.                         |\n| province_en            | *\\<chr\\>*     | The name of the province in Thailand, written in English.                      |\n\n### **4.3 Performing a Join on Geometry Column**\n\nNext, we will want to aggregate the total number of drug use cases according to each 77 provinces in Thailand. Here, I use `left_join()` to associate each drug use case to its respective province (i.e. the geometry of the drug case).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Step 1: Count rows before the join\ninitial_row_count <- nrow(drug_cases)\n\n# Step 2: Perform the join and convert to sf\ndrug_cases <- drug_cases %>%\n  left_join(thai_boundary %>% select(geometry, ADM1_EN, ADM1_PCODE), \n            by = c(\"province_en\" = \"ADM1_EN\")) %>%\n  st_as_sf()\n\n# Step 3: Count rows after the join\nfinal_row_count <- nrow(drug_cases)\n\n# Step 4: Check if rows were dropped\nif (initial_row_count != final_row_count) {\n  cat(\"Rows were dropped during the join.\\n\")\n  cat(\"Rows before join:\", initial_row_count, \"\\n\")\n  cat(\"Rows after join:\", final_row_count, \"\\n\")\n} else {\n  cat(\"No rows were dropped during the join.\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNo rows were dropped during the join.\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(drug_cases)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 7,392\nColumns: 7\n$ fiscal_year            <dbl> 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,…\n$ types_of_drug_offenses <chr> \"drug_use_cases\", \"drug_use_cases\", \"drug_use_c…\n$ no_cases               <dbl> 11871, 200, 553, 450, 378, 727, 820, 69, 127, 2…\n$ province_th            <chr> \"กรุงเทพมหานคร\", \"ชัยนาท\", \"นนทบุรี\", \"ปทุมธานี\", \"พร…\n$ province_en            <chr> \"Bangkok\", \"Chai Nat\", \"Nonthaburi\", \"Pathum Th…\n$ ADM1_PCODE             <chr> \"TH10\", \"TH18\", \"TH12\", \"TH13\", \"TH14\", NA, \"TH…\n$ geometry               <MULTIPOLYGON [m]> MULTIPOLYGON (((674339.8 15..., MU…\n```\n\n\n:::\n:::\n\n\n## **5. Data Wrangling**\n\n### **5.1 Reduce Data Size**\n\nTo reduce the memory load, we can drop the province names in Thai from our aspatial dataset as it is not relevant for this study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases <- subset(drug_cases, select = c(-province_th)) \nhead(drug_cases)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 5 fields (with 1 geometry empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 577383.3 ymin: 1492136 xmax: 710569.3 ymax: 1704842\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 6\n  fiscal_year types_of_drug_offenses no_cases province_en             ADM1_PCODE\n        <dbl> <chr>                     <dbl> <chr>                   <chr>     \n1        2017 drug_use_cases            11871 Bangkok                 TH10      \n2        2017 drug_use_cases              200 Chai Nat                TH18      \n3        2017 drug_use_cases              553 Nonthaburi              TH12      \n4        2017 drug_use_cases              450 Pathum Thani            TH13      \n5        2017 drug_use_cases              378 Phra Nakhon Si Ayuttha… TH14      \n6        2017 drug_use_cases              727 Loburi                  <NA>      \n# ℹ 1 more variable: geometry <MULTIPOLYGON [m]>\n```\n\n\n:::\n:::\n\n\nWe'll also only retain columns that are most useful from `thai_boundary`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_boundary <- subset(thai_boundary, select = c(Shape_Leng, Shape_Area, ADM1_EN, ADM1_PCODE, geometry)) \n\nhead(thai_boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 628303 ymin: 1490796 xmax: 712440.5 ymax: 1636901\nProjected CRS: WGS 84 / UTM zone 47N\n  Shape_Leng Shape_Area                  ADM1_EN ADM1_PCODE\n1   2.417227 0.13133873                  Bangkok       TH10\n2   1.695100 0.07926199             Samut Prakan       TH11\n3   1.251111 0.05323766               Nonthaburi       TH12\n4   1.884945 0.12698345             Pathum Thani       TH13\n5   3.041716 0.21393797 Phra Nakhon Si Ayutthaya       TH14\n6   1.739908 0.07920961                Ang Thong       TH15\n                        geometry\n1 MULTIPOLYGON (((674339.8 15...\n2 MULTIPOLYGON (((687139.8 15...\n3 MULTIPOLYGON (((644817.9 15...\n4 MULTIPOLYGON (((704086 1575...\n5 MULTIPOLYGON (((662941.6 16...\n6 MULTIPOLYGON (((643472.8 16...\n```\n\n\n:::\n:::\n\n\n### 5.2 Fixing Missing Values\n\nThere are no troublesome rows in the `drug_cases` dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(thai_boundary))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(drug_cases))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n#### 5.2.1 Identify Missing Values\n\nWe can observe ***192*** reported offences that do not include the **ADM1_PCODE** as seen from how some rows contain empty values 'NA'. We are also getting the **192 empty** `geometry` values as returned from the null test below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases %>%\n  filter(is.na(ADM1_PCODE)) %>%\n  select(province_en, ADM1_PCODE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 192 features and 2 fields (with 192 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 192 × 3\n   province_en ADM1_PCODE           geometry\n   <chr>       <chr>      <MULTIPOLYGON [m]>\n 1 Loburi      <NA>                    EMPTY\n 2 buogkan     <NA>                    EMPTY\n 3 Loburi      <NA>                    EMPTY\n 4 buogkan     <NA>                    EMPTY\n 5 Loburi      <NA>                    EMPTY\n 6 buogkan     <NA>                    EMPTY\n 7 Loburi      <NA>                    EMPTY\n 8 buogkan     <NA>                    EMPTY\n 9 Loburi      <NA>                    EMPTY\n10 buogkan     <NA>                    EMPTY\n# ℹ 182 more rows\n```\n\n\n:::\n:::\n\n\nThe root cause of this problem lies in how these two province names were incorrectly spelled in the **province_en** column of `drug_casses` , causing an incomplete `left_join()` to be executed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(drug_cases[!complete.cases(st_drop_geometry(drug_cases)), ][c('province_en')])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 2 features and 1 field (with 2 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2 × 2\n  province_en           geometry\n  <chr>       <MULTIPOLYGON [m]>\n1 Loburi                   EMPTY\n2 buogkan                  EMPTY\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_boundary %>%\n  filter(ADM1_EN == \"Lop Buri\" | ADM1_EN == \"Bueng Kan\") %>%\n  select(ADM1_PCODE, ADM1_EN) %>%\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  ADM1_PCODE ADM1_EN                                                    geometry\n  <chr>      <chr>                                            <MULTIPOLYGON [m]>\n1 TH16       Lop Buri  (((751293.3 1742960, 751337.4 1742928, 751437.2 1742942,…\n2 TH38       Bueng Kan (((965496 2045531, 965625.5 2045528, 965836.6 2045537, 9…\n```\n\n\n:::\n:::\n\n\n#### 5.2.2 Fix Missing Values Discovered\n\nLet's fix these NA values by transforming the two province names to their correct names.\n\n-   **Step 1**: Replace Loburi –\\> Lop Buri, buogkan –\\> Bueng Kan\n-   **Step 2:** Replace 'NA' `ADM1_PCDOE` with the correct province code - TH16 and TH38 for Lop Buri and Bueng Kan respectively\n-   **Step 3:** Replace the existing geometry column in `drug_cases` with the right geometry\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the geometry for Lop Buri\nlop_buri_geometry <- drug_cases %>%\n  filter(province_en == \"Lop Buri\") %>%\n  reframe(first_geometry = st_union(geometry)) %>%  \n  pull(first_geometry)\n\n# Extract the geometry for Bueng Kan\nbueng_kan_geometry <- drug_cases %>%\n  filter(province_en == \"Bueng Kan\") %>%\n  reframe(first_geometry = st_union(geometry)) %>%\n  pull(first_geometry)\n\n# Fix incorrect province names\ndrug_cases <- drug_cases %>%\n  mutate(\n    province_en = case_when(\n      province_en == \"Loburi\" ~ \"Lop Buri\",\n      province_en == \"buogkan\" ~ \"Bueng Kan\",\n      TRUE ~ province_en  \n    )\n  )\n\n# Fix empty province code\ndrug_cases <- drug_cases %>%\n  mutate(ADM1_PCODE = ifelse(province_en == \"Lop Buri\" & \n                             is.na(ADM1_PCODE),\"TH16\", \n                      ifelse(province_en == \"Bueng Kan\" & \n                             is.na(ADM1_PCODE),\"TH38\", ADM1_PCODE)))\n\n# Fix empty geometry\nthai_boundary_no_geom <- thai_boundary %>%\n  select(ADM1_EN, geometry)\ndrug_cases <- drug_cases %>%\n  st_drop_geometry() %>%\n  left_join(thai_boundary_no_geom, by = c(\"province_en\" = \"ADM1_EN\")) \ndrug_cases <- st_as_sf(drug_cases)\n```\n:::\n\n\nWe have successfully removed all NA values found in `drug_cases`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(drug_cases))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n### 5.3 Create New `total_cases` Column\n\nNext, I create a new dataframe `drug_cases_province` to count the total number of cases per province.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases_province <- drug_cases %>%\n  group_by(province_en) %>%\n  summarise(\n    total_cases = sum(no_cases), \n    ADM1_PCODE = first(ADM1_PCODE),              \n    geometry = first(geometry),\n    .groups = \"drop\"                           \n  ) %>%\n  st_as_sf()\n\nprint(drug_cases_province)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 4\n   province_en   total_cases ADM1_PCODE                                 geometry\n   <chr>               <dbl> <chr>                            <MULTIPOLYGON [m]>\n 1 Amnat Charoen       35435 TH37       (((1137720 1809629, 1137724 1809622, 11…\n 2 Ang Thong           16168 TH15       (((643472.8 1636469, 643496 1636423, 64…\n 3 Bangkok            286480 TH10       (((674339.8 1543300, 674382.3 1543278, …\n 4 Bueng Kan           35287 TH38       (((965496 2045531, 965625.5 2045528, 96…\n 5 Buri Ram            57352 TH31       (((921217 1750212, 921217 1750211, 9212…\n 6 Chachoengsao        53514 TH24       (((722656.1 1546054, 722796 1546041, 72…\n 7 Chai Nat            15310 TH18       (((620165.4 1704256, 620291.4 1704247, …\n 8 Chaiyaphum          64497 TH36       (((772997.4 1851276, 773104.5 1851216, …\n 9 Chanthaburi         31473 TH22       (((853764.8 1360716, 853783.1 1360713, …\n10 Chiang Mai         121812 TH50       (((554883.3 2226795, 555000.6 2226791, …\n# ℹ 67 more rows\n```\n\n\n:::\n:::\n\n\nI will also create a new `drug_cases_province_year` to aggregate the total number of cases for each province and based on each year, regardless of drug offense type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases_province_year <- drug_cases %>%\n  group_by(province_en, fiscal_year) %>%\n  summarise(\n    fiscal_year = first(fiscal_year),\n    total_cases = sum(no_cases), \n    ADM1_PCODE = first(ADM1_PCODE),              \n    geometry = first(geometry),\n    .groups = \"drop\"                           \n  ) %>%\n  st_as_sf()\n\nprint(drug_cases_province_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 462 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 462 × 5\n   province_en   fiscal_year total_cases ADM1_PCODE                     geometry\n   <chr>               <dbl>       <dbl> <chr>                <MULTIPOLYGON [m]>\n 1 Amnat Charoen        2017        5076 TH37       (((1137720 1809629, 1137724…\n 2 Amnat Charoen        2018        5651 TH37       (((1137720 1809629, 1137724…\n 3 Amnat Charoen        2019        7339 TH37       (((1137720 1809629, 1137724…\n 4 Amnat Charoen        2020        3949 TH37       (((1137720 1809629, 1137724…\n 5 Amnat Charoen        2021        8961 TH37       (((1137720 1809629, 1137724…\n 6 Amnat Charoen        2022        4459 TH37       (((1137720 1809629, 1137724…\n 7 Ang Thong            2017        1614 TH15       (((643472.8 1636469, 643496…\n 8 Ang Thong            2018        2717 TH15       (((643472.8 1636469, 643496…\n 9 Ang Thong            2019        2781 TH15       (((643472.8 1636469, 643496…\n10 Ang Thong            2020        2636 TH15       (((643472.8 1636469, 643496…\n# ℹ 452 more rows\n```\n\n\n:::\n:::\n\n\n### 5.4 Create Spacetime Cubes\n\nWe will also utilise the new s3 class introduced by Edzer Pebesma (2012) from the `sfdep` package to better represent spatio-temporal data (source code can be found [here](https://github.com/edzer/spacetime)).\n\nA **spacetime object** is considered a **spacetime cube** when each location in the dataset has a corresponding value for every point in time. In other words, the dataset contains a regular time series for each location. Hence, the concept of a `spacetime` cube can be valuable for understanding how the spatial patterns of these drug cases evolve over time.\n\n-   In ESRI terminology, the basic unit of a spacetime cube is called a **bin** which represents a unique combination of a specific geographic location and a particular time index.\n\n-   The collection of all locations for a given time point forms a **time slice**.\n\n-   Similarly, for a single location, the set of bins across all time points is referred to as a **bin time-series**.\n\n![](images/clipboard-431442936.png){fig-align=\"center\" width=\"396\"}\n\nBefore we construct our `spacetime` cube object, we need to carry out data wrangling to prepare the requred data. It is worth noting that geometries are currently stored as `Multipolygon` rather than `Polygon` data. Hence, for the creation of the space-time object, I will need to split the `Multipolygon` geometries into individual `Polygon` components, then retain the largest polygon for each province.\n\n-   **Split Multipolygon into Polygon**: we will use `st_cast` to convert `Multipolygon` geometries into `Polygon` geometries.\n-   **Retain the Largest Polygon**: For each province, we can calculate the area of each polygon and retain only the polygon with the largest area into `geo`.\n-   **Convert the sf Attribute Data to a Dataframe**: The `spacetime()` function will require useful attributes from `drug_cases_province_year` (e.g. total_cases) which will also require the geometry column to be dropped.\n-   **Create the Space-Time Cube**: After preparing the data, I'll be able to use this for space-time analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\n\n# Step 1: Split multipolygon into individual polygons and compute area\nprovinces_split <- thai_boundary %>%\n  st_cast(\"POLYGON\") %>%\n  mutate(area = st_area(geometry))\n\n# Step 2: Retain the largest polygon for each province\ngeo <- provinces_split %>%\n  group_by(ADM1_PCODE) %>%\n  filter(area == max(area)) %>%\n  ungroup() %>%\n  select(ADM1_PCODE, geometry)  \n\n# Step 3: Prepare the data without geometry for analysis\ndf_drug_cases <- st_drop_geometry(drug_cases_province_year) %>%\n  select(ADM1_PCODE, province_en, fiscal_year, total_cases)\n\n# Step 4: Ensure there are no duplicate rows in the data\ndf_drug_cases <- distinct(df_drug_cases)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect the result\nhead(df_drug_cases)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  ADM1_PCODE province_en   fiscal_year total_cases\n  <chr>      <chr>               <dbl>       <dbl>\n1 TH37       Amnat Charoen        2017        5076\n2 TH37       Amnat Charoen        2018        5651\n3 TH37       Amnat Charoen        2019        7339\n4 TH37       Amnat Charoen        2020        3949\n5 TH37       Amnat Charoen        2021        8961\n6 TH37       Amnat Charoen        2022        4459\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure output is an sf object\nclass(geo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure output is a dataframe object\nclass(df_drug_cases)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\nWith the data prepared, we can now create the `spacetime` object called `drug_cases_spt` using the following data:\n\n-   **data:** `df_drug_cases`\n\n-   **geometry:** `st_data`\n\n-   **location identifier:** `ADM1_PCODE`\n\n-   **time:** `fiscal_year`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the spacetime object\ndrug_cases_spt <- spacetime(\n  .data = df_drug_cases,      \n  .geometry = geo, \n  .loc_col = \"ADM1_PCODE\",     \n  .time_col = \"fiscal_year\",    \n  active = \"data\"               \n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if it's a valid spacetime cube\nis_spacetime_cube(drug_cases_spt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n::: callout-note\nA key takeaway and something to note, we need to dissolve the `MULTIPOLYGON` data to a `GEOMETRY` spatial object, else it will lead to an error where duplicated geometry is found. Additionally, after multiple trials and errors, I figured out that this error will also surface if the .data and .geometry parameters don't receive a **dataframe** and **sf** object respectively.\n\n![](images/clipboard-317917080.png){fig-align=\"center\" width=\"498\"}\n:::\n\n## 6. Exploratory Geospatial Data Analysis\n\n### 6.1 Overall Histogram of Drug Cases\n\nI employed the `geom_histogram` function of the `ggplot` package to plot histogram distributions of the spread of the number of drug cases found in Thailand from 2017 to 2022.\n\nOverall, the number of cases appears to be relatively right-skewed with some outliers indicating a significantly high number of drug cases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(drug_cases, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue2\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Histogram of Total Drug Cases in Thailand (2017-2022)\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\")\n  )\n```\n:::\n\n\n![](images/clipboard-1063489729.png)\n\n### 6.2 Histogram of Drug Cases by Year\n\nBased on each year category, we see that there is a similar pattern of drug cases skewed towards the lower end with an uneven distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(dplyr)\n\n# Create histogram for each year\ndrug_cases_2017 <- filter(drug_cases, fiscal_year == 2017)\nhist_2017 <- ggplot(drug_cases_2017, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2017\") +\n  theme_minimal(base_size = 9) \n\ndrug_cases_2018 <- filter(drug_cases, fiscal_year == 2018)\nhist_2018 <- ggplot(drug_cases_2018, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2018\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2019 <- filter(drug_cases, fiscal_year == 2019)\nhist_2019 <- ggplot(drug_cases_2019, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2019\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2020 <- filter(drug_cases, fiscal_year == 2020)\nhist_2020 <- ggplot(drug_cases_2020, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2020\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2021 <- filter(drug_cases, fiscal_year == 2021)\nhist_2021 <- ggplot(drug_cases_2021, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2021\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2022 <- filter(drug_cases, fiscal_year == 2022)\nhist_2022 <- ggplot(drug_cases_2022, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2022\") +\n  theme_minimal(base_size = 9)\n\n# Arrange all histograms in a grid layout\ngrid.arrange(hist_2017, hist_2018, hist_2019, hist_2020, hist_2021, hist_2022, nrow = 2)\n```\n:::\n\n\n![](images/clipboard-1227396748.png)\n\n![]()\n\n### 6.3 Total Cases by Drug Case Type\n\nNext, we can take a peak into the spread of number of drug offense based on the drug case type. It appears that the highest number of drug case types involve drug use, drug possession and trafficking cases, while drug export cases is discovered to be the least in number of offenses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases_category_sum <- drug_cases_type %>%\n  mutate(category = case_when(\n    types_of_drug_offenses %in% c(\"drug_use_cases\", \"suspects_in_drug_use_cases\") ~ \"Drug Use Cases\",\n    types_of_drug_offenses %in% c(\"possession_cases\", \"suspects_in_possession_cases\", \"possession_with_intent_to_distribute_cases\", \"suspects_in_possession_with_intent_to_distribute_cases\") ~ \"Possession Cases\",\n    types_of_drug_offenses %in% c(\"trafficking_cases\", \"suspects_in_trafficking_cases\") ~ \"Trafficking Cases\",\n    types_of_drug_offenses %in% c(\"production_cases\", \"suspects_in_production_cases\") ~ \"Production Cases\",\n    types_of_drug_offenses %in% c(\"import_cases\", \"suspects_in_import_cases\", \"export_cases\", \"suspects_in_export_cases\") ~ \"Import/Export Cases\",\n    types_of_drug_offenses %in% c(\"conspiracy_cases\", \"suspects_in_conspiracy_cases\") ~ \"Conspiracy Cases\",\n    TRUE ~ \"Other\"\n  )) %>%\n  group_by(category) %>%\n  summarise(total_cases_sum = sum(total_cases))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(drug_cases_type, aes(x = reorder(types_of_drug_offenses, total_cases), y = total_cases, fill = category)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = total_cases), hjust = -0.2, size = 4) +  # Add total cases labels\n  labs(title = \"Total Number of Drug Cases by Drug Offense Type\",\n       x = \"Drug Case Type\",\n       y = \"Total Cases\") +\n  scale_fill_brewer(palette = \"Blues\") + \n  theme_minimal(base_size = 16) +  \n  theme(axis.text.y = element_text(size = 16),  \n        axis.title = element_text(size = 16),   \n        plot.title = element_text(hjust = 0.5, size = 20),\n        legend.position = \"bottom\") +  \n  coord_flip()  # Flip the bars horizontally\n```\n:::\n\n\n![](images/clipboard-953256980.png)\n\n### 6.4 Overall Plot of Drug Cases\n\nAs such, an ***quantile*** interval will be more suitable in plotting the total number of cases for each province as shown in the tmap output below. Additionally, we can use the default break of **5** to capture a suitable level of granularity across all provinces. For comparison purposes, I will also plot the ***equal*** scale as shown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First plot using quantile interval\nplot_quantile <- tm_shape(drug_cases_province) +\n  tm_polygons(\"total_cases\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          n = 5,\n          title = \"Number of Drug Cases\") +\n  tm_layout(main.title = \"Distribution of Drug Cases in Thailand \\n by Province (Quantile Interval)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", size = 2, position = c(\"right\", \"top\")) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n# Second plot using equal interval\nplot_equal <- tm_shape(drug_cases_province) +\n  tm_polygons(\"total_cases\", \n          style = \"equal\", \n          palette = \"Blues\",\n          n = 5,\n          title = \"Number of Drug Cases\") +\n  tm_layout(main.title = \"Distribution of Drug Cases in Thailand \\n by Province (Equal Interval)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", size = 2, position = c(\"right\", \"top\")) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n# Combine both plots side by side\ntmap_arrange(plot_quantile, plot_equal, nrow = 1)\n```\n:::\n\n\n![](images/clipboard-234682238.png)\n\n::: {.callout-tip title=\"Observations\"}\nOverall, we can observe that the highest number of drug cases are found in the **north-western, central, eastern and southern** provinces of Thailand as seen in the darker regions. Namely..\n\n-   North-west: Chiang Mai, Chiang Rai\n-   Central: Chaiyaphum, Khon Kaen and Nakhon-Ratchasima\n-   East: Sisaket, Ubon-Ratchathani\n-   South: Surat Thani, Nakhon Si Thammarat, Phuket\n\nIt is worth noting that smaller provinces are likely to be lighter in shade due to their smaller geographic area.\n:::\n\n### 6.5 Plot of Drug Cases by Year\n\nWhen we further categorise the drug cases by year, we can see that there is an even spread of cases\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_quantile_year <- tm_shape(drug_cases_province_year) +\n  tm_polygons(\"total_cases\", \n          style = \"quantile\", \n          palette = \"Blues\") +\n  tm_facets(by=\"fiscal_year\", free.coords = FALSE) +\n  tm_layout(main.title = \"Distribution of Drug Cases in Thailand \\n by Province for Each Year (Quantile Interval)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) \n\nplot_quantile_year\n```\n:::\n\n\n![](images/clipboard-1946072980.png)\n\n::: {.callout-tip title=\"Observations\"}\nWhen the drug cases are visualised by year, we can observe consistent patterns where high drug abuse cases are consistently located at the Southern parts of Thailand. Central Thailand in 2017 showed an average number of drug cases but this increased in the 2018 and continues to increase in the following years till 2022. In 2022, central Thailand faces a high concentration of drug cases which appears to have spread to its neighbouring provinces, particularly with the greatest spread in 2021.\n:::\n\nSimilar observations can be found when plotting the drug cases using the `knitr` package as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create temporal maps\ntemporal_maps <- tm_shape(drug_cases_province_year) +  \n  tm_polygons(\"total_cases\",  \n              palette = \"Blues\",  \n              style = \"quantile\", \n              title = \"Drug Cases\") + \n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(legend.title.size = 1.8,\n            legend.text.size = 1.1) +\n  tm_facets(along = \"fiscal_year\", free.coords = FALSE)\n\n# Generate animation\ntmap_animation(temporal_maps, filename = \"thailand_drugs_temporal.gif\", \n               delay = 150, width = 1000, height = 1200)\n```\n:::\n\n\n![](images/thailand_drugs_temporal.gif){width=\"664\"}\n\n## 7. Global Measures of Spatial Autocorrelation\n\nThe Second Law of Geography articulated by Waldo Tobler in 1970, states that spatial relationships (or correlations) can vary depending on the context and the specific characteristics of different regions. This concept of **spatial non-stationarity** can be effectively measured and analysed using **spatial autocorrelation statistics**.\n\n### 7.1 Methods Used\n\nThis section delves into analysing the spatial autocorrelation of our drug cases dataset and assessing how the presence of drug abuse in a province may influence and form clusters around it.\n\nSpatial relationships are characterised by their **multidirectional** and **multilateral** nature, setting them apart from temporal relationships, which are linear and follow a past-present-future sequence. The **codifying process of spatial relationships,** illustrated in the figure below, enables the transformation of complex geographic space into a structured dataset suitable for computer analysis.\n\n![](images/clipboard-2507849526.png){fig-align=\"center\" width=\"454\"}\n\nThere are multiple approaches to defining spatial neighbours. Two most common methods are:\n\n1.  **Adjacency Measures**: establish links between spatial units that are directly adjacent to one another. In this context, spatial units are considered neighbours if they share a boundary or a point.\n\n2.  **Distance Measures**: selects neighbours based on proximity, where the nearest points to a given spatial unit are identified as neighbours. This approach considers varying distances, enabling a more nuanced understanding of spatial relationships beyond mere adjacency.\n\n    -   **Rook Criterion**: Neighbours are areas that share a common edge via horizontal and vertical connections between spatial units.\n    -   **Bishop Criterion**: Neighbours are areas that share a common corner but not necessarily an edge. This approach is similar to the diagonal movements.\n    -   **Queen Criterion**: Neighbours are areas that share either an edge or corner, which includes both vertical, horizontal, and diagonal connections.\n\n![](images/clipboard-1656372088.png){fig-align=\"center\" width=\"500\"}\n\n### 7.2 Computing Contiguity Neighbours\n\nI decided to use the Queen criterion in deriving our **neighbour list object** since it covers the most neighbours of the three. To do so, we will utilise the `st_contiguity()` function from the `sfdep` package to create contiguity weight matrices for the study area. This function generates a list of neighbors based on provinces that **share** **contiguous boundaries.** It is worth noting that the function only supports the rook and queen criteria which is suitable for our analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_nb_q <- st_contiguity(drug_cases_province$geometry, queen=TRUE)\nsummary(thailand_nb_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\nEach number returned above is an ID assigned to each province from the `st_contiguity()` function. Let's find out the specific provinces highlighted by the summary above!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince_ids <- data.frame(\n  region_id = seq_along(drug_cases_province$province_en),\n  province_en = drug_cases_province$province_en,\n  total_cases = drug_cases_province$total_cases\n)\n\nprovince_ids[province_ids$region_id %in% c(17, 48, 69, 71), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   region_id province_en total_cases\n17        17   Khon Kaen       93905\n48        48      Phuket       75321\n69        69         Tak       23530\n71        71        Trat       13496\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\n-   I can observe a total of 77 provinces (regions) in the dataset with **352 neighbouring links** between the provinces\n-   There is **roughly 5.94% non-zero neighbour relationships**. This indicates only a small proportion of total possible connections have neighbours.\n-   On average, we can also observe that **each province** has **4.57 neighbouring regions.**\n-   **Region** **48** (Phuket province) has **no neighbouring regions**\n-   **Region 71** (Trat province) is one of the **least connected provinces** with only 1 neighbouring region\n-   **Regions 17** (Khon Kaen province) and **69** (Tak province) are the two provinces with the **most neighbours**, each sharing boundaries with 9 other provinces\n:::\n\n### 7.3 **Computing Row-Standardised Weight Matrix**\n\nNext, I attempt to calculate spatial weights but the **isolated region (48)** is causing issues as spatial weights calculations require all regions to have neighbors.\n\nTo resolve the issue caused by the isolated region, I will use the `allow_zero = TRUE` option when calculating spatial weights, which will assign zero as a lagged value to allow the analysis to proceed despite isolated regions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_wt <- st_weights(thailand_nb_q, style = \"W\", allow_zero = TRUE)\n```\n:::\n\n\nWe will mutate the newly created neighbour list object `thailand_nb_1` and weight matrix `thailand_wt` into our existing `drug_cases_province`. This results in a newly created object called `wm_1`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- drug_cases_province %>%\n  mutate(nb = thailand_nb_q,\n         wt = thailand_wt,\n         .before = 1) \n\n# Inspect\nwm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 6\n   nb        wt     province_en total_cases ADM1_PCODE                  geometry\n * <nb>      <list> <chr>             <dbl> <chr>             <MULTIPOLYGON [m]>\n 1 <int [3]> <dbl>  Amnat Char…       35435 TH37       (((1137720 1809629, 1137…\n 2 <int [4]> <dbl>  Ang Thong         16168 TH15       (((643472.8 1636469, 643…\n 3 <int [6]> <dbl>  Bangkok          286480 TH10       (((674339.8 1543300, 674…\n 4 <int [3]> <dbl>  Bueng Kan         35287 TH38       (((965496 2045531, 96562…\n 5 <int [5]> <dbl>  Buri Ram          57352 TH31       (((921217 1750212, 92121…\n 6 <int [8]> <dbl>  Chachoengs…       53514 TH24       (((722656.1 1546054, 722…\n 7 <int [4]> <dbl>  Chai Nat          15310 TH18       (((620165.4 1704256, 620…\n 8 <int [4]> <dbl>  Chaiyaphum        64497 TH36       (((772997.4 1851276, 773…\n 9 <int [5]> <dbl>  Chanthaburi       31473 TH22       (((853764.8 1360716, 853…\n10 <int [5]> <dbl>  Chiang Mai       121812 TH50       (((554883.3 2226795, 555…\n# ℹ 67 more rows\n```\n\n\n:::\n:::\n\n\n### 7.4 Visualising Contiguity Weights\n\nLet's also visualise the Queen's neighbour map. Here, we retrieve the centroid coordinates of each province by combining the longitude and latitude into a single object via `st_centroid()`. The outputs of the coordinate looks correct as shown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract centroid geometries\ncentroids <- st_centroid(drug_cases_province)\nhead(centroids)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 645239 ymin: 1505514 xmax: 1115483 ymax: 2013040\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 4\n  province_en   total_cases ADM1_PCODE           geometry\n  <chr>               <dbl> <chr>             <POINT [m]>\n1 Amnat Charoen       35435 TH37        (1115483 1765518)\n2 Ang Thong           16168 TH15         (645239 1617118)\n3 Bangkok            286480 TH10       (675514.6 1523087)\n4 Bueng Kan           35287 TH38       (998785.3 2013040)\n5 Buri Ram            57352 TH31       (925999.3 1642136)\n6 Chachoengsao        53514 TH24       (762475.6 1505514)\n```\n\n\n:::\n:::\n\n\nNow, let's plot the contiguity weights using the Queen's method for all provinces.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot all regions (showing the boundaries)\nplot(drug_cases_province$geometry, border = \"lightgrey\", main = \"Queen's Contiguity Weights (Including All Regions)\")\n\n# Loop through each region and plot neighbors if they exist\nfor (i in seq_along(thailand_nb_q)) {\n  # Check if the region has neighbors\n  if (length(thailand_nb_q[[i]]) > 0) {\n    for (neighbor in thailand_nb_q[[i]]) {\n      current_coords <- st_coordinates(centroids[i, ])\n      neighbor_coords <- st_coordinates(centroids[neighbor, ])\n      \n      # Create a LINESTRING directly from the two centroid coordinates\n      combined_geom <- matrix(c(current_coords[1], current_coords[2],\n                                 neighbor_coords[1], neighbor_coords[2]),\n                              ncol = 2, byrow = TRUE)\n      \n      # Draw lines between the current region and its neighbour\n      lines(combined_geom, col = \"blue\")\n    }\n  }\n}\n```\n:::\n\n\n![](images/clipboard-1805425517.png){fig-align=\"center\"}\n\n::: {.callout-tip title=\"Observations\"}\nWe cam observe that most connections between the centroids of each province is found at the **lower central regions** of Thailand which shows signs of higher interactivity between provinces here. Surprisingly, there are fewer connecting relationships between provinces in the central parts of Thailand.\n:::\n\n### 7.5 Global *Moran's I*\n\nMoran’s I is a inferential static measure of the correlation between a variable and the values of its neighbouring regions to **determine statistical significance**. It reflects the **extent** to which **individual features deviate** from the **overall values** in the study area, assessing the **similarity** between each region and its neighbours, and averages these evaluations.\n\nTo examine spatial autocorrelation, we must test the following hypotheses:\n\n-   **Null Hypothesis (H0)**: This states that there is either ***no*** spatial autocorrelation (H0) or that ***negative*** spatial autocorrelation exists (H0).\n-   **Alternative Hypothesis (H1)**: This suggests that ***positive*** spatial autocorrelation is present.\n\nThe values of Moran’s I typically range from -1 to 1.\n\n-   **-1** is perfect clustering of dissimilar values (perfect dispersion).\n-   **0** is no autocorrelation (perfect randomness.)\n-   **+1** indicates perfect clustering of similar values (the opposite of dispersion).\n\n#### 7.5.1 Computing Global *Moran's I*\n\nI will employ the [`global_moran()`](https://sfdep.josiahparry.com/reference/global_moran) function to compute the Moran’s I value which outputs a tibble dataframe. The `zero.policy` has been set to `TRUE` to allow the function to appropriately handle areas with no neighbours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI <- global_moran(wm_q$total_cases,\n                       wm_q$nb,\n                       wm_q$wt, \n                       zero.policy = TRUE)\nglimpse(moranI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num 0.119\n $ K: num 15.8\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nBased on the outputs...\n\n-   The **Moran's I** value of `0.119` suggests a slight positive spatial autocorrelation, indicating clustering of similar values (e.g., areas with similar drug case counts).\n\n-   The **K** value of `15.8` indicates that each region, on average, has about 15.8 neighbours, which is a moderate level of connectivity among the regions being analysed.\n:::\n\n#### 7.5.2 Global *Moran's I* Test\n\nThe Global Moran’s I test, which can be performed using the `global_moran_test()` function from the `sfdep` package, is a tool for assessing spatial autocorrelation. The main objective of this test is to **ascertain the presence of systemic spatial variations of drug abuse cases**. In other words, how the number of drug cases in each province vary according to its surrounding provinces compared to that under spatial randomness.\n\nFor this analysis, we will specify `alternative = \"greater\"` in line with our alternative hypothesis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q$total_cases,\n                       wm_q$nb,\n                       wm_q$wt,\n                       zero.policy = TRUE,\n                       alternative = \"greater\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 1.8848, p-value = 0.02973\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.117752268      -0.013333333       0.004837196 \n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nThe calculated Moran I statistic returns a positive value of **0.118,** suggesting **positive spatial autocorrelation** and a tendency for similar values to be **more clustered together** than would be expected by chance. Hence, the spatial distribution of drug cases is not random.\n\nThe standard deviation (or z-score)of the observed Moran I statistic is **1.8848 s.d. away from the expected value** (which is typically 0 under the null hypothesis). The positive s.d. indicates that the observed clustering is stronger than what would be expected under the null hypothesis.\n\nSince the **p-value of 0.02973** \\< **alpha value of 0.05**, assuming a 95% confience interval, there is **statistically significant evidence** to reject the null hypothesis (which posits that there is no spatial autocorrelation) in favour of the alternative hypothesis, confirming that positive spatial autocorrelation is present in the data.\n:::\n\n#### **7.5.3 Performing Global *Moran’s I*** Permutation Test\n\nFrom a frequentist approach, sampling the p-value once is not sufficient for determining the long-run behaviour of estimators and tests. Hence, let us strengthen our findings by repeated sampling, that is to perform **Monte Carlo simulation** and then, observe the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngmoran_MC <- global_moran_perm(wm_q$total_cases,\n                  wm_q$nb,\n                  wm_q$wt,\n                  zero.policy = TRUE,\n                  nsim = 999)\ngmoran_MC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.11775, observed rank = 957, p-value = 0.086\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n::: callout-note\nIt is always good practice to use `set.seed()` before performing simulation. This is to ensure that the computation is reproducible.\n:::\n\n::: {.callout-tip title=\"Observations\"}\nAfter 1000 simulations, our observed result confirms that the p-value is indeed **smaller than the alpha value of 0.05** and the **Moran I statistic is \\> 0**. Hence, we can **reject the H0** in favour of H1, meaning that the results of `global_moran_test()` test is stable and statistically significant, and spatial distribution of drug cases resemble clustering distribution patterns.\n:::\n\nNow, we can analyse the spatial distribution of drug cases in a histogram and its summary statistics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  aes(gmoran_MC$res[1:999]) + \n  geom_histogram(colour=\"black\", fill=\"skyblue\") + \n  geom_vline(aes(xintercept = mean(gmoran_MC$res)), color = 'red') +\n  labs(title = \"Histogram of Simulated Moran's I For Thailand's Drug Cases\",\n       x = \"Simulated Moran's I\",\n       y = \"Occurences\") +\n  theme_minimal()+ \n  theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\")\n  )\n```\n:::\n\n\n![](images/clipboard-2351023385.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summary Statistics\nsummary(gmoran_MC$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.19043 -0.06200 -0.01834 -0.01352  0.03085  0.32088 \n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nWe can confirm that the **observed Moran I statistic** **(0.11775)** is **higher** than the **median (−0.01834)** and **mean (−0.01352)** of the simulated values. This suggests that the observed spatial pattern is more clustered than what would be expected if the values were randomly distributed.\n:::\n\n### 7.6 Global Geary's C Test\n\nIn practice, when analysing spatial data, it is often recommended to use both Geary’s C and Moran’s I to gain a more comprehensive understanding of spatial patterns. However, **Geary's C** can **often fail to detect localised clustering** compared to other spatial autocorrelation tests like Moran's I.\n\n-   **Geary’s C is more sensitive to local dissimilarities** between individual pairs of neighbouring areas rather than overall clustering, which makes it less effective at identifying larger-scale spatial structures or clusters.\n\n-   **Moran’s I is better at identifying global patterns** of clustering, where areas with similar values are grouped together in broader spatial clusters.\n\nNonetheless, let's explore what Geary's C results look like for us.\n\n#### 7.6.1 Computing Global *Geary's C*\n\n**Geary's C test** is developed by Geary (1954), which examines the intensity of a specific characteristic in spatial objects using a weight matrix. It can be performed using `global_c_test()` of the `sfdep` package in R, similar to how we conducted the Global Moran's I test for evaluating spatial autocorrelation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_c(\n  wm_q$total_cases, \n  wm_q$nb, \n  wm_q$wt,\n  allow_zero = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$C\n[1] 0.9878824\n\n$K\n[1] 15.80246\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nThe Geary's C statistic returned is `0.9879` which, unlike the results returned by *Moran's I,* suggests a **weak positive spatial autocorrelation** since it is very close to **1**, indicating little to no spatial autocorrelation. As mentioned, Geary's C tends to focus on local clusters which might miss larger clusters.\n:::\n\n#### 7.5.2 Global *Geary C's* Test\n\nLet us perform the Geary C's Test which can be implemented using `global_c_test()` from the `sfdep` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_c_test(wm_q$total_cases,\n                  wm_q$nb,\n                  wm_q$wt,\n                  allow_zero = TRUE,\n                  alternative = \"greater\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  x \nweights: listw  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 0.22762, p-value = 0.41\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.97488398        1.00000000        0.01217483 \n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nAfter performing the Geary C test, we can observe that...\n\n-   **Geary’s C statistic** is close to **1**, suggesting **little or no global spatial autocorrelation**.\n\n-   The **p-value of 0.41** indicates that the observed pattern is **not significantly different from random**.\n\n-   Therefore, the data does not show strong spatial clustering or dispersal, and the spatial distribution of values is likely random.\n:::\n\n#### **7.5.3 Performing Global *Geary's C*** Permutation Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggeary_MC <- global_c_perm(wm_q$total_cases,\n                  wm_q$nb,\n                  wm_q$wt,\n                  allow_zero = TRUE,\n                  alternative = \"greater\",\n                  nsim = 999)\nggeary_MC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.97488, observed rank = 459, p-value = 0.459\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\nWe can see that the distribution of drug cases resulting from the Geary's C permutation test has a **much higher** **mean (0.9851)** and **median (0.9860) t**han what was outputted by the Global Moran's I test. Likewise, the observed Geary's C statistics of 0.97488 suggests that the data does not show strong clustering/dispersed, but is random.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summary Statistics\nsummary(ggeary_MC$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.4489  0.9151  0.9859  0.9882  1.0662  1.3445 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  aes(ggeary_MC$res[1:999]) + \n  geom_histogram(colour=\"black\", fill=\"skyblue\") + \n  geom_vline(aes(xintercept = mean(ggeary_MC$res)), color = 'red') +\n  labs(title = \"Histogram of Simulated Geary's C For Thailand's Drug Cases\",\n       x = \"Simulated Geary's C\",\n       y = \"Occurences\") +\n  theme_minimal()+ \n  theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\")\n  )\n```\n:::\n\n\n![](images/clipboard-4160189896.png)\n\n::: {.callout-tip title=\"Observations\"}\nAs shown, Geary’s C indeed indicated randomness since it doesn’t detect the **global pattern** of spatial clustering very well, even when such a pattern is present. Geary's C sensitivity to local differences between pairs of neighbours could make it **miss larger, global clustering patterns** and conclude that the spatial distribution is more random than it actually is. Hence, the Global Moran's I test is more relevant in identifying overall clustering on a global-scale, i.e at a national scale, rather than by provinces.\n:::\n\n## 8. Local Indicators of Spatial Association (LISA)\n\nPreviously, we used *Global Moran's I* and *Geary's C* in which we discovered whether spatial clustering exists across the whole Thailand region.\n\nHowever, I would also like to perform local spatial autocorrelation to identify specific areas of clustering **at a local level** using LISA methods (Anselin, 1995). If these methods detect significant local clusters, it can help confirm that there are indeed clustered patterns that Geary’s C might have missed.\n\n### 8.1 Local *Moran's I~i~*\n\n#### 8.1.1 Computing Local *Moran's I~i~*\n\n**Local Moran’s I~i~** is an extension of **Global Moran’s I**, designed to identify **local clusters** and **spatial outliers** within a dataset. **Local Moran’s I~i~** provides a measure of autocorrelation at individual locations, identifying where significant clustering or outliers exist.\n\nLet's utilise the `local_moran()` function of **sfdep** to handle the computations. Once again, we'll set `zero.policy` to **TRUE** to allow the analysis to continue despite the one province with 0 neighbours.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- wm_q %>% \n  mutate(local_moran = local_moran(total_cases, nb, wt, \n                                   zero.policy = TRUE, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n\n# Inspect\nlisa\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 17 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 18\n        ii      eii   var_ii   z_ii   p_ii p_ii_sim p_folded_sim skewness\n     <dbl>    <dbl>    <dbl>  <dbl>  <dbl>    <dbl>        <dbl>    <dbl>\n 1 -0.125  -0.0343  0.0590   -0.375 0.708      0.48         0.24   -1.38 \n 2  0.318  -0.0464  0.236     0.750 0.453      0.54         0.27   -0.943\n 3  0.136  -0.607   2.84      0.441 0.659      0.68         0.34    0.261\n 4  0.119   0.00744 0.0477    0.510 0.610      0.66         0.33   -1.85 \n 5  0.0356 -0.0157  0.00322   0.904 0.366      0.36         0.18    1.36 \n 6  0.0430 -0.00211 0.000311  2.56  0.0105     0.06         0.03    0.994\n 7  0.604  -0.0901  0.306     1.25  0.210      0.06         0.03   -1.86 \n 8  0.144  -0.00995 0.0329    0.847 0.397      0.26         0.13    1.80 \n 9 -0.106  -0.0109  0.0559   -0.403 0.687      0.52         0.26   -1.17 \n10 -0.534   0.0101  0.680    -0.660 0.509      0.58         0.29    1.02 \n# ℹ 67 more rows\n# ℹ 10 more variables: kurtosis <dbl>, mean <fct>, median <fct>, pysal <fct>,\n#   nb <nb>, wt <list>, province_en <chr>, total_cases <dbl>, ADM1_PCODE <chr>,\n#   geometry <MULTIPOLYGON [m]>\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"How to read the table output\"}\nThe output from the `local_moran()` function is an `sf` data frame that includes the following columns: `ii, eii, var_ii, z_ii, p_ii, p_ii_sim,` and`p_folded_sim.`\n\n-   **ii**: This represents the local Moran statistic.\n-   **eii**: This denotes the expected value of the local Moran statistic; for `localmoran_perm`, it corresponds to the means from the permutation samples.\n-   **var_ii**: This indicates the variance of the local Moran statistic; for `localmoran_perm`, it reflects the standard deviations from the permutation samples.\n-   **z_ii**: This is the standard deviation of the local Moran statistic; for `localmoran_perm`, it is calculated based on the means and standard deviations from the permutation samples.\n-   **p_ii**: This is the p-value for the local Moran statistic, derived using the `pnorm()` function; for `localmoran_perm`, it utilizes standard deviations based on the means and standard deviations from the permutation samples.\n-   **p_ii_sim**: For `localmoran_perm()`, this represents the rank of the observed statistic in relation to a uniform distribution for \\[0, 1\\] p-values, using the specified alternative hypothesis.\n-   **p_folded_sim**: This reflects the simulation of ranked p-values within the folded range of \\[0, 0.5\\], based on a specific implementation found in the [GitHub repository](https://github.com/pysal/esda/blob/4a63e0b5df1e754b17b5f1205bcadcbecc5e061/esda/crand.py#L211-L213).\n:::\n\n#### 8.1.2 Visualising Local *Moran's I~i~*\n\nTo ease our analysis, an approach we can take is to plot the local Moran's I values across to visualise the observed values across each province. We'll use a choropleth map from the `tmap` package to analyse the spatial patterns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa) +\n  tm_fill(\"ii\", \n          palette = c(\"#B3EBF2\",\"green1\",\"orange\",\"red\"),\n          title = \"Local Moran's I\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.5) +\n  tm_layout(main.title = \"Province-Level Spatial Autocorrelation \\nof Drug Cases in Study Area (Thailand)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            legend.hist.size = 0.6,\n            legend.position = c(\"right\",\"bottom\"),\n            asp = 1.1,\n            frame = TRUE) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(labels.size = 0.6, alpha = 0.2)\n```\n:::\n\n\n![](images/clipboard-3631018759.png)\n\n::: {.callout-tip title=\"Observations\"}\nThe local spatial autocorrelation using *Moran's I* outputs a total of **4 different regions**, each with a different range of Moran's I value.\n\n-   Provinces in ***blue*** indicate a local Moran's I value ranging from -1 to 0 with **low-high** spatial association or **no similarity** with its neighbours.\n    -   These province are outliers since they exhibit **lower intensity of drug cases** **compared to its surrounding provinces** where drug cases are higher in intensity\n-   Provinces in ***green, orange and red*** has a local Moran's I value ranging from 0 to 3 with **high-high** spatial association.\n    -   These provinces tend to exhibit a high incidence of drug cases and are surrounded by other provinces with **similarly high values.**\n    -   Samut Prakan province **(in red)** shows the **strongest clustering effect** i.e. it is strongly associated with its high drug-cases neighbours.\n    -   Followed by Nakhon Si Thammarat **(in orange)** which shows the 2nd strongest clustering effect.\n\nOverall, the spatial autocorrelation of drug cases is a prevalent and widespread issue across provinces in Thailand. The two provinces, Samut Prakan and Nakhon Si Thammarat, suggests to be **high-risk regions** for the spread of drug cases.\n\nHowever, for a complete understanding of these spatial autocorrelation patterns, we are required to evaluate the **statistical significance** associated with each Local Moran's I value.\n:::\n\n#### 8.1.3 Visualising Local *Moran's I~i~* P-value\n\nAs mentioned in the section above, we shall not hastily conclude the clustering results observed. Instead, let us also evaluate whether the observed clustering (high-high or low-low) is **statistically significant** or **could have occurred by chance**. Hence, we can derive the p-values from Local Moran's I by using the `p_ii_sim` field to determine statistical signficance across provinces.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove lisa record with 0 neighbours\nlisa_clean <- lisa %>% filter(!is.na(p_ii_sim))\n\ntm_shape(lisa_clean) +\n  tm_fill(\"p_ii_sim\", \n          palette = c(\"green3\",\"lightyellow\",\"orange\",\"orange4\",\"red\"),\n          title = \"p-value\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.5) +\n  tm_layout(main.title = \"Statistical Signifance of Spatial Autocorrelation\\n of Drug Cases in Study Area (Thailand)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            legend.hist.size = 0.6,\n            legend.position = c(\"right\",\"bottom\"),\n            asp = 1.1,\n            frame = TRUE) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(labels.size = 0.6, alpha = 0.2)\n```\n:::\n\n\n![](images/clipboard-2441982802.png)\n\n::: {.callout-tip title=\"Observations\"}\nFrom the map above, not every province exhibits statistically significant Local *Moran I's* value (i.e. p-value \\< 0.05)\n:::\n\n#### 8.1.4 Visualising Statistically Significant Local *Moran's I~i~*\n\nWith that said, I would like to switch our focus to provinces that display statistically significant local *Moran's I* values. To execute this, I will attempt to **remove** all local *Moran's I* values with **p-values greater than 0.05**. Subsequently, I will use the `tmap` function to plot the choropleth of statistically significant local spatial autocorrelation on the map of Thailand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig <- lisa  %>%\n  filter(p_ii_sim < 0.05)\n\ntm_shape(lisa)+\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6)+\ntm_shape(lisa_sig) +\n  tm_fill(\"ii\", \n          palette = c(\"skyblue4\",\"skyblue\",\"lightblue1\",\"yellow\",\n                      \"orange\",\"orange4\",\"red\"),\n          title = \"Local Moran's I (p-value < 0.05)\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.5) +\n  tm_layout(main.title = \"Statistical Signifance of Spatial Autocorrelation\\n of Drug Cases in Study Area (Thailand)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            legend.hist.size = 0.6,\n            legend.position = c(\"right\",\"bottom\"),\n            asp = 1.1,\n            frame = TRUE) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(labels.size = 0.6, alpha = 0.2)\n```\n:::\n\n\n![](images/clipboard-1697590140.png)\n\n::: {.callout-tip title=\"Observations\"}\nPreviously, we mentioned that spatial autocorrelation of drug cases is widespread across provinces in Thailand, particularly in the provinces, Samut Prakan and Nakhon Si Thammarat. However, we can see that majority of provinces in Thailand is in fact **not statistically significant**. As such, we cannot conclude that most of these provinces are **high-risk regions** for the spread of drug cases.\n\n**Potential Spill-over of Drug Cases in Central Thailand**\n\n-   Central provinces **(in orange)**, Kamphaeng-Phet and Nakhon Sawan, suggests to have some levels of high drug clusters, as shown from its low local *Moran's I* values ranging from **0.2 to 0.4.**\n\n-   Moreover, a neighbouring province **(in red)** has an even higher local *Moran's I* observed **(0.6 to 0.8)**,indicating that it has the strongest association with its neighbours where both itself and its neighbours exhibit strong clustering of high number of drug cases.\n\n-   This poses a significant risk of drug cases spreading into other neighbouring provinces without adequate law enforcements and control, since this region has already become concentrated with high drug activites cumulatively across the years.\n\n-   On the other hand, a province located in further down in southern Thailand **(dark blue)** displayed high clustering of low drug cases, as observed from its strongly negative local *Moran's I* of **-0.6 to -0.4**.\n\n**Other interesting findings**\n\nWe can also observe that the provinces **in gray** are not statistically signifcant enough, especially provinces which displayed **negative autocorrelation** (i.e. **\\< 0** Moran's I) previously. This means that a **low-high** spatial association is, in reality, not observable in the spread of drug cases in Thailand.\n:::\n\n#### 8.1.5 Visualising Statistically Significant Local *Moran's I~i~* (By Drug Case)\n\nI will categorise the dataset by the following drug case type to ease my analysis of how varying types of drug offense might display spatial dependence/independence from one province to another.\n\n> **Drug Use Cases:** Instances of individuals using drugs.\n>\n> -   `drug_use_cases`\n> -   `suspects_in_drug_use_cases`\n>\n> **Possession Cases**: Instances where individuals are found with drugs and/or evidence suggesting intent to sell or distribute.\n>\n> -   `possession_cases`\n> -   `suspects_in_possession_cases`\n> -   `possession_with_intent_to_distribute_cases`\n> -   `suspects_in_possession_with_intent_to_distribute_cases`\n>\n> **Trafficking Cases:** Instances related to the illegal trade of drugs.\n>\n> -   `trafficking_cases`\n> -   `suspects_in_trafficking_cases`\n>\n> **Production Cases:** Instances involving the manufacture or cultivation of drugs.\n>\n> -   `production_cases`\n> -   `suspects_in_production_cases`\n>\n> **Import/Export Cases:** Instances related to the illegal importation & exportation of drugs.\n>\n> -   `import_cases`\n> -   `suspects_in_import_cases`\n> -   `export_cases`\n> -   `suspects_in_export_cases`\n>\n> **Conspiracy Cases:** Instances where individuals conspire to commit drug-related offenses.\n>\n> -   `conspiracy_cases`\n> -   `suspects_in_conspiracy_cases`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute Moran I's by Drug Case\nlibrary(dplyr)\nlibrary(sf)\nlibrary(sfdep)\n\n# Function for Moran's I calculation after filtering\ncompute_morans_I <- function(filtered_data) {\n  thailand_nb_q <- st_contiguity(filtered_data$geometry, queen = TRUE)\n  thailand_wt <- st_weights(thailand_nb_q, style = \"W\", allow_zero = TRUE)\n  \n  filtered_data <- filtered_data %>%\n    mutate(nb = thailand_nb_q, wt = thailand_wt) %>%\n    mutate(local_moran = local_moran(total_cases, nb, wt, \n                                     zero.policy = TRUE,\n                                     nsim = 99)) %>%\n    unnest(local_moran)\n  \n  return(filtered_data)\n}\n\n# General function to process different types of drug offenses\nprocess_cases <- function(offense_types) {\n  drug_cases %>%\n    filter(types_of_drug_offenses %in% offense_types) %>%\n    group_by(province_en) %>%\n    summarise(\n      total_cases = sum(no_cases),\n      ADM1_PCODE = first(ADM1_PCODE),\n      geometry = first(geometry),\n      .groups = \"drop\"\n    ) %>%\n    st_as_sf() %>%\n    compute_morans_I()\n}\n\n# Define offense types for each category\ndrug_use_offenses <- c(\"drug_use_cases\", \"suspects_in_drug_use_cases\")\npossession_offenses <- c(\"possession_cases\", \"suspects_in_possession_cases\", \n                         \"possession_with_intent_to_distribute_cases\", \n                         \"suspects_in_possession_with_intent_to_distribute_cases\")\ntrafficking_offenses <- c(\"trafficking_cases\", \"suspects_in_trafficking_cases\")\nimport_export_offenses <- c(\"import_cases\", \"suspects_in_import_cases\", \n                            \"export_cases\", \"suspects_in_export_cases\")\nconspiracy_offenses <- c(\"conspiracy_cases\", \"suspects_in_conspiracy_cases\")\n\n# Process each type of offense\ndrug_use_cases <- process_cases(drug_use_offenses)\npossession_cases <- process_cases(possession_offenses)\ntrafficking_cases <- process_cases(trafficking_offenses)\nimport_export_cases <- process_cases(import_export_offenses)\nconspiracy_cases <- process_cases(conspiracy_offenses)\n\n# For significant cases\nsignificant_cases <- function(data) {\n  data %>%\n    filter(p_ii_sim < 0.05) %>% mutate(label = paste(ADM1_PCODE, province_en))\n}\n\n# Filter significant cases for each offense type\ndrug_use_cases_sig <- significant_cases(drug_use_cases)\npossession_cases_sig <- significant_cases(possession_cases)\ntrafficking_cases_sig <- significant_cases(trafficking_cases)\nimport_export_cases_sig <- significant_cases(import_export_cases)\nconspiracy_cases_sig <- significant_cases(conspiracy_cases)\n```\n:::\n\n\n##### **1) Case Type: Drug Use**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot Moran's I and P-values\"}\n# Moran I's (red to green)\ndrug_use_moran_i <- tm_shape(drug_use_cases) +\n  tm_polygons(\"ii\", \n              palette = c(\"#FF0000\", \"#FF4D4D\", \"#FF6666\",\n                          \"#CCFFCC\", \"#66CC66\", \"#4CAF50\"),\n              title = \"Local Moran's I\",\n              midpoint = NA) +\n  tm_layout(main.title = \"Overall Spatial Autocorrelation\\nof Drug Cases (Drug Use)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(alpha = 0.2)\n\n# p-values (red, orange, yellow, green)\ndrug_use_p_values <- tm_shape(thai_boundary)+\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6)+\n  tm_shape(drug_use_cases_sig) +\n  tm_polygons(\"p_ii_sim\", \n              palette = c(\"#d21b1c\",\"#ec9a64\",\"#E5D96E\",\"#c9e3d2\"),\n              title = \"p-value\",\n              midpoint = NA) +\n  tm_layout(main.title = \"Statistically Significant Spatial Autocorrelation\\nof Drug Cases (Drug Use)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(alpha = 0.2)\n\ntmap_arrange(drug_use_moran_i, drug_use_p_values, asp=1, ncol=2)\n```\n:::\n\n\n![](images/clipboard-2820920240.png)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Codes to plot map for statistically significant Moran's I values\"}\ndrug_use_cases_sig <- drug_use_cases_sig %>%\n  mutate(ii_rounded = paste(province_en, \":\", round(ii, 3)))\n\ntm_shape(drug_use_cases) +\n  tm_polygons(id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n\n  tm_shape(drug_use_cases_sig) +\n  tm_fill(\"ii\", \n          palette = c(\"#E4F1EB\", \"#F5F3A6\", \"#E5D96E\",\n                      \"#ec9a64\", \"#d21b1c\"),\n          title = \"Local Moran's I (p < 0.05)\",\n          midpoint = NA,\n          id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"ii_rounded\", \n          size = 0.4, \n          col = \"white\",\n          bg.color = \"black\",\n          bg.alpha = 0.6,  \n          auto.placement = TRUE, \n          just = \"right\",  \n          id = \"province_en\") + \n\n  # Adding layout elements for map styling\n  tm_layout(main.title = \"Statistical Significance of Spatial Autocorrelation\\nof Drug Use Cases in Study Area\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            legend.hist.size = 0.6,\n            legend.position = c(\"right\",\"bottom\"),\n            asp = 1.1,\n            frame = TRUE) +\n\n  # Adding a compass for orientation\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n\n  # Adding a scale bar for map accuracy\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n\n  # Adding grid with transparency\n  tm_grid(labels.size = 0.6, alpha = 0.1)\n```\n:::\n\n\n![](images/clipboard-1434275424.png)\n\n::: {.callout-tip title=\"Observations\"}\n**Overall Observations**\n\nWhen it comes to cases where individuals were found using drugs illegally, we can see that majority of these provinces did not display statistically significant (p\\<0.05) Local *Moran I's* values.\n\n**Observations of statistically significant values**\n\nOn the higher range of Local *Moran's I* values, we can see that **Samut Prakan province in red** (top right plot) displayed a **strong** **p-value of 0.020 to 0.025** which corresponds with a **high positive** Local *Moran's I* value of 0.7 to 0.8 (bottom plot). This indicates that the province is indeed distinctly part of a group of similar high-value neighbours, hinting at a pronounced hotspot.\n\nIn the same bottom plot, we see that adjacent to the red region mentioned above, is a province in **light green**. To me, this is interesting as it suggests that this province has **weaker clustering effects**, meaning that its location has slightly higher number of drug cases than its neighbours but not as high as the province in red. There is a possibility that the spread of drug cases has not spilled to its other neighbours.\n:::\n\n##### **2) Case Type: Possession**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot Moran's I and P-values\"}\n# Moran I's (blue, green, light yellow, yellow, orange, red)\npossession_moran_i <- tm_shape(possession_cases) +\n  tm_polygons(\"ii\", \n              palette = c(\"#E6F4FA\",\"#c9e3d2\", \"#E1ECBB\",\n                          \"#E5D96E\", \"#ec9a64\", \"#d21b1c\"),\n              title = \"Local Moran's I\",\n              midpoint = NA) +\n  tm_layout(main.title = \"Overall Spatial Autocorrelation\\nof Drug Cases (Possession)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(alpha = 0.2)\n\n# p-values (red, orange, yellow, green)\npossession_p_values <- tm_shape(thai_boundary)+\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6)+\n  tm_shape(possession_cases_sig) +\n  tm_polygons(\"p_ii_sim\", \n              palette = c(\"#d21b1c\",\"#ec9a64\",\"#E5D96E\",\"#c9e3d2\"),\n              title = \"p-value\",\n              midpoint = NA) +\n  tm_layout(main.title = \"Statistically Significant Spatial Autocorrelation\\nof Drug Cases (Possession)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(alpha = 0.2)\n\ntmap_arrange(possession_moran_i, possession_p_values, asp=1, ncol=2)\n```\n:::\n\n\n![](images/clipboard-3254231149.png)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Codes to plot map for statistically significant Moran's I values\"}\npossession_cases_sig <- possession_cases_sig %>%\n  mutate(ii_rounded = paste(province_en, \":\", round(ii, 3)))\n\ntm_shape(possession_cases) +\n  tm_polygons(id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n\n  tm_shape(possession_cases_sig) +\n  tm_fill(\"ii\", \n          palette = c(\"#E4F1EB\", \"#F5F3A6\", \"#E5D96E\",\n                      \"#ec9a64\", \"#d21b1c\"),\n          title = \"Local Moran's I (p < 0.05)\",\n          midpoint = NA,\n          id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"ii_rounded\", \n          size = 0.4, \n          col = \"white\",\n          bg.color = \"black\",\n          bg.alpha = 0.6,  \n          just = \"right\",  \n          id = \"province_en\") + \n\n  # Adding layout elements for map styling\n  tm_layout(main.title = \"Statistical Significance of Spatial Autocorrelation\\nof Drug Possession Cases in Study Area\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            legend.hist.size = 0.6,\n            legend.position = c(\"right\",\"bottom\"),\n            asp = 1.1,\n            frame = TRUE) +\n\n  # Adding a compass for orientation\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n\n  # Adding a scale bar for map accuracy\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n\n  # Adding grid with transparency\n  tm_grid(labels.size = 0.6, alpha = 0.1)\n```\n:::\n\n\n![](images/clipboard-1055200682.png)\n\n::: {.callout-tip title=\"Observations\"}\n**Observations of statistically significant values**\n\nFor drug cases found to be in possession and/or with the intent of distributing drugs, there are **high levels of clustering** of such cases in provinces located at the **West** of Thailand as observed from their higher Local *Moran I's* values **(in orange & red regions)**, ranging from 0.2 to 0.6.\n\nInterestingly, the Nakhon Pathom province displayed a low Local *Moran's I* value of **-0.247**, meaning it has **significantly lower** number of drug cases than its neighbours **(light green)**. Ironically, it is situated beside the Nonthaburi province **(red)** which has a **high** Local *Moran's I* value of **0.464**, indicating that Nakhon Pathom province is not part of the significantly high clustering of drug cases observed by its neighbour. This could signal signs of ***boundary effects*** where there is **no** **spill-over effect** found in Nakkon Pathom.\n:::\n\n##### **3) Case Type: Trafficking**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot Moran's I and P-values\"}\n# Moran I's (blue, green, yellow, orange, red)\ntrafficking_moran_i <- tm_shape(trafficking_cases) +\n  tm_polygons(\"ii\", \n              palette = c(\"#E6F4FA\",\"#c9e3d2\",\n                          \"#E5D96E\", \"#ec9a64\", \"#d21b1c\"),\n              title = \"Local Moran's I\",\n              midpoint = NA) +\n  tm_layout(main.title = \"Overall Spatial Autocorrelation\\nof Drug Cases (Trafficking)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(alpha = 0.2)\n\n# p-values (red, orange, yellow, green)\ntrafficking_p_values <- tm_shape(thai_boundary)+\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6)+\n  tm_shape(trafficking_cases_sig) +\n  tm_polygons(\"p_ii_sim\", \n              palette = c(\"#d21b1c\",\"#ec9a64\",\"#E5D96E\",\"#c9e3d2\"),\n              title = \"p-value\",\n              midpoint = NA) +\n  tm_layout(main.title = \"Statistically Significant Spatial Autocorrelation\\nof Drug Cases (Trafficking)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(alpha = 0.2)\n\ntmap_arrange(trafficking_moran_i, trafficking_p_values, asp=1, ncol=2)\n```\n:::\n\n\n![](images/clipboard-3403556708.png)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Codes to plot map for statistically significant\"}\ntrafficking_cases_sig <- trafficking_cases_sig %>%\n  mutate(ii_rounded = paste(province_en, \":\", round(ii, 3)))\n\ntm_shape(trafficking_cases) +\n  tm_polygons(id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n\n  tm_shape(trafficking_cases_sig) +\n  tm_fill(\"ii\", \n          palette = c(\"#E6F4FA\", \"#c9e3d2\", \"#ec9a64\", \"#d21b1c\"),\n          breaks = c(-1, 0, 1, 2, 3),\n          title = \"Local Moran's I (p < 0.05)\",\n          midpoint = NA,\n          id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n\n  # Adding text labels for the 'ii' values over the provinces with a black background\n  tm_text(\"ii_rounded\", \n          size = 0.4, \n          col = \"white\",\n          bg.color = \"black\",\n          bg.alpha = 0.6,  \n          just = \"right\",  \n          id = \"province_en\") + \n\n  # Adding layout elements for map styling\n  tm_layout(main.title = \"Statistical Significance of Spatial Autocorrelation\\nof Trafficking Cases in Study Area\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            legend.hist.size = 0.6,\n            legend.position = c(\"right\",\"bottom\"),\n            asp = 1.1,\n            frame = TRUE) +\n\n  # Adding a compass for orientation\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n\n  # Adding a scale bar for map accuracy\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n\n  # Adding grid with transparency\n  tm_grid(labels.size = 0.6, alpha = 0.1)\n```\n:::\n\n\n![](images/clipboard-3336495180.png)\n\n::: {.callout-tip title=\"Observations\"}\n**Observations of statistically significant values**\n\nLikewise, we see some statistically significant observations in the extreme south of Thailand **(light green)** in the Songkhla province which appears to have **slightly higher** number of drug trafficking cases than its neighbours.\n\nSongkhla is a **key transportation hub** with its capital Hat Yai having strong transportation links by **road, rail, and air**, making it a strategic point for drug traffickers to move illicit drugs. However, we aren't sure where these drugs are illegally traded to/from since *Moran's I* is relatively low, meaning there is **low spatial dependence** with its neighbours.\n\nSi Sa Ket province **(in red)** suggests to have significant clustering of drug cases with **high** Local *Moran I's* values of 2.26. The province has high number of drugs being trafficked and is likewise surrounded by neighbouring provinces with similarly high values, suggesting **spatial dependence.**\n:::\n\n##### **4) Case Type: Import and Export**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot Moran's I and P-values\"}\n# Moran I's (blue, green, yellow, orange, red)\nimport_export_moran_i <- tm_shape(import_export_cases) +\n  tm_polygons(\"ii\", \n              palette = c(\"#E6F4FA\",\"#c9e3d2\",\n                          \"#E5D96E\", \"#ec9a64\", \"#d21b1c\"),\n              title = \"Local Moran's I\",\n              midpoint = NA) +\n  tm_layout(main.title = \"Overall Spatial Autocorrelation\\nof Drug Cases (Import & Export)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(alpha = 0.2)\n\n# p-values (red, orange, yellow, green)\nimport_export_p_values <- tm_shape(thai_boundary)+\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6)+\n  tm_shape(import_export_cases_sig) +\n  tm_polygons(\"p_ii_sim\", \n              palette = c(\"#d21b1c\",\"#ec9a64\",\"#E5D96E\",\"#c9e3d2\"),\n              title = \"p-value\",\n              midpoint = NA) +\n  tm_layout(main.title = \"Statistically Significant Spatial Autocorrelation\\nof Drug Cases (Import & Export)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(alpha = 0.2)\n\ntmap_arrange(import_export_moran_i, import_export_p_values, asp=1, ncol=2)\n```\n:::\n\n\n![](images/clipboard-1020581922.png)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Codes to plot map for statistically significant Moran's I values\"}\nimport_export_cases_sig <- import_export_cases_sig %>%\n  mutate(ii_rounded = paste(province_en, \":\", round(ii, 3)))\n\ntm_shape(import_export_cases) +\n  tm_polygons(id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n\n  tm_shape(import_export_cases_sig) +\n  tm_fill(\"ii\", \n          palette = c(\"#E4F1EB\",\"#E5D96E\",\"#ec9a64\",\"#d21b1c\"),\n          title = \"Local Moran's I (p < 0.05)\",\n          midpoint = NA,\n          id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"ii_rounded\", \n          size = 0.4, \n          col = \"white\",\n          bg.color = \"black\",\n          bg.alpha = 0.6,  \n          just = \"right\",  \n          id = \"province_en\") + \n\n  # Adding layout elements for map styling\n  tm_layout(main.title = \"Statistical Significance of Spatial Autocorrelation\\nof Import & Export Cases in Study Area\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            legend.hist.size = 0.6,\n            legend.position = c(\"right\",\"bottom\"),\n            asp = 1.1,\n            frame = TRUE) +\n\n  # Adding a compass for orientation\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n\n  # Adding a scale bar for map accuracy\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n\n  # Adding grid with transparency\n  tm_grid(labels.size = 0.6, alpha = 0.1)\n```\n:::\n\n\n![](images/clipboard-4029994052.png)\n\n::: {.callout-tip title=\"Observations\"}\n**Observations of statistically significant values**\n\nWe can observe another interesting occurrence of two provinces, Satun **(red)** and Phatthalung **(blue)** being geographically close, but showing very different importing and exporting of drug patterns where the former has a **high positive** *Moran I's value* **(6 to 8)** while the latter has a **negative** observation **(-2 to 0)**. This contrast highlights a spatial disparity where one province (Phatthalung) has significantly fewer import/export of drugs, while its neighbour (Satun) is part of a import/export drug hotspot.\n:::\n\n##### **5) Case Type: Conspiracy**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot Moran's I and P-values\"}\ntmap_mode(\"plot\")\n# Moran I's (blue, green, light yellow, yellow, orange, orangered, red)\nconspiracy_moran_i <- tm_shape(conspiracy_cases) +\n  tm_polygons(\"ii\", \n              palette = c(\"#E6F4FA\",\"green2\",\"#c9e3d2\", \"#E1ECBB\",\n                          \"#E5D96E\", \"#ec9a64\",\"#d21b1c\"),\n              title = \"Local Moran's I\",\n              midpoint = NA) +\n  tm_layout(main.title = \"Overall Spatial Autocorrelation\\nof Drug Cases (Conspiracy)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(alpha = 0.2)\n\n# p-values (red, orange, yellow, green)\nconspiracy_p_values <- tm_shape(thai_boundary)+\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6)+\n  tm_shape(conspiracy_cases_sig) +\n  tm_polygons(\"p_ii_sim\", \n              palette = c(\"#d21b1c\",\"#ec9a64\",\"#E5D96E\",\"#c9e3d2\"),\n              title = \"p-value\",\n              midpoint = NA) +\n  tm_layout(main.title = \"Statistically Significant Spatial Autocorrelation\\nof Drug Cases (Conspiracy)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n  tm_grid(alpha = 0.2)\n\ntmap_arrange(conspiracy_moran_i, conspiracy_p_values, asp=1, ncol=2)\n```\n:::\n\n\n![](images/clipboard-4112380333.png)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Codes to plot map for statistically significant Moran's I values\"}\nconspiracy_cases_sig <- conspiracy_cases_sig %>%\n  mutate(ii_rounded = paste(province_en, \":\", round(ii, 3)))\n\ntm_shape(conspiracy_cases) +\n  tm_polygons(id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n\n  tm_shape(conspiracy_cases_sig) +\n  tm_fill(\"ii\", \n          palette = c(\"#c9e3d2\", \"#E1ECBB\", \"#E5D96E\", \n                        \"#ec9a64\", \"orangered\", \"#d21b1c\"),\n          title = \"Local Moran's I (p < 0.05)\",\n          midpoint = NA,\n          id = \"label\") +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_text(\"ii_rounded\", \n          size = 0.4, \n          col = \"white\",\n          bg.color = \"black\",\n          bg.alpha = 0.6,  \n          auto.placement = TRUE, \n          just = \"right\",  \n          id = \"province_en\") + \n\n  # Adding layout elements for map styling\n  tm_layout(main.title = \"Statistical Significance of Spatial Autocorrelation\\nof Conspiracy Cases in Study Area\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.title.size = 0.6,\n            legend.text.size = 0.6,\n            legend.hist.size = 0.6,\n            legend.position = c(\"right\",\"bottom\"),\n            asp = 1.1,\n            frame = TRUE) +\n\n  # Adding a compass for orientation\n  tm_compass(type = \"8star\", text.size = 0.7, size = 2, position = c(\"RIGHT\", \"TOP\")) +\n\n  # Adding a scale bar for map accuracy\n  tm_scale_bar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) +\n\n  # Adding grid with transparency\n  tm_grid(labels.size = 0.6, alpha = 0.1)\n```\n:::\n\n\n![](images/clipboard-3000597324.png)\n\n::: {.callout-tip title=\"Observations\"}\n**Observations of statistically significant values**\n\nCases where individuals conspire to commit drug-related offenses produces a wider spread of statistically significant observations. In North-Western Thailand, provinces like Chang Mai, Lampang and Phayao **(green)** showed **slightly higher** number of conspiracy cases than its neighbours, with **little spatial dependence** on its neighbouring provinces.\n\nOn the other hand, provinces like Bangkok and Samut Prakan **(orange & red)** were found adjacent to each other and displayed **high spatial dependence** with its neighbours where both provinces are part of clusters with **similarly high** number of such conspiracy drug cases. What's interesting is these provinces are **situated beside** provinces which displayed **low spatiald dependence**, e.g. Nonthaburi, Pathum Thani and Chacheongsao **(light green)**.\n\nThis reflects **spatial heterogeneity**, where we have areas of intense clustering of high drug cases **(orange & red)** adjacent to areas of intense clustering of low values. **(light green)**\n:::\n\n[Continue to Part 2 \\>](https://is415-samanthafoo.netlify.app/take-home_ex/take-home_ex2/take-home_ex02_Part2)\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}