{
  "hash": "6d50ffee684e2754663e149488258ae2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2\"\nsubtitle: \"Harnessing Geospatial Methods to Analyse Drug Abuse Patterns in Thailand\"\nauthor: \"Foo Jia Yi Samantha\"\ndate-modified: 10/06/2024\ndate: 10/06/2024\nformat: \n  html:\n    toc-depth: 5\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## **1. Setting the Scene: Drug Abuse in Thailand**\n\nIn 2022, **567,609 drug users in ASEAN** were treated, in which Thailand was found to have the **highest number of drug users requiring treatment** among ASEAN countries, followed by Malaysia, Indonesia, Laos, the Philippines, and Singapore. (Kahanto M., et al, 2022) Drug abuse is a significant social issue in Thailand, with profound health, financial, and societal implications. Positioned near the Golden Triangle—one of the largest drug production areas in Asia—Thailand faces ongoing challenges due to its geographical proximity and extensive transportation routes, which facilitate drug trafficking. Within Thailand, drug abuse is particularly **prevalent among the youth**, with approximately **2.7 million young people involved**. Of those aged 15–19, around **300,000 are in need of drug treatment**, and vocational students are disproportionately affected compared to their peers in secondary school.\n\nThis underscores the importance of drug treatment in addressing the complex problem of substance abuse and reduces the societal costs associated with drug abuse, such as healthcare expenses, lost productivity, and crime. Hence, to better allocate resources and develop targeted interventions, it is **crucial to understand where drug abuse is most concentrated and how it spreads geographically.** This is where geospatial analysis becomes essential. \n\nIn this exercise, I will utilise geospatial analysis methods to explore the province-level dynamics of drug abuse in Thailand. This will involve preparing a study area layer as `sf` polygon features at the province level, including Bangkok, and creating a drug abuse indicators layer within this study area. Using these extracted data layers, I will conduct **global spatial autocorrelation analysis** using `sfdep` methods, followed by **local spatial autocorrelation analysis.** Finally, I will describe the spatial patterns revealed by determining whether key indicators are spatially dependent, and identifying trends of clusters, outliers and hotspots over time.\n\n## **2. Methods Used**\n\n### **2.1 Spatial Autocorrelation**\n\n![](images/clipboard-1506008753.png){fig-align=\"center\"}\n\nThis quote from Tobler (1970) highlights the essence of spatial autocorrelation, emphasising the importance of studying how values of the same variable are interconnected across space. By examining spatial dependence, we can better understand local and global patterns and variations. This law suggests that phenomena that are geographically close to each other are more likely to be similar or have some kind of spatial relationship compared to phenomena that are farther apart. \n\nIt is also important to note that spatial structure and spatial autocorrelation are inherently interconnected (Tiefelsdorf, 1998):\n\n-   **Spatial structure** encompasses all the connections through which the autocorrelated phenomenon spreads.\n\n-   Without a significant autocorrelated process, spatial structure **cannot be empirically observed.**\n\nThus, the observed spatial distribution is regarded as a reflection of the underlying spatial process. When spatial autocorrelation is present, the value of a variable at a given observation is connected to the values of that same variable at neighbouring observations:\n\n![](images/clipboard-3880014486.png){fig-align=\"center\" width=\"500\"}\n\nConfiguration of areas showing different types of autocorrelation (Nguyen K. et al., 2022)\n\n-   **Positive Spatial Autocorrelation** occurs when similar values of the variable cluster geographically.\n\n-   **Negative Spatial Autocorrelation** arises when dissimilar values are geographically close, indicating that nearby locations tend to differ more than those that are farther apart. This situation often reflects spatial competition.\n\n-   In the **absence of spatial autocorrelation**, the distribution of observations can be considered random.\n\n### **2.2 Cluster and Outlier Analysis**\n\nCluster and Outlier Analysis can be effectively applied using Local Moran's I, Local Geary's C, Moran scatterplots, and LISA Cluster Maps to identify and understand spatial patterns in data. Here’s how each of these methods can be utilised\n\n#### **2.2.1 Local Moran's I and Local Geary's C**\n\n-   **Local Moran's I**: This statistic assesses local spatial autocorrelation by measuring the degree of similarity of a location's value to those of its neighbours. It identifies clusters of high or low values (hotspots and cold spots) and outliers (areas where a value is significantly different from its neighbours). By calculating Local Moran's I for each location, we can highlight areas with significant spatial dependence, helping to identify regions where interventions may be needed.\n\n-   **Local Geary's C**: Similar to Local Moran's I, Local Geary's C focuses on differences rather than similarities. It quantifies the spatial variation between nearby locations, emphasising dissimilarity. This method can help detect spatial competition, where nearby areas have contrasting values. By using Local Geary's C, we can uncover regions that may experience conflicting trends or behaviours, providing insights into localised dynamics.\n\n#### **2.22. Moran Scatterplot**\n\n-   The **Moran scatterplot** visualises the relationship between the value of a variable at a location and the average value of its neighbours. We can plot scatterplot to represent a location, with the x-axis showing the local mean of neighbouring values and the y-axis showing the local value. \n\n-   Plots like this can help us in identifying clusters (high-high or low-low) and outliers (high-low or low-high). The scatterplot can reveal spatial patterns that are not immediately obvious.\n\n#### **2.2.3. LISA Cluster Map**\n\n-   A **LISA Cluster Map** visually represents the results of Local Indicators of Spatial Association, indicating the spatial clusters of similar values (hotspots) and outliers. \n\n-   I will use these maps to quickly identify regions of interest such that areas identified as **hotspots will be marked in red** to signify high values surrounded by high values, while **cold spots will be marked in blue** for low values surrounded by low values. Outliers will be highlighted in contrasting colours.\n\n### **2.3 Emerging Hot Spot Analysis**\n\nThere are different methods for analysing spatial patterns and detecting hotspots including spatial autocorrelation and cluster analysis. **Emerging Hot Spot Analysis (EHSA)** is a specific spatio-temporal method used to examine hotspots over a designated **observation period**. It integrates two well-known techniques: the traditional **Getis-Ord Gi\\* statistic** for hotspot detection and the **Mann-Kendall test** for assessing monotonic trends over time. The main goal of EHSA is to analyse how hot and cold spots change over time, focusing on whether these areas are increasing in intensity, decreasing, or remaining constant.\n\n## **3. Importing Packages into R**\n\n\n\n\n\nLet's load all the required packages for conducting our analysis.\n\n-   [`sf`](https://rdrr.io/github/r-spatial/sf/man/sf-package.html) : provides a standardised way to encode spatial vector data in R environment, facilitating spatial data operations and analysis.\n-   [`st`](https://rdrr.io/cran/sf/man/st.html) : create simple features from numeric vectors, matrices, or lists, enabling the representation and manipulation of spatial structures in R.\n-   [`tidyverse`](https://www.tidyverse.org/) : a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structure.\n-   [`sfdep`](https://cran.r-project.org/web/packages/spdep/) : for computing spatial weights, global and local spatial autocorrelation statistics\n-   [`tmap`](https://cran.r-project.org/web/packages/tmap/) : for creating static and interactive visualisations and maps.\n-   [`ggplot2`](https://cran.r-project.org/web/packages/ggplot2/) : for creating advanced visualisations, graphics and maps using the Grammar of Graphics.\n-   [`knitr`](https://cran.r-project.org/web/packages/spdep/) : for dynamic report generation in R using Literate Programming techniques.\n-   [`Kendall`](https://cran.r-project.org/web/packages/Kendall/) : for computing the Kendall rank correlation and Mann-Kendall trend test\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, st, tidyverse, lubridate, sfdep, tmap, ggplot2, knitr, Kendall)\n```\n:::\n\n\n## **4. Importing Datasets into R**\n\n![](images/clipboard-2233382775.png){fig-align=\"center\" width=\"528\"}\n\nWe will be leveraging two datasets in this exercise. The first dataset to be used is Thailand’s provincial boundary is `tha_admbnda_adm1_rtsd_20220121` which exists in **ESRI .shp** **format** and is based on the Thailand geographic coordinate system. This dataset is extracted from [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) via the HDX portal.\n\nThe second dataset `thai_drug_offenses_2017_2022` consists of aspatial data in a **CSV format** that contains reported cases of drug offences in Thailand from 2017 to 2022. The dataset is extracted from [Thailand Drug Offenses \\[2017-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022) in Kaggle.\n\n### **4.1 Importing Geospatial Data**\n\nIn this section, `st_read()` of sf package will be used to import `tha_admbnda_adm1_rtsd_20220121` dataset into the R environment. The **`st_transform()`** function below converts the CRS of the **`sf`** object to EPSG:32647 which maps to Thailand's UTM zone, particularly for Western/Central parts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_boundary <- st_read(dsn = \"data/geospatial\",layer = \"tha_admbnda_adm1_rtsd_20220121\") %>% st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Inspect data\nglimpse(thai_boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((674339.8 15..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\nLet’s verify the coordinate reference systems of the `thai_boundary` object to ensure the assignment of the correct CRS value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thai_boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nBefore we delve into further data analysis, it is crucial that we first understand the levels of administration that makes up Thailand today. In particular, Thailand has 4 levels of administration, i.e. **level 0 (country), 1 (province), 2 (district),** and **3 (sub-district) boundaries.** Thailand comprises 76 provinces (known as จังหวัด in Thai or changwat in English), along with one special administrative area, Bangkok, the capital. \n\n-   These provinces function as the main local government units and possess legal personhood. \n-   Each province is subdivided into amphoe (districts), which are further broken down into tambon (sub-districts), representing the next tier of local governance. \n-   **For this analysis, I will only focus on the province administration level.**\n\nWe can visualise the structure of our geospatial object as such.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\n# Plot the provinces of Thailand with labels\ntm_shape(thai_boundary) +\n  tm_borders(col = \"black\", lwd = 0.3, alpha = 0.6) + \n  tm_polygons()+\n  tm_layout(\n    main.title = \"Provinces of Thailand\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.show = FALSE,\n    frame = FALSE\n  ) +\n  tm_text(\"ADM1_EN\", size = 0.2)\n```\n:::\n\n\n![](images/clipboard-2171615491.png)\n\n### **4.2 Importing Aspatial Data**\n\nIn this section, `read_csv()` of **sf** package will be used to import the csv file into the R environment. The output is a R dataframe class containing 5 unique columns of drug offences in Thailand from 2017 - 2022.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases <- read_csv(\"data/aspatial/thai_drug_offenses_2017_2022.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(drug_cases)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  fiscal_year types_of_drug_offenses no_cases province_th   province_en         \n        <dbl> <chr>                     <dbl> <chr>         <chr>               \n1        2017 drug_use_cases            11871 กรุงเทพมหานคร  Bangkok             \n2        2017 drug_use_cases              200 ชัยนาท         Chai Nat            \n3        2017 drug_use_cases              553 นนทบุรี         Nonthaburi          \n4        2017 drug_use_cases              450 ปทุมธานี        Pathum Thani        \n5        2017 drug_use_cases              378 พระนครศรีอยุธยา Phra Nakhon Si Ayut…\n6        2017 drug_use_cases              727 ลพบุรี          Loburi              \n```\n\n\n:::\n:::\n\n\n|                        |               |                                                                                |\n|----------------|----------------|---------------------------------------|\n| **Column Name**        | **Data Type** | **Description**                                                                |\n| fiscal_year            | *\\<dbl\\>*     | The fiscal year during which the drug offenses were recorded.                  |\n| types_of_drug_offenses | *\\<chr\\>*     | The specific type or category of drug offence being reported.                  |\n| no_cases               | *\\<dbl\\>*     | The total number of cases recorded for the specific combination of fiscal year |\n| province_th            | *\\<chr\\>*     | The name of the province in Thailand, written in Thai.                         |\n| province_en            | *\\<chr\\>*     | The name of the province in Thailand, written in English.                      |\n\n### **4.3 Performing a Join on Geometry Column**\n\nNext, we will want to aggregate the total number of drug use cases according to each 77 provinces in Thailand. Here, I use `left_join()` to associate each drug use case to its respective province (i.e. the geometry of the drug case).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Step 1: Count rows before the join\ninitial_row_count <- nrow(drug_cases)\n\n# Step 2: Perform the join and convert to sf\ndrug_cases <- drug_cases %>%\n  left_join(thai_boundary %>% select(geometry, ADM1_EN, ADM1_PCODE), \n            by = c(\"province_en\" = \"ADM1_EN\")) %>%\n  st_as_sf()\n\n# Step 3: Count rows after the join\nfinal_row_count <- nrow(drug_cases)\n\n# Step 4: Check if rows were dropped\nif (initial_row_count != final_row_count) {\n  cat(\"Rows were dropped during the join.\\n\")\n  cat(\"Rows before join:\", initial_row_count, \"\\n\")\n  cat(\"Rows after join:\", final_row_count, \"\\n\")\n} else {\n  cat(\"No rows were dropped during the join.\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNo rows were dropped during the join.\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(drug_cases)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 7,392\nColumns: 7\n$ fiscal_year            <dbl> 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,…\n$ types_of_drug_offenses <chr> \"drug_use_cases\", \"drug_use_cases\", \"drug_use_c…\n$ no_cases               <dbl> 11871, 200, 553, 450, 378, 727, 820, 69, 127, 2…\n$ province_th            <chr> \"กรุงเทพมหานคร\", \"ชัยนาท\", \"นนทบุรี\", \"ปทุมธานี\", \"พร…\n$ province_en            <chr> \"Bangkok\", \"Chai Nat\", \"Nonthaburi\", \"Pathum Th…\n$ ADM1_PCODE             <chr> \"TH10\", \"TH18\", \"TH12\", \"TH13\", \"TH14\", NA, \"TH…\n$ geometry               <MULTIPOLYGON [m]> MULTIPOLYGON (((674339.8 15..., MU…\n```\n\n\n:::\n:::\n\n\n## **5. Data Wrangling**\n\n### **5.1 Reduce Data Size**\n\nTo reduce the memory load, we can drop the province names in Thai from our aspatial dataset as it is not relevant for this study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases <- subset(drug_cases, select = c(-province_th))\nhead(drug_cases)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 5 fields (with 1 geometry empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 577383.3 ymin: 1492136 xmax: 710569.3 ymax: 1704842\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 6\n  fiscal_year types_of_drug_offenses no_cases province_en             ADM1_PCODE\n        <dbl> <chr>                     <dbl> <chr>                   <chr>     \n1        2017 drug_use_cases            11871 Bangkok                 TH10      \n2        2017 drug_use_cases              200 Chai Nat                TH18      \n3        2017 drug_use_cases              553 Nonthaburi              TH12      \n4        2017 drug_use_cases              450 Pathum Thani            TH13      \n5        2017 drug_use_cases              378 Phra Nakhon Si Ayuttha… TH14      \n6        2017 drug_use_cases              727 Loburi                  <NA>      \n# ℹ 1 more variable: geometry <MULTIPOLYGON [m]>\n```\n\n\n:::\n:::\n\n\nWe'll also only retain columns that are most useful from `thai_boundary`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_boundary <- subset(thai_boundary, select = c(Shape_Leng, Shape_Area, ADM1_EN, ADM1_PCODE, geometry))\nhead(thai_boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 628303 ymin: 1490796 xmax: 712440.5 ymax: 1636901\nProjected CRS: WGS 84 / UTM zone 47N\n  Shape_Leng Shape_Area                  ADM1_EN ADM1_PCODE\n1   2.417227 0.13133873                  Bangkok       TH10\n2   1.695100 0.07926199             Samut Prakan       TH11\n3   1.251111 0.05323766               Nonthaburi       TH12\n4   1.884945 0.12698345             Pathum Thani       TH13\n5   3.041716 0.21393797 Phra Nakhon Si Ayutthaya       TH14\n6   1.739908 0.07920961                Ang Thong       TH15\n                        geometry\n1 MULTIPOLYGON (((674339.8 15...\n2 MULTIPOLYGON (((687139.8 15...\n3 MULTIPOLYGON (((644817.9 15...\n4 MULTIPOLYGON (((704086 1575...\n5 MULTIPOLYGON (((662941.6 16...\n6 MULTIPOLYGON (((643472.8 16...\n```\n\n\n:::\n:::\n\n\n### 5.2 Fixing Missing Values\n\nThere are no troublesome rows in the `drug_cases` dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(thai_boundary))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n#thai_boundary[!complete.cases(st_drop_geometry(thai_boundary)), ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(drug_cases))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n#### 5.2.1 Identify Missing Values\n\nWe can observe ***192*** reported offences that do not include the **ADM1_PCODE** as seen from how some rows contain empty values 'NA'. We are also getting the **192 empty** `geometry` values as returned from the null test below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases %>%\n  filter(is.na(ADM1_PCODE)) %>%\n  select(province_en, ADM1_PCODE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 192 features and 2 fields (with 192 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 192 × 3\n   province_en ADM1_PCODE           geometry\n   <chr>       <chr>      <MULTIPOLYGON [m]>\n 1 Loburi      <NA>                    EMPTY\n 2 buogkan     <NA>                    EMPTY\n 3 Loburi      <NA>                    EMPTY\n 4 buogkan     <NA>                    EMPTY\n 5 Loburi      <NA>                    EMPTY\n 6 buogkan     <NA>                    EMPTY\n 7 Loburi      <NA>                    EMPTY\n 8 buogkan     <NA>                    EMPTY\n 9 Loburi      <NA>                    EMPTY\n10 buogkan     <NA>                    EMPTY\n# ℹ 182 more rows\n```\n\n\n:::\n:::\n\n\nThe root cause of this problem lies in how these two province names were incorrectly spelled in the **province_en** column of `drug_casses` , causing an incomplete `left_join()` to be executed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(drug_cases[!complete.cases(st_drop_geometry(drug_cases)), ][c('province_en')])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 2 features and 1 field (with 2 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2 × 2\n  province_en           geometry\n  <chr>       <MULTIPOLYGON [m]>\n1 Loburi                   EMPTY\n2 buogkan                  EMPTY\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_boundary %>%\n  filter(ADM1_EN == \"Lop Buri\" | ADM1_EN == \"Bueng Kan\") %>%\n  select(ADM1_PCODE, ADM1_EN) %>%\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  ADM1_PCODE ADM1_EN                                                    geometry\n  <chr>      <chr>                                            <MULTIPOLYGON [m]>\n1 TH16       Lop Buri  (((751293.3 1742960, 751337.4 1742928, 751437.2 1742942,…\n2 TH38       Bueng Kan (((965496 2045531, 965625.5 2045528, 965836.6 2045537, 9…\n```\n\n\n:::\n:::\n\n\n#### 5.2.2 Fix Missing Values Discovered\n\nLet's fix these NA values by transforming the two province names to their correct names.\n\n-   **Step 1**: Replace Loburi –\\> Lop Buri, buogkan –\\> Bueng Kan\n-   **Step 2:** Replace 'NA' `ADM1_PCDOE` with the correct province code - TH16 and TH38 for Lop Buri and Bueng Kan respectively\n-   **Step 3:** Replace the existing geometry column in `drug_cases` with the right geometry\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the geometry for Lop Buri\nlop_buri_geometry <- drug_cases %>%\n  filter(province_en == \"Lop Buri\") %>%\n  reframe(first_geometry = st_union(geometry)) %>%  \n  pull(first_geometry)\n\n# Extract the geometry for Bueng Kan\nbueng_kan_geometry <- drug_cases %>%\n  filter(province_en == \"Bueng Kan\") %>%\n  reframe(first_geometry = st_union(geometry)) %>%\n  pull(first_geometry)\n\n# Fix incorrect province names\ndrug_cases <- drug_cases %>%\n  mutate(\n    province_en = case_when(\n      province_en == \"Loburi\" ~ \"Lop Buri\",\n      province_en == \"buogkan\" ~ \"Bueng Kan\",\n      TRUE ~ province_en  \n    )\n  )\n\n# Fix empty province code\ndrug_cases <- drug_cases %>%\n  mutate(ADM1_PCODE = ifelse(province_en == \"Lop Buri\" & \n                             is.na(ADM1_PCODE),\"TH16\", \n                      ifelse(province_en == \"Bueng Kan\" & \n                             is.na(ADM1_PCODE),\"TH38\", ADM1_PCODE)))\n\n# Fix empty geometry\nthai_boundary_no_geom <- thai_boundary %>%\n  select(ADM1_EN, geometry)\ndrug_cases <- drug_cases %>%\n  st_drop_geometry() %>%\n  left_join(thai_boundary_no_geom, by = c(\"province_en\" = \"ADM1_EN\")) \ndrug_cases <- st_as_sf(drug_cases)\n```\n:::\n\n\nWe have successfully removed all NA values found in `drug_cases`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(drug_cases))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the updated drug_cases\ndrug_cases[!complete.cases(st_drop_geometry(drug_cases)), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 0 features and 5 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 0 × 6\n# ℹ 6 variables: fiscal_year <dbl>, types_of_drug_offenses <chr>,\n#   no_cases <dbl>, province_en <chr>, ADM1_PCODE <chr>,\n#   geometry <GEOMETRY [m]>\n```\n\n\n:::\n:::\n\n\n### 5.3 Create New `total_cases` Column\n\nNext, I create a new dataframe `drug_cases_province` to count the total number of cases per province.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases_province <- drug_cases %>%\n  group_by(province_en) %>%\n  summarise(\n    total_cases = sum(no_cases), \n    ADM1_PCODE = first(ADM1_PCODE),              \n    geometry = first(geometry), \n    .groups = \"drop\"                           \n  ) %>%\n  st_as_sf()\n\nprint(drug_cases_province)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 4\n   province_en   total_cases ADM1_PCODE                                 geometry\n   <chr>               <dbl> <chr>                            <MULTIPOLYGON [m]>\n 1 Amnat Charoen       35435 TH37       (((1137720 1809629, 1137724 1809622, 11…\n 2 Ang Thong           16168 TH15       (((643472.8 1636469, 643496 1636423, 64…\n 3 Bangkok            286480 TH10       (((674339.8 1543300, 674382.3 1543278, …\n 4 Bueng Kan           35287 TH38       (((965496 2045531, 965625.5 2045528, 96…\n 5 Buri Ram            57352 TH31       (((921217 1750212, 921217 1750211, 9212…\n 6 Chachoengsao        53514 TH24       (((722656.1 1546054, 722796 1546041, 72…\n 7 Chai Nat            15310 TH18       (((620165.4 1704256, 620291.4 1704247, …\n 8 Chaiyaphum          64497 TH36       (((772997.4 1851276, 773104.5 1851216, …\n 9 Chanthaburi         31473 TH22       (((853764.8 1360716, 853783.1 1360713, …\n10 Chiang Mai         121812 TH50       (((554883.3 2226795, 555000.6 2226791, …\n# ℹ 67 more rows\n```\n\n\n:::\n:::\n\n\nI will also create a new `drug_cases_province_year` to aggregate the total number of cases for each province and based on each year, regardless of drug offense type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cases_province_year <- drug_cases %>%\n  group_by(province_en, fiscal_year) %>%\n  summarise(\n    fiscal_year = first(fiscal_year),\n    total_cases = sum(no_cases), \n    ADM1_PCODE = first(ADM1_PCODE),              \n    geometry = first(geometry), \n    .groups = \"drop\"                           \n  ) %>%\n  st_as_sf()\n\nprint(drug_cases_province_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 462 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 462 × 5\n   province_en   fiscal_year total_cases ADM1_PCODE                     geometry\n   <chr>               <dbl>       <dbl> <chr>                <MULTIPOLYGON [m]>\n 1 Amnat Charoen        2017        5076 TH37       (((1137720 1809629, 1137724…\n 2 Amnat Charoen        2018        5651 TH37       (((1137720 1809629, 1137724…\n 3 Amnat Charoen        2019        7339 TH37       (((1137720 1809629, 1137724…\n 4 Amnat Charoen        2020        3949 TH37       (((1137720 1809629, 1137724…\n 5 Amnat Charoen        2021        8961 TH37       (((1137720 1809629, 1137724…\n 6 Amnat Charoen        2022        4459 TH37       (((1137720 1809629, 1137724…\n 7 Ang Thong            2017        1614 TH15       (((643472.8 1636469, 643496…\n 8 Ang Thong            2018        2717 TH15       (((643472.8 1636469, 643496…\n 9 Ang Thong            2019        2781 TH15       (((643472.8 1636469, 643496…\n10 Ang Thong            2020        2636 TH15       (((643472.8 1636469, 643496…\n# ℹ 452 more rows\n```\n\n\n:::\n:::\n\n\n## 6. Exploratory Geospatial Data Analysis\n\n### 6.1 Overall Histogram of Drug Cases\n\nI employed the `geom_histogram` function of the `ggplot` package to plot histogram distributions of the spread of the number of drug cases found in Thailand from 2017 to 2022.\n\nOverall, the number of cases appears to be relatively right-skewed with some outliers indicating a significantly high number of drug cases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(drug_cases, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Histogram of Total Drug Cases in Thailand (2017-2022)\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\")\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### 6.2 Histogram of Drug Cases by Year\n\nBased on each year category, we see that there is a similar pattern of drug cases skewed towards the lower end with an uneven distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(dplyr)\n\n# Create histogram for each year\ndrug_cases_2017 <- filter(drug_cases, fiscal_year == 2017)\nhist_2017 <- ggplot(drug_cases_2017, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2017\") +\n  theme_minimal(base_size = 9) \n\ndrug_cases_2018 <- filter(drug_cases, fiscal_year == 2018)\nhist_2018 <- ggplot(drug_cases_2018, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2018\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2019 <- filter(drug_cases, fiscal_year == 2019)\nhist_2019 <- ggplot(drug_cases_2019, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2019\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2020 <- filter(drug_cases, fiscal_year == 2020)\nhist_2020 <- ggplot(drug_cases_2020, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2020\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2021 <- filter(drug_cases, fiscal_year == 2021)\nhist_2021 <- ggplot(drug_cases_2021, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2021\") +\n  theme_minimal(base_size = 9)\n\ndrug_cases_2022 <- filter(drug_cases, fiscal_year == 2022)\nhist_2022 <- ggplot(drug_cases_2022, aes(x = no_cases)) + \n  geom_histogram(bins = 20, color = \"white\", fill = \"skyblue3\") + \n  labs(x = \"Number of Cases\", y = \"Count\", title = \"Drug Cases in 2022\") +\n  theme_minimal(base_size = 9)\n\n# Arrange all histograms in a grid layout\ngrid.arrange(hist_2017, hist_2018, hist_2019, hist_2020, hist_2021, hist_2022, nrow = 2)\n```\n:::\n\n\n![](images/clipboard-1227396748.png)\n\n### 6.3 Overall Plot of Drug Cases\n\nAs such, an ***quantile*** interval will be more suitable in plotting the total number of cases for each province as shown in the tmap output below. Additionally, we can use the default break of **5** to capture a suitable level of granularity across all provinces. For comparison purposes, I will also plot the ***equal*** scale as shown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First plot using quantile interval\nplot_quantile <- tm_shape(drug_cases_province) +\n  tm_polygons(\"total_cases\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          n = 5,\n          title = \"Number of Drug Cases\") +\n  tm_layout(main.title = \"Distribution of Drug Cases in Thailand \\n by Province (Quantile Interval)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", size = 2, position = c(\"right\", \"top\")) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n# Second plot using equal interval\nplot_equal <- tm_shape(drug_cases_province) +\n  tm_polygons(\"total_cases\", \n          style = \"equal\", \n          palette = \"Blues\",\n          n = 5,\n          title = \"Number of Drug Cases\") +\n  tm_layout(main.title = \"Distribution of Drug Cases in Thailand \\n by Province (Equal Interval)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", size = 2, position = c(\"right\", \"top\")) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n# Combine both plots side by side\ntmap_arrange(plot_quantile, plot_equal, nrow = 1)\n```\n:::\n\n\n![](images/clipboard-234682238.png)\n\n::: {.callout-tip title=\"Observations\"}\nOverall, we can observe that the highest number of drug cases are found in the **north-western, central, eastern and southern** provinces of Thailand as seen in the darker regions. Namely..\n\n-   North-west: Chiang Mai, Chiang Rai\n-   Central: Chaiyaphum, Khon Kaen and Nakhon-Ratchasima\n-   East: Sisaket, Ubon-Ratchathani\n-   South: Surat Thani, Nakhon Si Thammarat, Phuket\n\nIt is worth noting that smaller provinces are likely to be lighter in shade due to their smaller geographic area.\n:::\n\n### 6.4 Plot of Drug Cases by Year\n\nWhen we further categorise the drug cases by year, we can see that there is an even spread of cases\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_quantile_year <- tm_shape(drug_cases_province_year) +\n  tm_polygons(\"total_cases\", \n          style = \"quantile\", \n          palette = \"Blues\") +\n  tm_facets(by=\"fiscal_year\", free.coords = FALSE) +\n  tm_layout(main.title = \"Distribution of Drug Cases in Thailand \\n by Province for Each Year (Quantile Interval)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) \n\nplot_quantile_year\n```\n:::\n\n\n![](images/clipboard-1946072980.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(tmap)\nlibrary(knitr)\n\n# Create temporal maps\ntemporal_maps <- tm_shape(drug_cases_province_year) +  \n  tm_polygons(\"total_cases\",  \n              palette = \"Blues\",  \n              style = \"quantile\", \n              title = \"Drug Cases\") + \n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_layout(legend.title.size = 1.8,\n            legend.text.size = 1.5) +\n  tm_facets(along = \"fiscal_year\", free.coords = FALSE)\n\n# Generate animation\ntmap_animation(temporal_maps, filename = \"thailand_drugs_temporal.gif\", \n               delay = 150, width = 1000, height = 1200)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCreating frames\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n===========================\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=============\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=============\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n==============\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=============\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCreating animation\nAnimation saved to C:\\SamanthaxFoo\\IS415-GAA\\Take-home_Ex\\Take-home_Ex2\\thailand_drugs_temporal.gif \n```\n\n\n:::\n\n```{.r .cell-code}\n# Include the generated GIF\nknitr::include_graphics(\"thailand_drugs_temporal.gif\")\n```\n\n::: {.cell-output-display}\n![](thailand_drugs_temporal.gif)\n:::\n:::\n\n\n## 7. Global Measures of Spatial Autocorrelation\n\n### 7.1 Methods Used\n\nThis section delves into analysing the spatial autocorrelation of our drug cases dataset and assessing how the presence of drug abuse in a province may influence and form clusters around it.\n\n![](images/clipboard-3777711026.png){fig-align=\"center\" width=\"418\"}\n\n![](images/clipboard-550850738.png){fig-align=\"center\"}\n\n\\<INSERT THE THREE TYPES OF METHODS\\>\n\n### 7.2 Computing Contiguity Neighbours\n\nI decided to use the Queen criterion in deriving our **neighbour list object**. To do so, we will utilise the `st_contiguity()` function from the `sfdep` package to create contiguity weight matrices for the study area. This function generates a list of neighbors based on provinces that **share** **contiguous boundaries.** It is worth noting that the function only supports the rook and queen criteria which is suitable for our analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_nb_q <- st_contiguity(drug_cases_province, queen=TRUE)\nsummary(thailand_nb_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\nEach number returned above is an ID assigned to each province from the `st_contiguity()` function. Let's find out the specific provinces highlighted by the summary above!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince_ids <- data.frame(\n  region_id = seq_along(drug_cases_province$province_en),\n  province_en = drug_cases_province$province_en\n)\n\nprovince_ids[province_ids$region_id %in% c(17, 48, 69, 71), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   region_id province_en\n17        17   Khon Kaen\n48        48      Phuket\n69        69         Tak\n71        71        Trat\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\n-   I can observe a total of 77 provinces (regions) in the dataset with **352 neighbouring links** between the provinces\n-   There is **roughly 5.94% non-zero neighbour relationships**. This indicates only a small proportion of total possible connections have neighbours.\n-   On average, we can also observe that **each province** has **4.57 neighbouring regions.**\n-   **Region** **48** (Phuket province) has **no neighbouring regions**\n-   **Region 71** (Trat province) is one of the **least connected provinces** with only 1 neighbouring region\n-   **Regions 17** (Khon Kaen province) and **69** (Tak province) are the two provinces with the **most neighbours**, each sharing boundaries with 9 other provinces\n:::\n\n### 7.3 **Computing Row-Standardised Weight Matrix**\n\nNext, I attempt to calculate spatial weights but the **isolated region (48)** is causing issues as spatial weights calculations require all regions to have neighbors.\n\nTo resolve the issue caused by the isolated region, I will use the `allow_zero = TRUE` option when calculating spatial weights, which will allow the analysis to proceed despite isolated regions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_wt <- st_weights(thailand_nb_q, style = \"W\", allow_zero = TRUE)\n```\n:::\n\n\nWe will mutate the newly created neighbour list object `thailand_nb_1` and weight matrix `thailand_wt` into our existing `drug_cases_province`. This results in a newly created object called `wm_1`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- drug_cases_province %>%\n  mutate(nb = thailand_nb_q,\n         wt = thailand_wt,\n         .before = 1) \n\n# Inspect\nwm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 77 × 6\n   nb        wt     province_en total_cases ADM1_PCODE                  geometry\n * <nb>      <list> <chr>             <dbl> <chr>             <MULTIPOLYGON [m]>\n 1 <int [3]> <dbl>  Amnat Char…       35435 TH37       (((1137720 1809629, 1137…\n 2 <int [4]> <dbl>  Ang Thong         16168 TH15       (((643472.8 1636469, 643…\n 3 <int [6]> <dbl>  Bangkok          286480 TH10       (((674339.8 1543300, 674…\n 4 <int [3]> <dbl>  Bueng Kan         35287 TH38       (((965496 2045531, 96562…\n 5 <int [5]> <dbl>  Buri Ram          57352 TH31       (((921217 1750212, 92121…\n 6 <int [8]> <dbl>  Chachoengs…       53514 TH24       (((722656.1 1546054, 722…\n 7 <int [4]> <dbl>  Chai Nat          15310 TH18       (((620165.4 1704256, 620…\n 8 <int [4]> <dbl>  Chaiyaphum        64497 TH36       (((772997.4 1851276, 773…\n 9 <int [5]> <dbl>  Chanthaburi       31473 TH22       (((853764.8 1360716, 853…\n10 <int [5]> <dbl>  Chiang Mai       121812 TH50       (((554883.3 2226795, 555…\n# ℹ 67 more rows\n```\n\n\n:::\n:::\n\n\n",
    "supporting": [
      "Take-home_Ex2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}