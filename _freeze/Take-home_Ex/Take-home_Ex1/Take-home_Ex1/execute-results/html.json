{
  "hash": "0113b3e3e7b45ae16f4dbb698062cdff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 1\"\nsubtitle: \"Harnessing Geospatial Analytics to Uncover Armed Conflict Patterns in Myanmar\"\nauthor: \"Foo Jia Yi Samantha\"\ndate-modified: 09/06/2024\ndate: 09/06/2024\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## **1. Overview**\n\n### 1.1 Background of Myanmar's Long-Standing Conflicts\n\n![](images/GPA%20Tracker%20(33).png){width=\"1000\"}\n\nThe conflict in Myanmar is **not just a result of the coup** but is deeply rooted in the country's decades-old complex ethnic and political landscape, characterised by **tensions between the central government and various ethnic minority groups**, each with its own armed forces. The post-coup violence has exacerbated these **long-standing conflicts,** leading to a severe humanitarian crisis, with thousands killed, hundreds of thousands displaced, and widespread human rights abuses reported.\n\n### 1.2 Objectives of Take-home Exercise 1\n\nAs such, Geospatial analytics has become a valuable tool for evaluating and comprehending the intricacies of increasing conflicts. This exercise aims to reveal the spatial and spatio-temporal distribution of armed conflict in Myanmar by leveraging spatial point pattern analysis. Additionally, it aims to gain clearer insights into the geographical and logistical patterns of violence throughout the nation.\n\nBy the end of this take-home exercise, I aim to complete these steps in my spatial point pattern analysis in uncovering the distribution of armed conflict in Myanmar.\n\n-   Using appropriate function of **sf** and **tidyverse** packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\n-   Using the geospatial data sets prepared, derive **quarterly KDE layers.**\n-   Using the geospatial data sets prepared, perform **2nd-Order Spatial Point Patterns Analysis.**\n-   Using the geospatial data sets prepared, derive **quarterly spatio-temporal KDE layers.**\n-   Using the geospatial data sets prepared, perform **2nd-Order Spatio-temporal Point Patterns Analysis.**\n-   Using appropriate **tmap** functions, display the KDE and Spatio-temporal KDE layers on **openstreetmap** of Myanmar.\n-   Describe the **spatial patterns revealed** by the KDE and Spatio-temporal KDE maps.\n\n### 1.3 About the Datasets\n\n#### 1) **Armed Conflict Data (From ACLED)**\n\nThis Armed Conflict Location & Event Data (ACLED) is an independent, impartial, international non-profit organisation which owns an extensive database of violent conflict and protest in countries and territories around the world.\n\n![](images/clipboard-1772056683.png)\n\nFor the purpose of this exercise, I have downloaded ACLED's data on Myanmar which includes a series of conflict events, particularly between 1 January 2021 to 30 June 2024.\n\n**üîó Source:** [ACLED](https://acleddata.com/)\n\n**üìÅ Format:** comma separated values (CSV)\n\nAs the dataset is rather extensive, I will be performing my analysis on armed conflict events in a **quarterly basis** to streamline my tasks. The data included in this dataset are as follows:\n\n**Event Type**\n\nACLED categorises events into various types. I will mainly be focusing on these four event types: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Event Type**                                                                                                                                                                                                                                    |\n|                                                                                                                                                                                                                                                   |\n| ACLED categorises events into various types. I will mainly be focusing on these four event types: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.                                                     |\n|                                                                                                                                                                                                                                                   |\n| -   **event_id_cnty:** unique ID for each conflict                                                                                                                                                                                                |\n| -   **event_type:** category of event e.g.¬†Battle, Violence Against Civilians, Protests, Explosions/Remote Violence, Strategic Developments                                                                                                       |\n| -   **sub_event_type:** a more detailed classification within event type                                                                                                                                                                          |\n| -   **disorder_type:** classifies the event based on the nature of the disorder e.g.¬†political violence, demonstrations, strategic developments[\\[A1\\]](https://is415-samanthafoo.netlify.app/take-home_ex/take-home_ex1/take-home_ex1#_msocom_1) |\n| -   **civilian_targeting:** yes/no value, whether event involves specifically targeting civilians                                                                                                                                                 |\n| -   Note: when ‚Äústrategic developments‚Äù are used in Event Type, it is also used in the disorder type (vice-versa)                                                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Location and Geospatial Data**                                                                                                                                                                                                                  |\n|                                                                                                                                                                                                                                                   |\n| The database provides detailed geographic information, pinpointing the exact or approximate locations of conflict events across Myanmar. This includes cities, towns, and rural areas.                                                            |\n|                                                                                                                                                                                                                                                   |\n| -   **iso:** the country code for Myanmar which uses 104 in this case                                                                                                                                                                             |\n| -   **region:** region of conflict within Myanmar                                                                                                                                                                                                 |\n| -   **country:** indicates Myanmar                                                                                                                                                                                                                |\n| -   **admin1, admin2, admin3:** 1st, 2nd and 3rd level administration division within Myanmar e.g.¬†states, division, sub-division                                                                                                                 |\n| -   **location:** specific geographic location or name of the place where the conflict event occurred                                                                                                                                             |\n| -   **latitude:** latitude of the conflict event                                                                                                                                                                                                  |\n| -   **longitude:** longitude of the conflict event                                                                                                                                                                                                |\n| -   **geo_precision:** indicates the level of precision for the geographic coordinates provided                                                                                                                                                   |\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Date and Time**                                                                                                                                                                                                                                 |\n|                                                                                                                                                                                                                                                   |\n| ACLED records the specific dates and, where possible, times of conflict events.                                                                                                                                                                   |\n|                                                                                                                                                                                                                                                   |\n| -   **event_date:** date of conflict                                                                                                                                                                                                              |\n| -   **year:** year of conflict                                                                                                                                                                                                                    |\n| -   **time_precision:** accuracy of the date and time information provided                                                                                                                                                                        |\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Actors**                                                                                                                                                                                                                                        |\n|                                                                                                                                                                                                                                                   |\n| -   Indicate the actors involved in the conflict, such as the Tatmadaw (Myanmar‚Äôs military), ethnic armed organizations, local militias, civilian protestors, and other groups.                                                                   |\n| -   **actor1:** primary actor involved in the conflict event. E.g. a government force, rebel group, militia, or any organised entity                                                                                                              |\n| -   **assoc_actor_1:** a secondary group that is aligned with or supports the primary actor (Actor1) in the event                                                                                                                                 |\n| -   **inter1:** an interaction code that categorises actor1, could be a government force, rebel group, military force, rioter, civilian, or other entities                                                                                        |\n| -   **interaction:**¬†combined description of actor1 and actor2                                                                                                                                                                                    |\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Fatalities**                                                                                                                                                                                                                                    |\n|                                                                                                                                                                                                                                                   |\n| -   **fatalities:**¬†tracks the number of reported fatalities associated with each conflict event                                                                                                                                                  |\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Others**                                                                                                                                                                                                                                        |\n|                                                                                                                                                                                                                                                   |\n| -   **source:** source of information for the conflict event                                                                                                                                                                                      |\n| -   **source_scale:** scale of the source e.g.¬†local, national, international                                                                                                                                                                     |\n| -   **notes :** additional comments                                                                                                                                                                                                               |\n| -   **tags:** keywords associated with the conflict event                                                                                                                                                                                         |\n| -   **timestamp:** date and time when conflict event was entered/updated in the database                                                                                                                                                          |\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n#### **2) Geospatial Data** (**From Myanmar Information Management Unit)**\n\nI will also be using a geospatial dataset from the Myanmar Information Management Unit (MIMU) in shapefile (.shp) format, specifically of the Myanmar state at the 2^nd^ administrative level with district boundaries.\n\n**üîó Source:** [MIMU](https://geonode.themimu.info/layers/geonode%3Ammr_polbnda_adm2_250k_mimu)\n\n**üìÅ Format:** shapefile (.shp)\n\nMy reasoning for choosing the **district boundary** dataset is that we do not want to select a boundary dataset that is too broad when analysing conflict events since it **might not provide sufficient insights to trends** where conflict events happen. Neither do we want to analyse a geography that is too divided (e.g. Admin 3) since it can be **computationally inefficient** as seen in the types of boundary data below.\n\n|               Admin 0                |               Admin 1               |               Admin 1                |           Admin 2 - To Use           |               Admin 3               |\n|:------------------------------------:|:-----------------------------------:|:------------------------------------:|:------------------------------------:|:-----------------------------------:|\n|          National boundary           |           Myanmar region            |        Region and sub-region         |          District boundary           |          Myanmar township           |\n| ![](images/clipboard-4062665913.png) | ![](images/clipboard-799910136.png) | ![](images/clipboard-3525847239.png) | ![](images/clipboard-1135072014.png) | ![](images/clipboard-204520723.png) |\n\nI have donwloaded the two data sets and organised them into my folder as follows.\n\n![](images/clipboard-4213243167.png){width=\"793\"}\n\n## **2. Let‚Äôs Set Up!**\n\n### **2.1 Importing Libraries into R**\n\nTo carry out this exercise, I will be using the following R packages:\n\n-   **sf**: a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\n-   **spatstat**: has a wide range of useful functions for point pattern analysis. In this take-home exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\n-   **raster**: reads, writes, manipulates, analyses and model of gridded spatial data (i.e.¬†raster). In this take-home exercise, it will be used to convert image output generate by spatstat into raster format.\n-   **maptools**: provides a set of tools for manipulating geographic data. We mainly use it to convert Spatial objects into ppp format of spatstat.\n-   **tmap**: provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nNow, let‚Äôs install and load these packages in RStudio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n```\n:::\n\n\n### **2.2 Importing Data Sets into R**\n\n#### 1) Armed Conflicts Data\n\nNext, I will import the downloaded armed conflict data. For aspatial datasets like this*,* we will import into Rstudio using `read_csv()` function of the **readr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import armed conflict data\nconflict_data <- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 87746 Columns: 28\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (18): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (10): year, time_precision, inter1, interaction, iso, latitude, longitud...\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nThe `2021-01-01-2024-06-30-Myanmar.csv` dataset contains 87746 rows and 28 columns which indicates the presence of 87746 unique armed conflict events in Myanmar.\n:::\n\nAfter importing the dataset, we can inspect the dataset using the **`glimpse()`** function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect the conflict data\nglimpse(conflict_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 87,746\nColumns: 28\n$ event_id_cnty      <chr> \"MMR64313\", \"MMR64313\", \"MMR64320\", \"MMR64320\", \"MM‚Ä¶\n$ event_date         <chr> \"30 June 2024\", \"30 June 2024\", \"30 June 2024\", \"30‚Ä¶\n$ year               <dbl> 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 202‚Ä¶\n$ time_precision     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶\n$ disorder_type      <chr> \"Political violence\", \"Political violence\", \"Politi‚Ä¶\n$ event_type         <chr> \"Battles\", \"Battles\", \"Battles\", \"Battles\", \"Battle‚Ä¶\n$ sub_event_type     <chr> \"Armed clash\", \"Armed clash\", \"Armed clash\", \"Armed‚Ä¶\n$ actor1             <chr> \"People's Defense Force - Mandalay\", \"Military Forc‚Ä¶\n$ assoc_actor_1      <chr> \"MDA - AGF: Madaya - The Authentic Genes Force; SST‚Ä¶\n$ inter1             <dbl> 3, 1, 3, 1, 3, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 2, 1, ‚Ä¶\n$ interaction        <dbl> 13, 13, 13, 13, 13, 13, 10, 13, 13, 10, 12, 12, 12,‚Ä¶\n$ civilian_targeting <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ iso                <dbl> 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1‚Ä¶\n$ region             <chr> \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia‚Ä¶\n$ country            <chr> \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma‚Ä¶\n$ admin1             <chr> \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Ma‚Ä¶\n$ admin2             <chr> \"Mandalay\", \"Mandalay\", \"Pyinoolwin\", \"Pyinoolwin\",‚Ä¶\n$ admin3             <chr> \"Patheingyi\", \"Patheingyi\", \"Singu\", \"Singu\", \"Thab‚Ä¶\n$ location           <chr> \"Aung Tha Pyay\", \"Aung Tha Pyay\", \"Pin Lel Gyi\", \"P‚Ä¶\n$ latitude           <dbl> 22.1504, 22.1504, 22.5752, 22.5752, 22.8800, 22.880‚Ä¶\n$ longitude          <dbl> 96.2364, 96.2364, 96.0661, 96.0661, 95.9700, 95.970‚Ä¶\n$ geo_precision      <dbl> 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, ‚Ä¶\n$ source             <chr> \"Democratic Voice of Burma; Irrawaddy\", \"Democratic‚Ä¶\n$ source_scale       <chr> \"National\", \"National\", \"National\", \"National\", \"Na‚Ä¶\n$ notes              <chr> \"On 30 June 2024, near Aung Tha Pyay village (Pathe‚Ä¶\n$ fatalities         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, ‚Ä¶\n$ tags               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ timestamp          <dbl> 1720552468, 1720552468, 1720552468, 1720552468, 172‚Ä¶\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nThe event_date field shows that it uses a character datatype instead of date - we will fix this later. Also, we can observe that the**`longitude`** and **`langitude`** fields appear to be adopting the **WGS84 geographic** coordinate system since they are in the -180/180 and -90/90 range respectively.\n:::\n\n#### 2) Myanmar Boundary Data\n\n::: {.callout-tip title=\"Observations\"}\nWhen working with Myanmar's boundary, we need to assign the appropriate coordinate reference system. However, since Myanmar is split into **two UTM** - West Myanmar (crs: 32646) and East Myanmar (crs: 32647).\n:::\n\nHence, I will also import the administrative boundary data into a simple features tibble data.frame using¬†[*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html)¬†of the **sf** package and **check the number of rows returned for both CRS 32646 and 32647**. This function reads the shapefile data and returns an¬†**`sf`**¬†object that can be used for further analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Find out conflicts count by CRS\"}\nconflict_crs <- st_as_sf(conflict_data, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Count number of conflicts for CRS 32646\nconflict_data_32646 <- st_transform(conflict_crs, crs = 32646)\ncount_32646 <- nrow(conflict_data_32646)\n# Count number of conflicts for CRS 32647\nconflict_data_32647 <- st_transform(conflict_crs, crs = 32647)\ncount_32647 <- nrow(conflict_data_32647)\n\ncrs_counts <- data.frame(\n  CRS = c(\"EPSG: 32646\", \"EPSG: 32647\"),\n  Conflicts_Count = c(count_32646, count_32647)\n)\n\nprint(crs_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          CRS Conflicts_Count\n1 EPSG: 32646           87746\n2 EPSG: 32647           87746\n```\n\n\n:::\n:::\n\n\nSince there is no difference in the count, I will decide to focus on **UTM zone 47N (EPSG:32647),** east of Myanmar, for the purpose of this exercise**.** The **`st_transform()`** function below converts the CRS of the **`sf`** object to EPSG:32647.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import boundary data\nboundary_sf <- st_read(dsn = \"data/geospatial\",layer = \"mmr_polbnda_adm2_250k_mimu\") %>% st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Take-home_Ex\\Take-home_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nIn the code below, we can notice that the ESPG code has been updated to **32647**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for changes\nst_crs(boundary_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96¬∞E and 102¬∞E, northern hemisphere between equator and 84¬∞N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nHere, I will use the¬†**`plot()`**¬†function which plots the geometry of the¬†**`sf`**¬†object. The¬†**`st_geometry()`**¬†function is used to extract the geometry of the¬†**`mpsz_sf`**¬†object which includes the districts of Myanmar as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(0,0,0,0))\nplot(st_geometry(boundary_sf))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## 3. Data Wrangling\n\n### 3.1 Fixing Incorrect Datatypes\n\nRecall that the earlier inspection of the `conflict_data` tibble data frame revealed that the datatype indicated for event date is wrongly labelled as a character instead of a date format.\n\nAs such, let's convert the datatype to the correct 'date' format as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the datatype for event_date\nconflict_data$event_date <- as.Date(conflict_data$event_date, format = \"%d %B %Y\")\n\n# Check for changes\nhead(conflict_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 28\n  event_id_cnty event_date  year time_precision disorder_type      event_type\n  <chr>         <date>     <dbl>          <dbl> <chr>              <chr>     \n1 MMR64313      2024-06-30  2024              1 Political violence Battles   \n2 MMR64313      2024-06-30  2024              1 Political violence Battles   \n3 MMR64320      2024-06-30  2024              1 Political violence Battles   \n4 MMR64320      2024-06-30  2024              1 Political violence Battles   \n5 MMR64321      2024-06-30  2024              1 Political violence Battles   \n6 MMR64321      2024-06-30  2024              1 Political violence Battles   \n# ‚Ñπ 22 more variables: sub_event_type <chr>, actor1 <chr>, assoc_actor_1 <chr>,\n#   inter1 <dbl>, interaction <dbl>, civilian_targeting <chr>, iso <dbl>,\n#   region <chr>, country <chr>, admin1 <chr>, admin2 <chr>, admin3 <chr>,\n#   location <chr>, latitude <dbl>, longitude <dbl>, geo_precision <dbl>,\n#   source <chr>, source_scale <chr>, notes <chr>, fatalities <dbl>,\n#   tags <chr>, timestamp <dbl>\n```\n\n\n:::\n:::\n\n\n### 3.2 Adding new year_quarter column\n\nWe will want to create a new column to indicate the specific year and quarter for each conflict event since the spatial analysis will be done later in a quarterly manner.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Extract year and quarter\"}\nconflict_data$year_quarter <- paste0(\n  year(conflict_data$event_date), \n  \" Q\", \n  quarter(conflict_data$event_date)\n)\n\n# View the new data column\nunique(conflict_data$year_quarter)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2024 Q2\" \"2024 Q1\" \"2023 Q4\" \"2023 Q3\" \"2023 Q2\" \"2023 Q1\" \"2022 Q4\"\n [8] \"2022 Q3\" \"2022 Q2\" \"2022 Q1\" \"2021 Q4\" \"2021 Q3\" \"2021 Q2\" \"2021 Q1\"\n```\n\n\n:::\n:::\n\n\n### 3.3 Fixing Duplicated Event ID in *conflict_data* Dataframe\n\nAs shown, there are presence of duplicates in our dataframe returned by the **`duplicated()`** function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplicates\nany(duplicated(conflict_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nBased on the duplicated **event ID: MMR64313** for instance. We can observe the two records are of the **same** political violence event happening between **two** **actors** on 30/6/2024, between the People's Defense Force and Military Forces of Myanmar. Upon further research, these two actors are **opposing political parties** of Myanmar's ongoing conflict.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect an instance of the duplciated event IDs\nhead(conflict_data,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 29\n  event_id_cnty event_date  year time_precision disorder_type      event_type\n  <chr>         <date>     <dbl>          <dbl> <chr>              <chr>     \n1 MMR64313      2024-06-30  2024              1 Political violence Battles   \n2 MMR64313      2024-06-30  2024              1 Political violence Battles   \n# ‚Ñπ 23 more variables: sub_event_type <chr>, actor1 <chr>, assoc_actor_1 <chr>,\n#   inter1 <dbl>, interaction <dbl>, civilian_targeting <chr>, iso <dbl>,\n#   region <chr>, country <chr>, admin1 <chr>, admin2 <chr>, admin3 <chr>,\n#   location <chr>, latitude <dbl>, longitude <dbl>, geo_precision <dbl>,\n#   source <chr>, source_scale <chr>, notes <chr>, fatalities <dbl>,\n#   tags <chr>, timestamp <dbl>, year_quarter <chr>\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Reflection\"}\n**Should duplicated data be removed in this analysis?**\n\nA **single event** (e.g. MMR64313) can have duplicated rows **with different actor1 values**, typically due to counterattacks from opposing sides, leading to different data entries into the **`conflict_data`** dataset.\n\nHence, I will **remove duplicated events** found in the **`conflict_data`** dataframe as long as the rows have the same event ID indicated.\n:::\n\nHere, I did another check to ensure there is **not more than 2 possible repeated event IDs** in the first 20 rows of **conflict_data**.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Check duplicated events for first 20 rows\"}\nduplicate_counts_first_20 <- conflict_data %>%\n  slice(1:20) %>%            \n  group_by(event_id_cnty) %>% \n  summarize(count = n()) %>%  \n  filter(count > 1)         \n\n# View the result\nprint(duplicate_counts_first_20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 √ó 2\n  event_id_cnty count\n  <chr>         <int>\n1 MMR64313          2\n2 MMR64320          2\n3 MMR64321          2\n4 MMR64323          2\n5 MMR64325          2\n6 MMR64326          2\n7 MMR64328          2\n8 MMR64330          2\n9 MMR64331          2\n```\n\n\n:::\n:::\n\n\nWith that checked, I'll remove the duplicated rows with a repeated Event ID.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Remove duplicated rows\"}\n# Retrieve data of duplicated rows\nmerged_duplicates <- conflict_data %>%\n  filter(duplicated(event_id_cnty) | duplicated(event_id_cnty, fromLast = TRUE)) %>%\n  arrange(event_id_cnty) %>%\n  group_by(event_id_cnty) %>%\n  summarize(\n    actor2 = last(actor1),\n    assoc_actor_2 = last(assoc_actor_1)\n  )\n\nconflict_data_no_duplicates <- conflict_data %>%\n  filter(!duplicated(event_id_cnty))\n\n# Update conflict_data dataframe with new columns\nconflict_data <- conflict_data_no_duplicates %>%\n  left_join(merged_duplicates, by = \"event_id_cnty\")\n\n# View dataframe\nprint(head(conflict_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 31\n  event_id_cnty event_date  year time_precision disorder_type         event_type\n  <chr>         <date>     <dbl>          <dbl> <chr>                 <chr>     \n1 MMR64313      2024-06-30  2024              1 Political violence    Battles   \n2 MMR64320      2024-06-30  2024              1 Political violence    Battles   \n3 MMR64321      2024-06-30  2024              1 Political violence    Battles   \n4 MMR64322      2024-06-30  2024              1 Strategic developmen‚Ä¶ Strategic‚Ä¶\n5 MMR64323      2024-06-30  2024              1 Political violence    Battles   \n6 MMR64324      2024-06-30  2024              1 Strategic developmen‚Ä¶ Strategic‚Ä¶\n# ‚Ñπ 25 more variables: sub_event_type <chr>, actor1 <chr>, assoc_actor_1 <chr>,\n#   inter1 <dbl>, interaction <dbl>, civilian_targeting <chr>, iso <dbl>,\n#   region <chr>, country <chr>, admin1 <chr>, admin2 <chr>, admin3 <chr>,\n#   location <chr>, latitude <dbl>, longitude <dbl>, geo_precision <dbl>,\n#   source <chr>, source_scale <chr>, notes <chr>, fatalities <dbl>,\n#   tags <chr>, timestamp <dbl>, year_quarter <chr>, actor2 <chr>,\n#   assoc_actor_2 <chr>\n```\n\n\n:::\n:::\n\n\nWe can observe that there are no longer any duplicated event IDs in our **`conflict_data`** data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(conflict_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n### 3.4 Converting Aspatial Data to Simple Feature Format\n\nFor the purpose of this exercise, we will want to integrate and analyse aspatial data in a geographic context. I'll do a check if **`conflict_data`** needs to be converted to a **sf data frame** - if it outputs anything else but `sf`, then it‚Äôs not a simple feature data frame!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(conflict_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nWe can see that **`conflict_data`** is **not** a sf data frame. Since a non-simple feature data frame does not have a ‚Äúgeometry‚Äù column, we‚Äôll need to convert **`conflict_data`** into a **simple feature** data frame\n:::\n\nWe can convert **`conflict_data`** into a **simple feature** data frame by using¬†**`st_as_sf()`**¬†from the¬†**sf**¬†package. Addiitionally, we will also need to transform coordinate system from geographic **(ESPG: 4326)** to projected **(ESPG: 32647)** using **`st_transform()`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to simple feature format\nconflict_data_sf <- st_as_sf(conflict_data, coords = c(\"longitude\", \"latitude\"), crs=4326) %>% st_transform(crs = 32647)\n\n# Inspect the changes\nglimpse(conflict_data_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 51,553\nColumns: 30\n$ event_id_cnty      <chr> \"MMR64313\", \"MMR64320\", \"MMR64321\", \"MMR64322\", \"MM‚Ä¶\n$ event_date         <date> 2024-06-30, 2024-06-30, 2024-06-30, 2024-06-30, 20‚Ä¶\n$ year               <dbl> 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 202‚Ä¶\n$ time_precision     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶\n$ disorder_type      <chr> \"Political violence\", \"Political violence\", \"Politi‚Ä¶\n$ event_type         <chr> \"Battles\", \"Battles\", \"Battles\", \"Strategic develop‚Ä¶\n$ sub_event_type     <chr> \"Armed clash\", \"Armed clash\", \"Armed clash\", \"Chang‚Ä¶\n$ actor1             <chr> \"People's Defense Force - Mandalay\", \"People's Defe‚Ä¶\n$ assoc_actor_1      <chr> \"MDA - AGF: Madaya - The Authentic Genes Force; SST‚Ä¶\n$ inter1             <dbl> 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 3, 3, 3, 7, 1, ‚Ä¶\n$ interaction        <dbl> 13, 13, 13, 10, 13, 10, 12, 12, 12, 12, 12, 13, 13,‚Ä¶\n$ civilian_targeting <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ iso                <dbl> 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1‚Ä¶\n$ region             <chr> \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia‚Ä¶\n$ country            <chr> \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma‚Ä¶\n$ admin1             <chr> \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Sagaing\", \"Sag‚Ä¶\n$ admin2             <chr> \"Mandalay\", \"Pyinoolwin\", \"Pyinoolwin\", \"Shwebo\", \"‚Ä¶\n$ admin3             <chr> \"Patheingyi\", \"Singu\", \"Thabeikkyin\", \"Khin-U\", \"My‚Ä¶\n$ location           <chr> \"Aung Tha Pyay\", \"Pin Lel Gyi\", \"Thabeikkyin\", \"Khi‚Ä¶\n$ geo_precision      <dbl> 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, ‚Ä¶\n$ source             <chr> \"Democratic Voice of Burma; Irrawaddy\", \"Irrawaddy\"‚Ä¶\n$ source_scale       <chr> \"National\", \"National\", \"National\", \"Subnational-Na‚Ä¶\n$ notes              <chr> \"On 30 June 2024, near Aung Tha Pyay village (Pathe‚Ä¶\n$ fatalities         <dbl> 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ tags               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n$ timestamp          <dbl> 1720552468, 1720552468, 1720552468, 1720552468, 172‚Ä¶\n$ year_quarter       <chr> \"2024 Q2\", \"2024 Q2\", \"2024 Q2\", \"2024 Q2\", \"2024 Q‚Ä¶\n$ actor2             <chr> \"Military Forces of Myanmar (2021-)\", \"Military For‚Ä¶\n$ assoc_actor_2      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Uniden‚Ä¶\n$ geometry           <POINT [m]> POINT (214961 2452068), POINT (198303.2 24994‚Ä¶\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nNotice that a new column called¬†`geometry`¬†has been added into the data frame. On the other hand, the¬†`longitude`¬†and¬†`latitude`¬†columns have been removed from the data frame.\n:::\n\nWe can further inspect the newly created 'geometry' column of **`conflict_data_sf`**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve geometry column\nst_geometry(conflict_data_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 51553 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT (214961 2452068)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT (198303.2 2499463)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT (189105.4 2533434)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT (160913.9 2522331)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT (146213 2428487)\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nIt consists of **51,533 features** consisting of **point** **geometric features** where the underlying datum is in WGS 84 format.\n:::\n\nTo ensure that the coordinate system is correctly updated, we can use the **`st_crs()`** function where we observe that the ESPG code is correctly indicated as **32647**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check CRS format\nst_crs(conflict_data_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96¬∞E and 102¬∞E, northern hemisphere between equator and 84¬∞N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n### 3.5 Reduce Data File Size\n\nIn this section, I will reduce the current Myanmar armed conflict dataset as the time taken for computing the kernel density estimates can take up to 30 minutes long which is not computationally efficient.\n\n#### **1) Remove 'Protests' and 'Riots' Event Types**\n\nI will remove rows in the **`conflicts_data_sf`** dataset that don't focus on the four main event types (Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians), as mentioned in the exercise brief.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconflict_data_sf <- conflict_data_sf %>%\n  filter(!(event_type %in% c(\"Protests\", \"Riots\")))\n\nunique(conflict_data_sf$event_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Battles\"                    \"Strategic developments\"    \n[3] \"Violence against civilians\" \"Explosions/Remote violence\"\n```\n\n\n:::\n:::\n\n\n#### **2) Remove unused columns in boundary_sf**\n\nAs seen, there are **8 columns** in the simple feature data frame of **`boundary_sf`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect first rows of data in boundary_sf\nhead(boundary_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -14915.04 ymin: 1736124 xmax: 187961.7 ymax: 2051144\nProjected CRS: WGS 84 / UTM zone 47N\n  OBJECTID         ST ST_PCODE        DT   DT_PCODE      DT_MMR PCode_V\n1        1 Ayeyarwady   MMR017  Hinthada MMR017D002    ·Äü·ÄÑ·Ä∫·Äπ·Äû·Ä¨·Äê·ÄÅ·Äõ·Ä≠·ÄØ·ÄÑ·Ä∫     9.4\n2        2 Ayeyarwady   MMR017   Labutta MMR017D004    ·Äú·Äï·ÄΩ·Äê·Äπ·Äê·Ä¨·ÄÅ·Äõ·Ä≠·ÄØ·ÄÑ·Ä∫     9.4\n3        3 Ayeyarwady   MMR017    Maubin MMR017D005     ·Äô·Ä°·Ä∞·Äï·ÄÑ·Ä∫·ÄÅ·Äõ·Ä≠·ÄØ·ÄÑ·Ä∫     9.4\n4        4 Ayeyarwady   MMR017 Myaungmya MMR017D003 ·Äô·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äô·Äº·ÄÅ·Äõ·Ä≠·ÄØ·ÄÑ·Ä∫     9.4\n5        5 Ayeyarwady   MMR017   Pathein MMR017D001      ·Äï·ÄØ·Äû·Ä≠·Äô·Ä∫·ÄÅ·Äõ·Ä≠·ÄØ·ÄÑ·Ä∫     9.4\n6        6 Ayeyarwady   MMR017    Pyapon MMR017D006     ·Äñ·Äª·Ä¨·Äï·ÄØ·Ä∂·ÄÅ·Äõ·Ä≠·ÄØ·ÄÑ·Ä∫     9.4\n                        geometry\n1 MULTIPOLYGON (((90859.89 20...\n2 MULTIPOLYGON (((75991.51 17...\n3 MULTIPOLYGON (((115559 1928...\n4 MULTIPOLYGON (((39919.39 18...\n5 MULTIPOLYGON (((-6302.348 1...\n6 MULTIPOLYGON (((93411.72 17...\n```\n\n\n:::\n:::\n\n\nI will remove **'DT_MMR\"** column as we already have the District Name in English in **`DT`** and won't require the district names in Myanmar Language. Next, we will remove the coded versions of **ST (state/region)** and **DT (district)** columns, namely **`ST_PCODE`** and **`DT_PCODE`**. Additionally, we won't need the **`PCode_V`** column since we will be dropping the PCODE column too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary_sf <- boundary_sf %>% dplyr::select('OBJECTID', 'ST', 'DT','geometry')\nsummary(boundary_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    OBJECTID          ST                 DT                     geometry \n Min.   : 1.00   Length:80          Length:80          MULTIPOLYGON :80  \n 1st Qu.:20.75   Class :character   Class :character   epsg:32647   : 0  \n Median :40.50   Mode  :character   Mode  :character   +proj=utm ...: 0  \n Mean   :40.50                                                           \n 3rd Qu.:60.25                                                           \n Max.   :80.00                                                           \n```\n\n\n:::\n:::\n\n\n#### **3) Remove unused columns in conflict_data**\n\nI will also remove unnecessary columns of the **`conflict_data`** data frame that won't be used in our spatial analysis later.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Remove unnecessary columns\"}\nconflict_data_sf <- conflict_data_sf %>%\n  select(event_id_cnty, event_date, year_quarter, disorder_type, event_type, location, geometry, fatalities)\n\nsummary(conflict_data_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n event_id_cnty        event_date         year_quarter       disorder_type     \n Length:42608       Min.   :2021-01-01   Length:42608       Length:42608      \n Class :character   1st Qu.:2022-01-10   Class :character   Class :character  \n Mode  :character   Median :2022-10-13   Mode  :character   Mode  :character  \n                    Mean   :2022-10-29                                        \n                    3rd Qu.:2023-08-29                                        \n                    Max.   :2024-06-30                                        \n  event_type          location                  geometry       fatalities    \n Length:42608       Length:42608       POINT        :42608   Min.   :  0.00  \n Class :character   Class :character   epsg:32647   :    0   1st Qu.:  0.00  \n Mode  :character   Mode  :character   +proj=utm ...:    0   Median :  0.00  \n                                                             Mean   :  1.27  \n                                                             3rd Qu.:  1.00  \n                                                             Max.   :201.00  \n```\n\n\n:::\n:::\n\n\nLet's append **`conflict_data_sf`** with the columns of **`boundary_sf`** to assist our analysis later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Link conflict event to its district region\nconflict_data_sf <- st_join(conflict_data_sf, boundary_sf, join = st_intersects)\n```\n:::\n\n\n### 3.6 Converting Simple Features Data Frame into ppp Object\n\nIt is important that we convert **`conflict_data_sf`** (a simple feature data frame) into a **planer point pattern (ppp)** object format, since the **`spatstat`** package that we'll be using for the Spatial Point Pattern Analysis later is specifically designed for working with **ppp-formated** data. Additionally, I will begin with **categorising the ppp objects** into their **unique `year_quarter`** **category**.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Create ppp objects based on year_quarter category\"}\n# Create an empty list to store the ppp objects\nppp_list <- list()\n\n# Loop through each unique year_quarter category\nfor (yq in unique(conflict_data_sf$year_quarter)) {\n  # Subset the data for the current year_quarter\n  subset_data_sf <- conflict_data_sf %>% filter(year_quarter == yq)\n  \n  # Convert the subset to a ppp object\n  subset_ppp <- as.ppp(subset_data_sf$geometry)\n  \n  # Add the ppp object to the list\n  ppp_list[[yq]] <- subset_ppp\n}\n\n# Check list\nppp_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`2024 Q2`\nPlanar point pattern: 2788 points\nwindow: rectangle = [-208804.4, 597543.7] x [1103500.1, 3026504.9] units\n\n$`2024 Q1`\nPlanar point pattern: 3186 points\nwindow: rectangle = [-207135, 591875.9] x [1245380, 3026504.9] units\n\n$`2023 Q4`\nPlanar point pattern: 3627 points\nwindow: rectangle = [-206931.7, 604775.1] x [1103500.1, 3020772.2] units\n\n$`2023 Q3`\nPlanar point pattern: 3010 points\nwindow: rectangle = [-197883.4, 518300.4] x [1103500.1, 3027041.8] units\n\n$`2023 Q2`\nPlanar point pattern: 2745 points\nwindow: rectangle = [-191261.5, 518300.4] x [1103500.1, 3006372.9] units\n\n$`2023 Q1`\nPlanar point pattern: 3101 points\nwindow: rectangle = [-199243.8, 591875.9] x [1103500.1, 3026504.9] units\n\n$`2022 Q4`\nPlanar point pattern: 3296 points\nwindow: rectangle = [-206531.5, 518300.4] x [1103500.1, 2931517.1] units\n\n$`2022 Q3`\nPlanar point pattern: 3486 points\nwindow: rectangle = [-206196.6, 568361.5] x [1103500.1, 3026504.9] units\n\n$`2022 Q2`\nPlanar point pattern: 3580 points\nwindow: rectangle = [-206931.7, 640934.5] x [1103500.1, 3026504.9] units\n\n$`2022 Q1`\nPlanar point pattern: 3563 points\nwindow: rectangle = [-204784, 591875.9] x [1103500.1, 3026504.9] units\n\n$`2021 Q4`\nPlanar point pattern: 3844 points\nwindow: rectangle = [-200024.3, 591875.9] x [1103500.1, 3042960.3] units\n\n$`2021 Q3`\nPlanar point pattern: 2754 points\nwindow: rectangle = [-193181.1, 591875.9] x [1103500.1, 3042960.3] units\n\n$`2021 Q2`\nPlanar point pattern: 2916 points\nwindow: rectangle = [-191409.1, 640934.5] x [1132472.1, 3042960.3] units\n\n$`2021 Q1`\nPlanar point pattern: 712 points\nwindow: rectangle = [-203795.3, 591875.9] x [1375186.1, 3026504.9] units\n```\n\n\n:::\n:::\n\n\nWe can visualise the spread of conflict events across each quarter from January 2021 to June 2024 using the **`plot()`** function as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Visualise the spread of conflicts by year_quarter\"}\n# Ensure 'year_quarter' is a factor\nconflict_data_sf$year_quarter <- as.factor(conflict_data_sf$year_quarter)\n\n# Loop through each unique year_quarter and create separate plots\nyear_quarters <- unique(conflict_data_sf$year_quarter)\n\n# Set up a grid layout for multiple plots (adjust 'mfrow' as needed)\npar(mfrow = c(2,3))\npar(mar = c(0,0,1,0))\n\n# Loop through each year_quarter and plot\nfor (yq in year_quarters) {\n  subset_data_sf <- conflict_data_sf[conflict_data_sf$year_quarter == yq, ]\n  conflict_data_ppp <- as.ppp(subset_data_sf$geometry)\n  \n  # Plot each subset ppp object\n  plot(conflict_data_ppp, main = paste(\"Year-Quarter:\", yq))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-25-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-25-3.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nIt is noticeable that there **conflict events have occured more frequently** since 2021 as points plotted on the graph have gotten darker across 2021 to 2024. We can also observe the **possibility of duplicated events** occurring from the darker spots in the plot, in which it appears more intense in Myanmar's central and west regions.\n:::\n\n### 3.7 Creating *owin* object\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area, that is Myanmar's boundary in this case. In **`spatstat`**, an object called **`owin`** is specially designed to represent this **polygonal region**.\n\nThe code chunk below is used to convert the **`boundary_data_sf`** simple feature data frame into an **`owin`** object of **`spatstat`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to owin object\nmyanmar_owin <- as.owin(boundary_sf)\n\n# Visualise the owin object\nplot(myanmar_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nFrom my observations, the **`as.owin()`** function converts the **`boundary_data_sf`** spatial boundary into a window object that represents the outer boundary of the spatial region and does not handle internal structures or districts we previously saw from the plot of **`boundary_data_sf`**`.`\n:::\n\nWe can also take a quick look at the **`owin`** object properties as shown. I will be converting it to a data frame for the purposes of getting a quick glimpse of the object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summary info of owin object\nowin_df <- as.data.frame(myanmar_owin)\nprint(head(owin_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         x       y id sign\n1 56519.39 2741919  1   -1\n2 56917.28 2741947  1   -1\n3 57000.15 2741973  1   -1\n4 57068.51 2741994  1   -1\n5 57221.44 2742142  1   -1\n6 57068.51 2741994  1   -1\n```\n\n\n:::\n:::\n\n\n### **3.8 Combining ppp Object and owin Object**\n\nIn this last step of geospatial data wrangling, I will **mask all ppp object with the owin object** I created earlier to put in place all conflict events within the boundary of Myanmar. Doing so can also optimise the memory usage for large datasets.\n\n::: panel-tabset\n**Combine ppp and owin object**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialize an empty list to store masked ppp objects\nmasked_ppp_list <- list()\n\n# Iterate over each ppp object in the list\nfor (quarter in names(ppp_list)) {\n  ppp_obj <- ppp_list[[quarter]]\n  # Mask the ppp object with the owin object\n  masked_ppp <- ppp_obj[myanmar_owin]\n  # Store the masked ppp object in the new list\n  masked_ppp_list[[quarter]] <- masked_ppp\n}\n```\n:::\n\n\n**Check results of (E.g. 2024 Q2)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect 2024 Q2 masked ppp object\nsummary(masked_ppp_list$`2024 Q2`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPlanar point pattern:  2788 points\nAverage intensity 4.162974e-09 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nWindow: polygonal boundary\n1077 separate polygons (510 holes)\n                    vertices         area relative.area\npolygon 1 (hole)           9 -4.40154e-02     -6.57e-14\npolygon 2 (hole)           3 -4.82818e-02     -7.21e-14\npolygon 3 (hole)           3 -2.78345e-03     -4.16e-15\npolygon 4 (hole)           3 -4.99414e-03     -7.46e-15\npolygon 5 (hole)           3 -6.70916e-04     -1.00e-15\npolygon 6 (hole)           3 -4.99759e-03     -7.46e-15\npolygon 7 (hole)           6 -3.24429e-03     -4.84e-15\npolygon 8 (hole)          11 -5.35508e-02     -8.00e-14\npolygon 9 (hole)           3 -3.06875e-03     -4.58e-15\npolygon 10 (hole)          3 -7.63674e-03     -1.14e-14\npolygon 11 (hole)          3 -8.61831e-05     -1.29e-16\npolygon 12 (hole)          3 -2.44103e-02     -3.64e-14\npolygon 13 (hole)          3 -4.88140e-05     -7.29e-17\npolygon 14 (hole)          4 -1.74466e-04     -2.61e-16\npolygon 15 (hole)          4 -2.30891e-05     -3.45e-17\npolygon 16 (hole)          4 -6.25343e-08     -9.34e-20\npolygon 17 (hole)          4 -3.68040e-02     -5.50e-14\npolygon 18 (hole)          3 -1.27227e-06     -1.90e-18\npolygon 19 (hole)          4 -1.25504e-03     -1.87e-15\npolygon 20 (hole)          3 -1.56980e-02     -2.34e-14\npolygon 21 (hole)          4 -1.13609e-06     -1.70e-18\npolygon 22 (hole)          4 -8.02867e-02     -1.20e-13\npolygon 23 (hole)          4 -3.98058e-05     -5.94e-17\npolygon 24 (hole)          4 -2.89739e-02     -4.33e-14\npolygon 25 (hole)          5 -7.39370e-02     -1.10e-13\npolygon 26 (hole)          6 -1.08246e-01     -1.62e-13\npolygon 27 (hole)         13 -3.27066e-01     -4.88e-13\npolygon 28 (hole)          3 -3.55050e-03     -5.30e-15\npolygon 29 (hole)          3 -2.84064e-02     -4.24e-14\npolygon 30 (hole)          3 -8.07641e-04     -1.21e-15\npolygon 31 (hole)          4 -5.20949e-03     -7.78e-15\npolygon 32 (hole)          4 -3.21397e-04     -4.80e-16\npolygon 33 (hole)          4 -2.54957e-05     -3.81e-17\npolygon 34 (hole)          3 -4.29634e-04     -6.42e-16\npolygon 35 (hole)          6 -6.02382e-04     -8.99e-16\npolygon 36 (hole)          4 -4.91851e-04     -7.34e-16\npolygon 37                26  2.85778e+06      4.27e-06\npolygon 38 (hole)          3 -6.81164e-07     -1.02e-18\npolygon 39 (hole)          4 -3.07951e-07     -4.60e-19\npolygon 40 (hole)          6 -3.55081e-06     -5.30e-18\npolygon 41 (hole)          7 -5.43205e-06     -8.11e-18\npolygon 42 (hole)          4 -3.63127e-06     -5.42e-18\npolygon 43 (hole)          3 -2.05109e-08     -3.06e-20\npolygon 44 (hole)          3 -2.85606e-06     -4.26e-18\npolygon 45 (hole)          4 -1.18245e-06     -1.77e-18\npolygon 46 (hole)         17 -6.10429e-07     -9.11e-19\npolygon 47 (hole)         20 -1.53031e-05     -2.29e-17\npolygon 48 (hole)          3 -1.45824e-08     -2.18e-20\npolygon 49                 3  0.00000e+00      0.00e+00\npolygon 50 (hole)          4 -2.46195e-06     -3.68e-18\npolygon 51 (hole)          4 -2.96501e-07     -4.43e-19\npolygon 52 (hole)          3 -1.38411e-10     -2.07e-22\npolygon 53 (hole)          3 -3.75034e-07     -5.60e-19\npolygon 54 (hole)         13 -3.24152e-06     -4.84e-18\npolygon 55 (hole)          7 -3.78991e-06     -5.66e-18\npolygon 56 (hole)          4 -6.04718e-07     -9.03e-19\npolygon 57 (hole)          6 -5.93663e-06     -8.86e-18\npolygon 58 (hole)          4 -4.12114e-07     -6.15e-19\npolygon 59 (hole)         12 -7.18332e-06     -1.07e-17\npolygon 60 (hole)          4 -1.93975e-08     -2.90e-20\npolygon 61 (hole)          4 -6.17467e-06     -9.22e-18\npolygon 62 (hole)          4 -2.09557e-07     -3.13e-19\npolygon 63 (hole)          4 -2.21723e-06     -3.31e-18\npolygon 64 (hole)          3 -4.42968e-09     -6.61e-21\npolygon 65 (hole)          5 -6.37155e-07     -9.51e-19\npolygon 66 (hole)          4 -9.89059e-10     -1.48e-21\npolygon 67 (hole)          4 -3.13888e-07     -4.69e-19\npolygon 68 (hole)         17 -1.19222e-05     -1.78e-17\npolygon 69 (hole)          3 -1.33356e-07     -1.99e-19\npolygon 70 (hole)          4 -1.83791e-07     -2.74e-19\npolygon 71 (hole)          8 -3.87272e-06     -5.78e-18\npolygon 72 (hole)          4 -7.16314e-07     -1.07e-18\npolygon 73 (hole)          5 -3.36832e-06     -5.03e-18\npolygon 74                 3  0.00000e+00      0.00e+00\npolygon 75 (hole)          8 -2.57590e-06     -3.85e-18\npolygon 76 (hole)          4 -1.33552e-06     -1.99e-18\npolygon 77 (hole)         13 -1.47187e-05     -2.20e-17\npolygon 78 (hole)          3 -3.06322e-08     -4.57e-20\npolygon 79 (hole)         18 -1.77679e-06     -2.65e-18\npolygon 80 (hole)         28 -1.68354e-05     -2.51e-17\npolygon 81 (hole)          4 -4.45494e-07     -6.65e-19\npolygon 82 (hole)          3 -9.34421e-09     -1.40e-20\npolygon 83 (hole)          4 -1.41707e-06     -2.12e-18\npolygon 84 (hole)          4 -6.53761e-08     -9.76e-20\npolygon 85 (hole)         19 -1.90011e-05     -2.84e-17\npolygon 86 (hole)          4 -1.54308e-07     -2.30e-19\npolygon 87 (hole)          3 -3.77368e-08     -5.63e-20\npolygon 88 (hole)          4 -4.25983e-07     -6.36e-19\npolygon 89 (hole)          4 -4.95083e-07     -7.39e-19\npolygon 90 (hole)         12 -9.30557e-06     -1.39e-17\npolygon 91 (hole)          3 -8.86667e-07     -1.32e-18\npolygon 92 (hole)         12 -8.53008e-06     -1.27e-17\npolygon 93 (hole)          3 -3.66755e-08     -5.48e-20\npolygon 94 (hole)          3 -1.41477e-06     -2.11e-18\npolygon 95 (hole)          4 -7.84561e-07     -1.17e-18\npolygon 96 (hole)          5 -4.22144e-07     -6.30e-19\npolygon 97 (hole)         10 -5.88893e-06     -8.79e-18\npolygon 98 (hole)          3 -3.62874e-09     -5.42e-21\npolygon 99 (hole)         11 -6.90020e-06     -1.03e-17\npolygon 100 (hole)         3 -1.89816e-07     -2.83e-19\npolygon 101 (hole)         3 -3.16910e-09     -4.73e-21\npolygon 102 (hole)         3 -4.46313e-11     -6.66e-23\npolygon 103 (hole)         4 -1.91393e-10     -2.86e-22\npolygon 104 (hole)         3 -5.89181e-11     -8.80e-23\npolygon 105 (hole)         6 -1.10636e-06     -1.65e-18\npolygon 106 (hole)         5 -1.67657e-07     -2.50e-19\npolygon 107 (hole)         4 -6.16825e-07     -9.21e-19\npolygon 108 (hole)         3 -4.27072e-08     -6.38e-20\npolygon 109 (hole)         7 -4.08747e-06     -6.10e-18\npolygon 110 (hole)         7 -3.01043e-06     -4.50e-18\npolygon 111 (hole)         4 -8.10353e-07     -1.21e-18\npolygon 112 (hole)         8 -1.67883e-06     -2.51e-18\npolygon 113 (hole)         3 -5.59874e-07     -8.36e-19\npolygon 114 (hole)         3 -9.12038e-09     -1.36e-20\npolygon 115 (hole)         3 -2.36378e-08     -3.53e-20\npolygon 116 (hole)         9 -1.26780e-06     -1.89e-18\npolygon 117 (hole)         4 -8.59087e-07     -1.28e-18\npolygon 118 (hole)         6 -4.84636e-06     -7.24e-18\npolygon 119 (hole)         6 -4.43426e-06     -6.62e-18\npolygon 120 (hole)         6 -1.20121e-06     -1.79e-18\npolygon 121 (hole)        18 -5.27266e-06     -7.87e-18\npolygon 122                3  0.00000e+00      0.00e+00\npolygon 123 (hole)        10 -3.29169e-06     -4.92e-18\npolygon 124 (hole)         4 -8.51749e-09     -1.27e-20\npolygon 125 (hole)         8 -5.92493e-06     -8.85e-18\npolygon 126 (hole)         4 -2.91207e-09     -4.35e-21\npolygon 127 (hole)         3 -2.28096e-07     -3.41e-19\npolygon 128 (hole)        16 -1.60925e-05     -2.40e-17\npolygon 129 (hole)        10 -4.90022e-06     -7.32e-18\npolygon 130 (hole)         4 -1.48376e-07     -2.22e-19\npolygon 131 (hole)         4 -2.03880e-06     -3.04e-18\npolygon 132 (hole)         4 -3.89614e-07     -5.82e-19\npolygon 133 (hole)         4 -2.17445e-06     -3.25e-18\npolygon 134 (hole)         4 -2.61948e-11     -3.91e-23\npolygon 135 (hole)         3 -8.35404e-08     -1.25e-19\npolygon 136 (hole)         4 -5.15289e-07     -7.69e-19\npolygon 137 (hole)         4 -1.10636e-06     -1.65e-18\npolygon 138 (hole)         4 -3.64554e-08     -5.44e-20\npolygon 139 (hole)         6 -1.43627e-06     -2.14e-18\npolygon 140 (hole)         4 -2.01434e-08     -3.01e-20\npolygon 141 (hole)         4 -7.27925e-07     -1.09e-18\npolygon 142 (hole)         3 -7.98403e-10     -1.19e-21\npolygon 143 (hole)         3 -1.02779e-09     -1.53e-21\npolygon 144 (hole)         3 -9.29060e-10     -1.39e-21\npolygon 145 (hole)         4 -2.49801e-08     -3.73e-20\npolygon 146 (hole)         5 -8.55458e-07     -1.28e-18\npolygon 147 (hole)         4 -3.03075e-07     -4.53e-19\npolygon 148 (hole)         4 -7.98422e-07     -1.19e-18\npolygon 149 (hole)         6 -4.42224e-07     -6.60e-19\npolygon 150 (hole)        16 -1.01618e-05     -1.52e-17\npolygon 151 (hole)         3 -6.65795e-12     -9.94e-24\npolygon 152 (hole)         6 -2.86436e-06     -4.28e-18\npolygon 153 (hole)         3 -2.53888e-09     -3.79e-21\npolygon 154 (hole)         8 -1.95774e-06     -2.92e-18\npolygon 155 (hole)         3 -2.44254e-07     -3.65e-19\npolygon 156 (hole)         3 -3.98298e-08     -5.95e-20\npolygon 157 (hole)         6 -1.09122e-06     -1.63e-18\npolygon 158 (hole)         3 -1.26010e-07     -1.88e-19\npolygon 159 (hole)         5 -2.95571e-07     -4.41e-19\npolygon 160 (hole)        12 -4.89387e-06     -7.31e-18\npolygon 161 (hole)         4 -7.44484e-08     -1.11e-19\npolygon 162 (hole)         3 -1.29527e-06     -1.93e-18\npolygon 163 (hole)         4 -1.89229e-07     -2.83e-19\npolygon 164 (hole)        11 -1.82644e-06     -2.73e-18\npolygon 165 (hole)         3 -5.61908e-09     -8.39e-21\npolygon 166 (hole)         3 -4.61241e-07     -6.89e-19\npolygon 167 (hole)         4 -4.99926e-07     -7.46e-19\npolygon 168 (hole)        13 -1.01273e-05     -1.51e-17\npolygon 169 (hole)         3 -7.51563e-07     -1.12e-18\npolygon 170 (hole)         4 -3.62315e-07     -5.41e-19\npolygon 171                3  9.35049e-13      1.40e-24\npolygon 172 (hole)         8 -1.73835e-06     -2.60e-18\npolygon 173 (hole)         3 -9.28418e-08     -1.39e-19\npolygon 174               43  7.32477e+06      1.09e-05\npolygon 175 (hole)         3 -6.10885e-08     -9.12e-20\npolygon 176 (hole)        19 -1.26639e-05     -1.89e-17\npolygon 177 (hole)         3 -7.60391e-09     -1.14e-20\npolygon 178 (hole)         9 -4.32760e-06     -6.46e-18\npolygon 179 (hole)         4 -8.26535e-09     -1.23e-20\npolygon 180 (hole)         6 -8.41940e-06     -1.26e-17\npolygon 181 (hole)        30 -5.76785e-06     -8.61e-18\npolygon 182 (hole)        12 -5.43629e-06     -8.12e-18\npolygon 183 (hole)        16 -1.91385e-05     -2.86e-17\npolygon 184 (hole)        15 -2.09775e-05     -3.13e-17\npolygon 185 (hole)        52 -3.03955e-05     -4.54e-17\npolygon 186              103  1.86991e+07      2.79e-05\npolygon 187 (hole)        10 -7.36911e-06     -1.10e-17\npolygon 188 (hole)         6 -2.02037e-06     -3.02e-18\npolygon 189 (hole)         7 -1.03571e-06     -1.55e-18\npolygon 190 (hole)         3 -1.08626e-13     -1.62e-25\npolygon 191 (hole)         3 -5.70725e-07     -8.52e-19\npolygon 192 (hole)        10 -2.38281e-06     -3.56e-18\npolygon 193 (hole)         3 -1.90389e-10     -2.84e-22\npolygon 194 (hole)         4 -1.77684e-06     -2.65e-18\npolygon 195 (hole)         3 -1.37607e-10     -2.05e-22\npolygon 196 (hole)         4 -5.30670e-07     -7.92e-19\npolygon 197               37  9.32316e+06      1.39e-05\npolygon 198 (hole)         4 -2.18670e-07     -3.27e-19\npolygon 199 (hole)         4 -6.43286e-07     -9.61e-19\npolygon 200 (hole)         4 -5.24884e-07     -7.84e-19\npolygon 201 (hole)         4 -4.70512e-07     -7.03e-19\npolygon 202 (hole)         3 -2.04803e-07     -3.06e-19\npolygon 203 (hole)         6 -1.35194e-06     -2.02e-18\npolygon 204 (hole)         4 -1.88886e-07     -2.82e-19\npolygon 205 (hole)         4 -3.53978e-07     -5.29e-19\npolygon 206 (hole)         4 -8.51990e-07     -1.27e-18\npolygon 207 (hole)         4 -1.08022e-06     -1.61e-18\npolygon 208 (hole)         3 -6.06549e-11     -9.06e-23\npolygon 209 (hole)         7 -5.94505e-06     -8.88e-18\npolygon 210 (hole)         6 -2.25168e-06     -3.36e-18\npolygon 211 (hole)         4 -1.51186e-06     -2.26e-18\npolygon 212 (hole)         3 -2.61351e-08     -3.90e-20\npolygon 213 (hole)         6 -8.62877e-06     -1.29e-17\npolygon 214              371  2.43869e+08      3.64e-04\npolygon 215 (hole)         4 -8.19764e-07     -1.22e-18\npolygon 216              297  2.84905e+08      4.25e-04\npolygon 217 (hole)         4 -3.40347e-07     -5.08e-19\npolygon 218 (hole)         6 -1.40062e-06     -2.09e-18\npolygon 219 (hole)         4 -1.31007e-07     -1.96e-19\npolygon 220 (hole)         4 -9.82127e-07     -1.47e-18\npolygon 221 (hole)         8 -1.40206e-05     -2.09e-17\npolygon 222 (hole)         3 -3.36167e-08     -5.02e-20\npolygon 223 (hole)         4 -9.79669e-07     -1.46e-18\npolygon 224 (hole)         5 -1.27896e-07     -1.91e-19\npolygon 225 (hole)         4 -6.22350e-07     -9.29e-19\npolygon 226 (hole)         7 -3.02415e-06     -4.52e-18\npolygon 227 (hole)         3 -1.89804e-09     -2.83e-21\npolygon 228 (hole)         9 -6.19516e-06     -9.25e-18\npolygon 229               33  1.68222e+07      2.51e-05\npolygon 230 (hole)         8 -1.03323e-05     -1.54e-17\npolygon 231               33  4.47665e+05      6.68e-07\npolygon 232               19  1.34593e+05      2.01e-07\npolygon 233               39  1.36327e+06      2.04e-06\npolygon 234              137  1.55547e+08      2.32e-04\npolygon 235               36  8.76479e+06      1.31e-05\npolygon 236               79  3.08116e+07      4.60e-05\npolygon 237              388  2.25271e+08      3.36e-04\npolygon 238              316  7.78512e+07      1.16e-04\npolygon 239               13  1.09564e+05      1.64e-07\npolygon 240               18  3.49727e+05      5.22e-07\npolygon 241               31  1.23017e+06      1.84e-06\npolygon 242               16  6.55537e+05      9.79e-07\npolygon 243               24  8.49487e+05      1.27e-06\npolygon 244               30  2.54436e+06      3.80e-06\npolygon 245              336  4.15806e+07      6.21e-05\npolygon 246              330  1.69190e+08      2.53e-04\npolygon 247               47  1.08035e+07      1.61e-05\npolygon 248               39  4.94369e+06      7.38e-06\npolygon 249               23  2.72438e+06      4.07e-06\npolygon 250               33  5.70263e+06      8.52e-06\npolygon 251               90  4.20329e+07      6.28e-05\npolygon 252               28  1.35341e+06      2.02e-06\npolygon 253              225  1.08816e+08      1.62e-04\npolygon 254               33  9.16670e+06      1.37e-05\npolygon 255              192  7.02655e+07      1.05e-04\npolygon 256               49  1.49245e+07      2.23e-05\npolygon 257               98  1.79076e+07      2.67e-05\npolygon 258                6  6.37552e+05      9.52e-07\npolygon 259               49  1.01233e+07      1.51e-05\npolygon 260              141  3.43053e+07      5.12e-05\npolygon 261              195  3.24345e+07      4.84e-05\npolygon 262               51  3.38313e+06      5.05e-06\npolygon 263               34  2.01400e+06      3.01e-06\npolygon 264               13  2.50435e+05      3.74e-07\npolygon 265                9  9.04824e+04      1.35e-07\npolygon 266               34  4.61794e+06      6.90e-06\npolygon 267               17  4.58200e+05      6.84e-07\npolygon 268               15  2.74776e+05      4.10e-07\npolygon 269               21  5.34978e+05      7.99e-07\npolygon 270               19  4.55347e+05      6.80e-07\npolygon 271               71  3.42557e+06      5.11e-06\npolygon 272               24  1.32420e+06      1.98e-06\npolygon 273               15  3.26247e+05      4.87e-07\npolygon 274               39  8.65790e+05      1.29e-06\npolygon 275               43  1.41627e+06      2.11e-06\npolygon 276               24  7.52068e+05      1.12e-06\npolygon 277               96  1.32101e+07      1.97e-05\npolygon 278               38  1.18003e+06      1.76e-06\npolygon 279              429  5.99087e+08      8.95e-04\npolygon 280               13  1.74105e+05      2.60e-07\npolygon 281               19  2.52336e+05      3.77e-07\npolygon 282               16  3.11495e+05      4.65e-07\npolygon 283               11  9.11047e+04      1.36e-07\npolygon 284               12  2.13470e+05      3.19e-07\npolygon 285               17  5.82663e+05      8.70e-07\npolygon 286               56  2.60440e+07      3.89e-05\npolygon 287              107  4.91389e+06      7.34e-06\npolygon 288               51  2.79076e+06      4.17e-06\npolygon 289               89  1.61156e+07      2.41e-05\npolygon 290               28  1.30499e+06      1.95e-06\npolygon 291               11  1.27616e+05      1.91e-07\npolygon 292               34  2.54199e+06      3.80e-06\npolygon 293               27  1.72476e+06      2.58e-06\npolygon 294               37  2.01882e+06      3.01e-06\npolygon 295               23  1.65571e+06      2.47e-06\npolygon 296               33  3.05816e+06      4.57e-06\npolygon 297               14  3.23153e+05      4.83e-07\npolygon 298               91  1.51209e+07      2.26e-05\npolygon 299               12  2.42901e+05      3.63e-07\npolygon 300               11  1.37889e+05      2.06e-07\npolygon 301               58  2.29751e+07      3.43e-05\npolygon 302               48  5.10265e+06      7.62e-06\npolygon 303               22  1.30706e+06      1.95e-06\npolygon 304               15  3.49480e+05      5.22e-07\npolygon 305               17  1.57570e+06      2.35e-06\npolygon 306               34  3.68725e+06      5.51e-06\npolygon 307               34  5.21904e+06      7.79e-06\npolygon 308               24  5.42734e+06      8.10e-06\npolygon 309              422  4.66497e+08      6.97e-04\npolygon 310              142  2.98767e+07      4.46e-05\npolygon 311              132  2.18707e+07      3.27e-05\npolygon 312               19  5.88230e+05      8.78e-07\npolygon 313               22  1.77611e+06      2.65e-06\npolygon 314 (hole)         4 -6.42929e-04     -9.60e-16\npolygon 315               40  4.09952e+06      6.12e-06\npolygon 316 (hole)         3 -2.52078e-03     -3.76e-15\npolygon 317 (hole)        24 -5.61620e-01     -8.39e-13\npolygon 318               28  1.47685e+06      2.21e-06\npolygon 319 (hole)         8 -8.93463e-02     -1.33e-13\npolygon 320 (hole)         8 -1.34123e-01     -2.00e-13\npolygon 321               67  9.99685e+06      1.49e-05\npolygon 322 (hole)         8 -6.36344e-02     -9.50e-14\npolygon 323 (hole)         6 -7.57977e-02     -1.13e-13\npolygon 324 (hole)         3 -4.31917e-06     -6.45e-18\npolygon 325 (hole)         4 -2.24224e-02     -3.35e-14\npolygon 326 (hole)         5 -9.35663e-02     -1.40e-13\npolygon 327 (hole)        13 -1.39251e-01     -2.08e-13\npolygon 328 (hole)         7 -1.46533e-01     -2.19e-13\npolygon 329 (hole)         6 -7.59071e-02     -1.13e-13\npolygon 330 (hole)         7 -5.15914e-03     -7.70e-15\npolygon 331 (hole)        10 -4.09465e-02     -6.11e-14\npolygon 332 (hole)        21 -1.86624e-01     -2.79e-13\npolygon 333 (hole)         3 -1.69684e-02     -2.53e-14\npolygon 334 (hole)         8 -4.08363e-02     -6.10e-14\npolygon 335 (hole)         3 -1.73631e-02     -2.59e-14\npolygon 336 (hole)         5 -1.41820e-02     -2.12e-14\npolygon 337 (hole)        10 -6.15227e-02     -9.19e-14\npolygon 338 (hole)         8 -2.90782e-02     -4.34e-14\npolygon 339 (hole)         8 -6.15579e-02     -9.19e-14\npolygon 340 (hole)         4 -7.46409e-04     -1.11e-15\npolygon 341 (hole)         4 -1.05431e-02     -1.57e-14\npolygon 342 (hole)         4 -8.25150e-03     -1.23e-14\npolygon 343 (hole)         3 -2.59990e-02     -3.88e-14\npolygon 344 (hole)         3 -9.09758e-03     -1.36e-14\npolygon 345 (hole)         3 -1.96870e-02     -2.94e-14\npolygon 346 (hole)         3 -4.01475e-05     -5.99e-17\npolygon 347 (hole)         5 -1.49420e-02     -2.23e-14\npolygon 348 (hole)         4 -9.23860e-03     -1.38e-14\npolygon 349                3  2.52016e-10      3.76e-22\npolygon 350 (hole)         7 -5.73305e-02     -8.56e-14\npolygon 351 (hole)         4 -4.26735e-02     -6.37e-14\npolygon 352 (hole)         7 -1.69748e-02     -2.53e-14\npolygon 353 (hole)         3 -1.05617e-02     -1.58e-14\npolygon 354               25  4.82266e+05      7.20e-07\npolygon 355 (hole)         6 -3.72405e-02     -5.56e-14\npolygon 356 (hole)         7 -3.08334e-02     -4.60e-14\npolygon 357 (hole)         4 -6.69856e-03     -1.00e-14\npolygon 358 (hole)         4 -1.15937e-02     -1.73e-14\npolygon 359 (hole)         4 -3.11046e-03     -4.64e-15\npolygon 360 (hole)        12 -1.45689e-01     -2.18e-13\npolygon 361 (hole)         4 -5.64800e-02     -8.43e-14\npolygon 362 (hole)         3 -1.11189e-02     -1.66e-14\npolygon 363 (hole)         4 -2.60006e-02     -3.88e-14\npolygon 364 (hole)        28 -1.79082e-01     -2.67e-13\npolygon 365 (hole)         4 -1.58212e-04     -2.36e-16\npolygon 366 (hole)         4 -9.07721e-06     -1.36e-17\npolygon 367 (hole)         4 -6.73612e-03     -1.01e-14\npolygon 368               16  4.14093e+05      6.18e-07\npolygon 369 (hole)         4 -5.36782e-03     -8.02e-15\npolygon 370 (hole)         6 -1.51450e-02     -2.26e-14\npolygon 371 (hole)         4 -4.38078e-03     -6.54e-15\npolygon 372 (hole)         4 -1.36409e-02     -2.04e-14\npolygon 373 (hole)         4 -3.84271e-02     -5.74e-14\npolygon 374 (hole)         3 -7.56650e-03     -1.13e-14\npolygon 375 (hole)         4 -8.04110e-03     -1.20e-14\npolygon 376 (hole)         6 -2.53481e-02     -3.78e-14\npolygon 377 (hole)         4 -1.15603e-02     -1.73e-14\npolygon 378 (hole)         3 -2.16578e-03     -3.23e-15\npolygon 379 (hole)         3 -2.87542e-03     -4.29e-15\npolygon 380 (hole)         4 -5.42478e-02     -8.10e-14\npolygon 381 (hole)         3 -4.75090e-03     -7.09e-15\npolygon 382 (hole)         4 -3.45047e-02     -5.15e-14\npolygon 383 (hole)         6 -7.20472e-03     -1.08e-14\npolygon 384 (hole)         4 -2.01300e-02     -3.01e-14\npolygon 385 (hole)         9 -7.99880e-02     -1.19e-13\npolygon 386 (hole)         4 -1.30938e-03     -1.96e-15\npolygon 387 (hole)         9 -1.92423e-02     -2.87e-14\npolygon 388 (hole)         3 -2.44523e-07     -3.65e-19\npolygon 389 (hole)         4 -2.73889e-02     -4.09e-14\npolygon 390 (hole)         3 -1.15109e-02     -1.72e-14\npolygon 391 (hole)         4 -8.77810e-02     -1.31e-13\npolygon 392               26  3.03928e+06      4.54e-06\npolygon 393 (hole)         6 -8.99139e-02     -1.34e-13\npolygon 394 (hole)         7 -1.69870e-01     -2.54e-13\npolygon 395 (hole)        11 -1.85737e-01     -2.77e-13\npolygon 396 (hole)        32 -8.16597e-01     -1.22e-12\npolygon 397 (hole)         7 -6.59191e-02     -9.84e-14\npolygon 398 (hole)         3 -1.48932e-02     -2.22e-14\npolygon 399 (hole)        13 -3.56626e-01     -5.33e-13\npolygon 400 (hole)         3 -1.64302e-06     -2.45e-18\npolygon 401 (hole)         3 -2.03105e-03     -3.03e-15\npolygon 402               14  1.53563e+05      2.29e-07\npolygon 403 (hole)         4 -1.79040e-02     -2.67e-14\npolygon 404 (hole)        15 -2.31620e-01     -3.46e-13\npolygon 405 (hole)         7 -3.46670e-02     -5.18e-14\npolygon 406 (hole)         6 -1.90172e-02     -2.84e-14\npolygon 407 (hole)         6 -3.15828e-02     -4.72e-14\npolygon 408 (hole)        13 -1.40633e-02     -2.10e-14\npolygon 409 (hole)         6 -2.76240e-02     -4.12e-14\npolygon 410 (hole)         3 -3.74154e-02     -5.59e-14\npolygon 411 (hole)         3 -1.16808e-02     -1.74e-14\npolygon 412 (hole)        10 -4.10705e-03     -6.13e-15\npolygon 413 (hole)         4 -6.52777e-03     -9.75e-15\npolygon 414 (hole)         6 -5.03054e-02     -7.51e-14\npolygon 415 (hole)         4 -2.54303e-03     -3.80e-15\npolygon 416 (hole)         3 -1.76691e-04     -2.64e-16\npolygon 417 (hole)         4 -7.90017e-02     -1.18e-13\npolygon 418 (hole)         3 -1.07902e-03     -1.61e-15\npolygon 419 (hole)         3 -8.74117e-04     -1.31e-15\npolygon 420 (hole)        12 -6.41926e-02     -9.59e-14\npolygon 421 (hole)         4 -4.36892e-03     -6.52e-15\npolygon 422 (hole)         4 -1.85183e-02     -2.77e-14\npolygon 423 (hole)        10 -1.21248e-01     -1.81e-13\npolygon 424 (hole)        10 -5.59537e-02     -8.35e-14\npolygon 425 (hole)         4 -2.20079e-02     -3.29e-14\npolygon 426               19  5.08538e+05      7.59e-07\npolygon 427 (hole)         4 -1.45573e-02     -2.17e-14\npolygon 428 (hole)         4 -4.47180e-03     -6.68e-15\npolygon 429               16  1.80565e+05      2.70e-07\npolygon 430 (hole)         3 -9.05154e-08     -1.35e-19\npolygon 431               26  9.75091e+05      1.46e-06\npolygon 432 (hole)         4 -1.90718e-03     -2.85e-15\npolygon 433 (hole)         5 -1.60264e-02     -2.39e-14\npolygon 434 (hole)         4 -1.82920e-02     -2.73e-14\npolygon 435 (hole)         3 -7.26183e-03     -1.08e-14\npolygon 436 (hole)         4 -2.12571e-02     -3.17e-14\npolygon 437 (hole)         4 -2.41922e-03     -3.61e-15\npolygon 438 (hole)         3 -2.80770e-02     -4.19e-14\npolygon 439 (hole)         7 -5.31797e-03     -7.94e-15\npolygon 440 (hole)        16 -1.29582e-01     -1.93e-13\npolygon 441 (hole)         4 -1.88745e-02     -2.82e-14\npolygon 442 (hole)         3 -1.45605e-02     -2.17e-14\npolygon 443 (hole)         3 -2.28810e-02     -3.42e-14\npolygon 444 (hole)         4 -1.59810e-02     -2.39e-14\npolygon 445 (hole)         5 -1.72617e-02     -2.58e-14\npolygon 446 (hole)         3 -4.96859e-03     -7.42e-15\npolygon 447 (hole)        14 -8.85136e-02     -1.32e-13\npolygon 448 (hole)         4 -1.85807e-02     -2.77e-14\npolygon 449 (hole)         4 -8.61249e-03     -1.29e-14\npolygon 450 (hole)         4 -2.06032e-02     -3.08e-14\npolygon 451 (hole)         3 -1.66645e-03     -2.49e-15\npolygon 452 (hole)         7 -1.66808e-02     -2.49e-14\npolygon 453 (hole)         4 -1.67545e-03     -2.50e-15\npolygon 454 (hole)        12 -3.97403e-02     -5.93e-14\npolygon 455 (hole)         4 -4.18178e-02     -6.24e-14\npolygon 456 (hole)         3 -2.93135e-03     -4.38e-15\npolygon 457 (hole)         4 -6.31981e-04     -9.44e-16\npolygon 458 (hole)         3 -8.54897e-07     -1.28e-18\npolygon 459 (hole)         7 -8.42407e-03     -1.26e-14\npolygon 460 (hole)         3 -1.34440e-06     -2.01e-18\npolygon 461 (hole)         6 -1.60663e-02     -2.40e-14\npolygon 462 (hole)         4 -5.66651e-05     -8.46e-17\npolygon 463 (hole)         5 -1.17874e-02     -1.76e-14\npolygon 464 (hole)         3 -1.79385e-08     -2.68e-20\npolygon 465 (hole)         5 -2.62273e-02     -3.92e-14\npolygon 466 (hole)         7 -2.12912e-02     -3.18e-14\npolygon 467 (hole)        11 -4.47347e-02     -6.68e-14\npolygon 468 (hole)         6 -5.00911e-03     -7.48e-15\npolygon 469 (hole)         5 -3.58831e-02     -5.36e-14\npolygon 470 (hole)         3 -1.06446e-03     -1.59e-15\npolygon 471 (hole)         4 -1.50038e-02     -2.24e-14\npolygon 472 (hole)         3 -8.74499e-04     -1.31e-15\npolygon 473 (hole)         7 -3.75991e-02     -5.61e-14\npolygon 474               19  2.15295e+05      3.21e-07\npolygon 475 (hole)         6 -3.71337e-02     -5.54e-14\npolygon 476 (hole)         3 -4.33900e-03     -6.48e-15\npolygon 477 (hole)         7 -8.65067e-02     -1.29e-13\npolygon 478 (hole)         8 -7.76951e-02     -1.16e-13\npolygon 479 (hole)         6 -9.01907e-02     -1.35e-13\npolygon 480 (hole)         8 -1.10404e-01     -1.65e-13\npolygon 481 (hole)         8 -7.38263e-02     -1.10e-13\npolygon 482 (hole)         3 -1.71517e-02     -2.56e-14\npolygon 483               16  3.50061e+05      5.23e-07\npolygon 484 (hole)         3 -1.54594e-08     -2.31e-20\npolygon 485 (hole)         3 -1.78834e+02     -2.67e-10\npolygon 486                3  0.00000e+00      0.00e+00\npolygon 487 (hole)         4 -4.21570e-02     -6.29e-14\npolygon 488 (hole)         7 -1.74178e-01     -2.60e-13\npolygon 489               14  2.11571e+05      3.16e-07\npolygon 490 (hole)         3 -1.05578e-02     -1.58e-14\npolygon 491 (hole)         4 -4.32122e-02     -6.45e-14\npolygon 492               11  1.59536e+05      2.38e-07\npolygon 493 (hole)         4 -3.72418e-02     -5.56e-14\npolygon 494 (hole)         6 -2.87378e-02     -4.29e-14\npolygon 495 (hole)         3 -3.87472e-03     -5.79e-15\npolygon 496 (hole)         6 -1.05664e-02     -1.58e-14\npolygon 497 (hole)         4 -7.04521e-03     -1.05e-14\npolygon 498              111  7.35028e+07      1.10e-04\npolygon 499 (hole)         3 -5.99346e-03     -8.95e-15\npolygon 500 (hole)         3 -2.33491e-02     -3.49e-14\npolygon 501 (hole)         5 -1.14503e-01     -1.71e-13\npolygon 502               19  6.34649e+05      9.48e-07\npolygon 503 (hole)         3 -2.26549e-03     -3.38e-15\npolygon 504 (hole)         4 -5.35016e-02     -7.99e-14\npolygon 505               10  3.74827e+04      5.60e-08\npolygon 506               13  1.37100e+05      2.05e-07\npolygon 507               31  4.47193e+06      6.68e-06\npolygon 508               19  1.23742e+06      1.85e-06\npolygon 509               20  1.79201e+06      2.68e-06\npolygon 510 (hole)         3 -1.64235e-02     -2.45e-14\npolygon 511               16  2.19464e+05      3.28e-07\npolygon 512               11  7.94092e+04      1.19e-07\npolygon 513 (hole)         3 -2.99572e-02     -4.47e-14\npolygon 514 (hole)         3 -8.18639e-03     -1.22e-14\npolygon 515 (hole)         3 -2.81986e-02     -4.21e-14\npolygon 516               14  1.45779e+05      2.18e-07\npolygon 517               31  6.24672e+05      9.33e-07\npolygon 518               11  2.29288e+04      3.42e-08\npolygon 519               18  2.10998e+05      3.15e-07\npolygon 520               26  2.52571e+06      3.77e-06\npolygon 521               16  5.77783e+05      8.63e-07\npolygon 522               26  8.87985e+05      1.33e-06\npolygon 523               13  1.10557e+05      1.65e-07\npolygon 524               21  9.55338e+05      1.43e-06\npolygon 525               32  2.18189e+06      3.26e-06\npolygon 526               18  7.64830e+05      1.14e-06\npolygon 527               34  1.71336e+06      2.56e-06\npolygon 528              115  9.29594e+05      1.39e-06\npolygon 529               68  2.06761e+05      3.09e-07\npolygon 530               40  4.87851e+06      7.28e-06\npolygon 531               10  7.43137e+04      1.11e-07\npolygon 532               17  5.95020e+05      8.88e-07\npolygon 533               21  4.02132e+05      6.00e-07\npolygon 534               21  1.09635e+06      1.64e-06\npolygon 535               14  1.15356e+05      1.72e-07\npolygon 536 (hole)        18 -1.39516e-01     -2.08e-13\npolygon 537               20  3.13610e+05      4.68e-07\npolygon 538              275  3.92648e+08      5.86e-04\npolygon 539               16  2.19612e+05      3.28e-07\npolygon 540               13  2.64858e+05      3.95e-07\npolygon 541               23  1.25549e+06      1.87e-06\npolygon 542                9  1.79312e+05      2.68e-07\npolygon 543               15  2.93132e+05      4.38e-07\npolygon 544               15  5.29892e+05      7.91e-07\npolygon 545               23  4.95351e+05      7.40e-07\npolygon 546 (hole)        10 -2.23148e-01     -3.33e-13\npolygon 547               14  4.41976e+05      6.60e-07\npolygon 548               19  3.32318e+05      4.96e-07\npolygon 549 (hole)         6 -6.70431e-02     -1.00e-13\npolygon 550               16  4.15914e+05      6.21e-07\npolygon 551               22  5.10526e+05      7.62e-07\npolygon 552               48  1.87148e+07      2.79e-05\npolygon 553               18  1.62882e+06      2.43e-06\npolygon 554 (hole)         9 -1.96623e-01     -2.94e-13\npolygon 555               71  2.43615e+07      3.64e-05\npolygon 556              116  5.16444e+07      7.71e-05\npolygon 557               19  1.54144e+06      2.30e-06\npolygon 558               11  2.01013e+05      3.00e-07\npolygon 559 (hole)         4 -1.87899e-02     -2.81e-14\npolygon 560               20  2.31201e+06      3.45e-06\npolygon 561               15  5.94674e+05      8.88e-07\npolygon 562              218  1.56252e+08      2.33e-04\npolygon 563              162  8.80247e+07      1.31e-04\npolygon 564               16  3.69968e+05      5.52e-07\npolygon 565               14  1.61451e+05      2.41e-07\npolygon 566               18  5.54566e+05      8.28e-07\npolygon 567               19  5.07078e+05      7.57e-07\npolygon 568 (hole)         7 -1.85276e-01     -2.77e-13\npolygon 569               57  6.86475e+06      1.03e-05\npolygon 570               15  6.56018e+05      9.80e-07\npolygon 571               21  6.65092e+05      9.93e-07\npolygon 572               15  5.97784e+05      8.93e-07\npolygon 573               37  2.56010e+06      3.82e-06\npolygon 574               13  1.66996e+05      2.49e-07\npolygon 575               20  8.18381e+05      1.22e-06\npolygon 576               21  2.89704e+06      4.33e-06\npolygon 577               15  4.08213e+05      6.10e-07\npolygon 578 (hole)         3 -1.98618e-03     -2.97e-15\npolygon 579              104  4.71547e+07      7.04e-05\npolygon 580               28  3.80443e+06      5.68e-06\npolygon 581               67  3.17343e+07      4.74e-05\npolygon 582              730  9.20735e+08      1.37e-03\npolygon 583               16  2.01576e+05      3.01e-07\npolygon 584               12  1.41506e+05      2.11e-07\npolygon 585               15  4.92125e+05      7.35e-07\npolygon 586               18  1.58128e+06      2.36e-06\npolygon 587 (hole)         7 -6.67004e-02     -9.96e-14\npolygon 588               25  1.94322e+06      2.90e-06\npolygon 589               12  2.51373e+05      3.75e-07\npolygon 590              412  4.47936e+08      6.69e-04\npolygon 591               22  7.57105e+05      1.13e-06\npolygon 592               16  6.97434e+05      1.04e-06\npolygon 593 (hole)         3 -2.86673e-02     -4.28e-14\npolygon 594               39  4.45130e+06      6.65e-06\npolygon 595 (hole)         4 -2.17002e-02     -3.24e-14\npolygon 596 (hole)         3 -1.55741e-02     -2.33e-14\npolygon 597               13  8.83786e+05      1.32e-06\npolygon 598               10  2.06200e+05      3.08e-07\npolygon 599 (hole)         3 -3.50430e-02     -5.23e-14\npolygon 600               76  3.60497e+07      5.38e-05\npolygon 601 (hole)         5 -5.41615e-02     -8.09e-14\npolygon 602               13  4.56433e+05      6.82e-07\npolygon 603               28  2.30613e+06      3.44e-06\npolygon 604 (hole)         4 -1.59313e-02     -2.38e-14\npolygon 605               27  2.50338e+06      3.74e-06\npolygon 606               14  4.69238e+05      7.01e-07\npolygon 607               10  1.69886e+05      2.54e-07\npolygon 608 (hole)         8 -1.09145e-01     -1.63e-13\npolygon 609               16  5.42822e+05      8.11e-07\npolygon 610               10  1.17633e+05      1.76e-07\npolygon 611                8  7.08579e+04      1.06e-07\npolygon 612              144  7.85300e+07      1.17e-04\npolygon 613               37  1.93477e+06      2.89e-06\npolygon 614 (hole)         3 -1.47049e-03     -2.20e-15\npolygon 615               25  5.59996e+05      8.36e-07\npolygon 616 (hole)         8 -1.20535e-01     -1.80e-13\npolygon 617               44  2.86031e+06      4.27e-06\npolygon 618               26  1.26276e+06      1.89e-06\npolygon 619              149  1.37840e+08      2.06e-04\npolygon 620               18  4.84958e+05      7.24e-07\npolygon 621               73  2.93195e+07      4.38e-05\npolygon 622 (hole)         5 -1.99458e-02     -2.98e-14\npolygon 623               45  6.87481e+06      1.03e-05\npolygon 624 (hole)         4 -1.81549e-02     -2.71e-14\npolygon 625               64  1.80880e+07      2.70e-05\npolygon 626               12  8.76879e+05      1.31e-06\npolygon 627               26  2.78381e+06      4.16e-06\npolygon 628               35  8.72326e+06      1.30e-05\npolygon 629               53  1.06237e+07      1.59e-05\npolygon 630               26  5.40467e+06      8.07e-06\npolygon 631              148  1.05037e+08      1.57e-04\npolygon 632               21  8.32798e+05      1.24e-06\npolygon 633               21  2.23023e+06      3.33e-06\npolygon 634                8  6.30805e+05      9.42e-07\npolygon 635               78  3.67603e+07      5.49e-05\npolygon 636               18  1.64745e+06      2.46e-06\npolygon 637               58  1.31747e+07      1.97e-05\npolygon 638               94  1.16837e+07      1.74e-05\npolygon 639               53  3.17801e+06      4.75e-06\npolygon 640              137  8.46454e+06      1.26e-05\npolygon 641               23  4.36507e+05      6.52e-07\npolygon 642               27  9.72136e+05      1.45e-06\npolygon 643               55  1.98854e+06      2.97e-06\npolygon 644               48  1.02651e+07      1.53e-05\npolygon 645               15  3.16153e+05      4.72e-07\npolygon 646               22  8.93201e+05      1.33e-06\npolygon 647               18  2.91538e+05      4.35e-07\npolygon 648               59  3.70736e+06      5.54e-06\npolygon 649               11  1.55205e+05      2.32e-07\npolygon 650               14  1.87401e+05      2.80e-07\npolygon 651               11  6.54128e+04      9.77e-08\npolygon 652               11  8.64659e+04      1.29e-07\npolygon 653               12  2.25129e+05      3.36e-07\npolygon 654               30  2.72178e+06      4.06e-06\npolygon 655 (hole)         3 -2.26252e+00     -3.38e-12\npolygon 656              180  1.80314e+07      2.69e-05\npolygon 657               14  4.01942e+05      6.00e-07\npolygon 658              103  1.33467e+07      1.99e-05\npolygon 659               14  2.07708e+05      3.10e-07\npolygon 660               55  4.38623e+06      6.55e-06\npolygon 661               41  4.69733e+06      7.01e-06\npolygon 662               74  3.92633e+06      5.86e-06\npolygon 663               31  2.79477e+06      4.17e-06\npolygon 664               17  8.74607e+05      1.31e-06\npolygon 665               26  4.50962e+05      6.73e-07\npolygon 666               18  1.15065e+06      1.72e-06\npolygon 667              164  1.48037e+07      2.21e-05\npolygon 668               12  3.17290e+05      4.74e-07\npolygon 669               69  2.59551e+07      3.88e-05\npolygon 670               37  7.85963e+05      1.17e-06\npolygon 671               14  3.37873e+05      5.05e-07\npolygon 672               12  1.77980e+05      2.66e-07\npolygon 673               21  6.46195e+05      9.65e-07\npolygon 674               24  2.69998e+06      4.03e-06\npolygon 675               30  1.00675e+06      1.50e-06\npolygon 676               57  4.22747e+06      6.31e-06\npolygon 677               23  8.63543e+05      1.29e-06\npolygon 678               11  2.01925e+05      3.02e-07\npolygon 679               95  2.88232e+07      4.30e-05\npolygon 680              452  9.64208e+07      1.44e-04\npolygon 681               77  1.72297e+07      2.57e-05\npolygon 682               16  3.33522e+05      4.98e-07\npolygon 683               19  6.82895e+05      1.02e-06\npolygon 684               43  3.95062e+06      5.90e-06\npolygon 685               29  1.00709e+06      1.50e-06\npolygon 686               21  8.90014e+05      1.33e-06\npolygon 687               22  7.93453e+05      1.18e-06\npolygon 688               13  4.52813e+05      6.76e-07\npolygon 689               30  1.49817e+06      2.24e-06\npolygon 690               48  4.23996e+06      6.33e-06\npolygon 691               37  1.20290e+06      1.80e-06\npolygon 692               19  4.85805e+05      7.25e-07\npolygon 693               46  2.18001e+06      3.26e-06\npolygon 694                7  1.33723e+05      2.00e-07\npolygon 695               54  1.82059e+07      2.72e-05\npolygon 696               10  8.57866e+05      1.28e-06\npolygon 697               14  1.98445e+05      2.96e-07\npolygon 698               19  4.68357e+05      6.99e-07\npolygon 699               52  8.57765e+06      1.28e-05\npolygon 700               73  7.91998e+06      1.18e-05\npolygon 701               23  8.19561e+06      1.22e-05\npolygon 702               10  1.06594e+05      1.59e-07\npolygon 703              169  1.39462e+07      2.08e-05\npolygon 704               17  2.55915e+05      3.82e-07\npolygon 705               12  1.81516e+05      2.71e-07\npolygon 706               16  3.68509e+05      5.50e-07\npolygon 707               12  1.24954e+05      1.87e-07\npolygon 708             1012  4.61886e+08      6.90e-04\npolygon 709               15  5.42647e+05      8.10e-07\npolygon 710               12  5.53088e+05      8.26e-07\npolygon 711               24  1.06455e+06      1.59e-06\npolygon 712               14  3.17038e+05      4.73e-07\npolygon 713               17  1.25559e+06      1.87e-06\npolygon 714               16  1.92407e+06      2.87e-06\npolygon 715               80  1.86306e+07      2.78e-05\npolygon 716               11  6.83880e+04      1.02e-07\npolygon 717              166  4.21470e+07      6.29e-05\npolygon 718               22  1.36174e+06      2.03e-06\npolygon 719               31  6.07363e+05      9.07e-07\npolygon 720               10  1.27067e+05      1.90e-07\npolygon 721              164  5.02951e+07      7.51e-05\npolygon 722               17  1.20798e+06      1.80e-06\npolygon 723               59  2.41720e+06      3.61e-06\npolygon 724               12  2.52952e+05      3.78e-07\npolygon 725               14  2.44407e+05      3.65e-07\npolygon 726               43  4.89177e+06      7.30e-06\npolygon 727               40  3.86642e+06      5.77e-06\npolygon 728               23  4.59203e+05      6.86e-07\npolygon 729               14  1.79442e+05      2.68e-07\npolygon 730               13  1.61191e+05      2.41e-07\npolygon 731               43  1.33365e+06      1.99e-06\npolygon 732               75  1.20247e+07      1.80e-05\npolygon 733               17  9.96466e+04      1.49e-07\npolygon 734               22  1.60660e+06      2.40e-06\npolygon 735              730  1.16983e+08      1.75e-04\npolygon 736              129  7.87539e+06      1.18e-05\npolygon 737               22  4.66256e+05      6.96e-07\npolygon 738               19  5.44519e+05      8.13e-07\npolygon 739               16  3.73911e+05      5.58e-07\npolygon 740               88  3.47678e+07      5.19e-05\npolygon 741               46  3.23711e+06      4.83e-06\npolygon 742               47  9.17482e+05      1.37e-06\npolygon 743               14  4.44869e+05      6.64e-07\npolygon 744               43  1.29527e+06      1.93e-06\npolygon 745               65  3.20974e+06      4.79e-06\npolygon 746              306  1.83695e+07      2.74e-05\npolygon 747               17  4.25486e+05      6.35e-07\npolygon 748               29  1.08467e+06      1.62e-06\npolygon 749               26  1.16602e+06      1.74e-06\npolygon 750              135  4.90655e+06      7.33e-06\npolygon 751               23  1.87723e+06      2.80e-06\npolygon 752               21  7.02338e+05      1.05e-06\npolygon 753               30  4.99970e+06      7.47e-06\npolygon 754               21  7.71571e+05      1.15e-06\npolygon 755               13  1.47832e+05      2.21e-07\npolygon 756               26  3.17307e+06      4.74e-06\npolygon 757               17  1.03642e+06      1.55e-06\npolygon 758              100  8.74537e+06      1.31e-05\npolygon 759               11  1.13950e+05      1.70e-07\npolygon 760               26  8.27840e+05      1.24e-06\npolygon 761               17  4.10882e+05      6.14e-07\npolygon 762               13  1.49250e+05      2.23e-07\npolygon 763               35  1.76408e+06      2.63e-06\npolygon 764               15  2.03390e+05      3.04e-07\npolygon 765               18  1.70982e+05      2.55e-07\npolygon 766               32  7.98599e+06      1.19e-05\npolygon 767               27  3.20839e+05      4.79e-07\npolygon 768              539  1.17139e+08      1.75e-04\npolygon 769               51  1.57614e+06      2.35e-06\npolygon 770               19  3.60772e+05      5.39e-07\npolygon 771               58  2.10060e+06      3.14e-06\npolygon 772               13  1.70224e+05      2.54e-07\npolygon 773               11  6.11736e+05      9.13e-07\npolygon 774               35  5.26152e+06      7.86e-06\npolygon 775               16  1.99371e+05      2.98e-07\npolygon 776               14  4.48979e+05      6.70e-07\npolygon 777               25  1.92913e+06      2.88e-06\npolygon 778               16  4.26157e+05      6.36e-07\npolygon 779               46  1.88229e+06      2.81e-06\npolygon 780               17  2.29456e+05      3.43e-07\npolygon 781               36  4.01418e+06      5.99e-06\npolygon 782               57  1.77153e+07      2.65e-05\npolygon 783               20  5.72298e+05      8.55e-07\npolygon 784               14  2.46782e+05      3.68e-07\npolygon 785               29  1.01300e+06      1.51e-06\npolygon 786               90  8.54955e+06      1.28e-05\npolygon 787               21  3.99098e+05      5.96e-07\npolygon 788               12  2.81650e+05      4.21e-07\npolygon 789               52  3.19337e+06      4.77e-06\npolygon 790               13  3.40300e+05      5.08e-07\npolygon 791               29  9.08533e+05      1.36e-06\npolygon 792               20  3.07393e+05      4.59e-07\npolygon 793               19  1.15906e+06      1.73e-06\npolygon 794               17  1.16182e+06      1.73e-06\npolygon 795               21  2.60877e+06      3.90e-06\npolygon 796               15  1.09001e+05      1.63e-07\npolygon 797               37  1.31921e+06      1.97e-06\npolygon 798               53  1.46854e+06      2.19e-06\npolygon 799               59  8.92822e+06      1.33e-05\npolygon 800                9  7.44981e+04      1.11e-07\npolygon 801               14  2.41462e+05      3.61e-07\npolygon 802               96  7.25940e+06      1.08e-05\npolygon 803               11  1.06055e+05      1.58e-07\npolygon 804               49  1.87834e+06      2.80e-06\npolygon 805               23  6.08310e+05      9.08e-07\npolygon 806               50  6.76488e+05      1.01e-06\npolygon 807               22  4.83089e+05      7.21e-07\npolygon 808               17  1.17278e+05      1.75e-07\npolygon 809               13  8.98786e+05      1.34e-06\npolygon 810               43  1.01757e+06      1.52e-06\npolygon 811               52  1.68377e+06      2.51e-06\npolygon 812              348  2.50314e+08      3.74e-04\npolygon 813               43  1.29120e+06      1.93e-06\npolygon 814               71  2.02836e+06      3.03e-06\npolygon 815 (hole)         4 -4.12791e+00     -6.16e-12\npolygon 816              141  4.53240e+06      6.77e-06\npolygon 817               52  3.62008e+06      5.41e-06\npolygon 818               20  7.69539e+05      1.15e-06\npolygon 819               88  8.88904e+06      1.33e-05\npolygon 820               12  1.44668e+05      2.16e-07\npolygon 821               46  2.28026e+06      3.40e-06\npolygon 822               39  4.79165e+06      7.15e-06\npolygon 823               53  2.86736e+06      4.28e-06\npolygon 824               38  3.22508e+06      4.82e-06\npolygon 825               18  4.44863e+05      6.64e-07\npolygon 826               45  1.45134e+06      2.17e-06\npolygon 827               86  2.56400e+07      3.83e-05\npolygon 828              158  1.74510e+07      2.61e-05\npolygon 829               14  2.50383e+05      3.74e-07\npolygon 830              120  7.17019e+06      1.07e-05\npolygon 831              146  2.28448e+07      3.41e-05\npolygon 832              143  2.34472e+07      3.50e-05\npolygon 833               20  3.47415e+05      5.19e-07\npolygon 834 (hole)         4 -4.68941e-06     -7.00e-18\npolygon 835               84  3.86387e+06      5.77e-06\npolygon 836               68  1.10850e+07      1.66e-05\npolygon 837              863  7.47702e+07      1.12e-04\npolygon 838               53  7.54742e+06      1.13e-05\npolygon 839 (hole)         5 -5.05720e-06     -7.55e-18\npolygon 840               64  2.11016e+06      3.15e-06\npolygon 841              103  1.47525e+07      2.20e-05\npolygon 842               26  3.40345e+06      5.08e-06\npolygon 843 (hole)         6 -3.61488e-06     -5.40e-18\npolygon 844 (hole)         8 -7.69320e-06     -1.15e-17\npolygon 845              103  8.40445e+06      1.25e-05\npolygon 846               23  4.92041e+05      7.35e-07\npolygon 847               27  5.53625e+05      8.27e-07\npolygon 848               60  3.56102e+06      5.32e-06\npolygon 849              151  1.51314e+07      2.26e-05\npolygon 850 (hole)         3 -7.39477e-07     -1.10e-18\npolygon 851              708  4.18129e+08      6.24e-04\npolygon 852              120  1.32857e+07      1.98e-05\npolygon 853              856  2.53898e+08      3.79e-04\npolygon 854 (hole)         3 -1.50844e-06     -2.25e-18\npolygon 855 (hole)         3 -4.24650e-07     -6.34e-19\npolygon 856 (hole)         3 -1.88515e-07     -2.81e-19\npolygon 857 (hole)         5 -8.69704e-06     -1.30e-17\npolygon 858               13  2.47298e+05      3.69e-07\npolygon 859 (hole)         5 -7.23691e-06     -1.08e-17\npolygon 860               16  7.35754e+05      1.10e-06\npolygon 861 (hole)         4 -5.33303e-06     -7.96e-18\npolygon 862               21  5.31633e+05      7.94e-07\npolygon 863 (hole)        11 -4.03605e-06     -6.03e-18\npolygon 864 (hole)         8 -8.21407e-06     -1.23e-17\npolygon 865 (hole)         3 -8.94907e-07     -1.34e-18\npolygon 866 (hole)         5 -8.84798e-07     -1.32e-18\npolygon 867               72  1.03185e+07      1.54e-05\npolygon 868 (hole)         4 -1.46538e-06     -2.19e-18\npolygon 869 (hole)         3 -9.80724e-08     -1.46e-19\npolygon 870               38  1.34734e+06      2.01e-06\npolygon 871                8  4.09489e+05      6.11e-07\npolygon 872 (hole)         4 -2.72236e-06     -4.06e-18\npolygon 873               17  2.46995e+05      3.69e-07\npolygon 874 (hole)         3 -4.51258e-07     -6.74e-19\npolygon 875               14  1.42285e+05      2.12e-07\npolygon 876 (hole)         4 -1.75556e-06     -2.62e-18\npolygon 877 (hole)         6 -5.94035e-06     -8.87e-18\npolygon 878 (hole)         4 -1.25815e-07     -1.88e-19\npolygon 879 (hole)         3 -7.56009e-11     -1.13e-22\npolygon 880                9  1.56346e+05      2.33e-07\npolygon 881                4  3.54043e-12      5.29e-24\npolygon 882               42  5.49581e+05      8.21e-07\npolygon 883 (hole)         5 -2.12841e-06     -3.18e-18\npolygon 884 (hole)         3 -5.20431e-06     -7.77e-18\npolygon 885 (hole)         3 -2.38232e-07     -3.56e-19\npolygon 886 (hole)         3 -8.12952e-07     -1.21e-18\npolygon 887 (hole)         6 -1.08736e-05     -1.62e-17\npolygon 888 (hole)         4 -1.51924e-07     -2.27e-19\npolygon 889               59  1.15813e+06      1.73e-06\npolygon 890 (hole)         4 -2.33425e-06     -3.49e-18\npolygon 891               12  1.16845e+05      1.74e-07\npolygon 892               11  6.00122e+04      8.96e-08\npolygon 893               14  1.63465e+05      2.44e-07\npolygon 894                8  4.73674e+04      7.07e-08\npolygon 895               23  6.69330e+05      9.99e-07\npolygon 896 (hole)         3 -1.12555e-07     -1.68e-19\npolygon 897              144  6.48346e+06      9.68e-06\npolygon 898               74  4.79923e+06      7.17e-06\npolygon 899              116  1.02706e+07      1.53e-05\npolygon 900               16  2.74005e+05      4.09e-07\npolygon 901               97  4.72599e+06      7.06e-06\npolygon 902               18  6.15583e+05      9.19e-07\npolygon 903              146  1.38979e+07      2.08e-05\npolygon 904 (hole)         5 -4.09278e-06     -6.11e-18\npolygon 905               32  1.94516e+06      2.90e-06\npolygon 906               26  9.81356e+05      1.47e-06\npolygon 907 (hole)         3 -2.01950e-06     -3.02e-18\npolygon 908 (hole)         4 -1.01886e-06     -1.52e-18\npolygon 909               82  4.39797e+06      6.57e-06\npolygon 910               33  9.36113e+05      1.40e-06\npolygon 911 (hole)         3 -1.34355e-07     -2.01e-19\npolygon 912               47  1.51844e+06      2.27e-06\npolygon 913 (hole)         3 -6.87758e-06     -1.03e-17\npolygon 914              196  2.32689e+07      3.47e-05\npolygon 915 (hole)         3 -2.42306e-06     -3.62e-18\npolygon 916 (hole)         5 -6.15518e-06     -9.19e-18\npolygon 917               53  1.30069e+06      1.94e-06\npolygon 918               70  1.00802e+07      1.51e-05\npolygon 919 (hole)         3 -3.22181e-07     -4.81e-19\npolygon 920               10  5.33870e+05      7.97e-07\npolygon 921              211  2.73026e+07      4.08e-05\npolygon 922               41  1.44141e+06      2.15e-06\npolygon 923                9  5.20220e+05      7.77e-07\npolygon 924              316  6.66808e+07      9.96e-05\npolygon 925               17  7.48505e+05      1.12e-06\npolygon 926               15  1.49799e+05      2.24e-07\npolygon 927               24  4.99500e+05      7.46e-07\npolygon 928               12  2.24463e+05      3.35e-07\npolygon 929              100  1.06028e+07      1.58e-05\npolygon 930               11  1.24267e+05      1.86e-07\npolygon 931              143  1.89581e+07      2.83e-05\npolygon 932               60  7.07802e+06      1.06e-05\npolygon 933              124  1.23476e+07      1.84e-05\npolygon 934               34  5.67625e+06      8.48e-06\npolygon 935              797  1.86955e+08      2.79e-04\npolygon 936               15  7.15891e+05      1.07e-06\npolygon 937               20  1.61624e+06      2.41e-06\npolygon 938               13  1.73955e+05      2.60e-07\npolygon 939               60  2.42590e+06      3.62e-06\npolygon 940               20  3.86365e+05      5.77e-07\npolygon 941              213  3.69421e+07      5.52e-05\npolygon 942               15  4.55574e+05      6.80e-07\npolygon 943               35  1.56058e+06      2.33e-06\npolygon 944               32  1.42419e+06      2.13e-06\npolygon 945               68  2.30711e+06      3.44e-06\npolygon 946              240  5.93935e+07      8.87e-05\npolygon 947              145  1.58875e+07      2.37e-05\npolygon 948               39  3.67239e+06      5.48e-06\npolygon 949               54  3.84847e+06      5.75e-06\npolygon 950               32  1.14073e+06      1.70e-06\npolygon 951               18  3.58549e+05      5.35e-07\npolygon 952               25  8.06470e+05      1.20e-06\npolygon 953               15  2.67818e+05      4.00e-07\npolygon 954               26  1.43681e+06      2.15e-06\npolygon 955               18  3.10061e+05      4.63e-07\npolygon 956               18  4.71644e+05      7.04e-07\npolygon 957               16  5.04146e+05      7.53e-07\npolygon 958               72  7.33720e+06      1.10e-05\npolygon 959               27  1.37772e+06      2.06e-06\npolygon 960               15  3.17217e+05      4.74e-07\npolygon 961               37  1.17498e+06      1.75e-06\npolygon 962               21  7.05388e+05      1.05e-06\npolygon 963              216  2.05399e+07      3.07e-05\npolygon 964               16  2.40093e+05      3.59e-07\npolygon 965               29  1.71282e+06      2.56e-06\npolygon 966               30  1.28695e+06      1.92e-06\npolygon 967               36  2.29670e+06      3.43e-06\npolygon 968              129  1.97698e+07      2.95e-05\npolygon 969               65  2.65969e+06      3.97e-06\npolygon 970              283  3.30575e+07      4.94e-05\npolygon 971               28  7.06271e+05      1.05e-06\npolygon 972               28  5.50158e+05      8.21e-07\npolygon 973               49  2.25015e+06      3.36e-06\npolygon 974               26  1.24280e+06      1.86e-06\npolygon 975               28  9.02794e+05      1.35e-06\npolygon 976               18  4.84064e+05      7.23e-07\npolygon 977               47  2.33442e+06      3.49e-06\npolygon 978               17  2.23835e+05      3.34e-07\npolygon 979               34  7.32504e+05      1.09e-06\npolygon 980               41  7.15538e+05      1.07e-06\npolygon 981               21  5.81687e+05      8.69e-07\npolygon 982               63  3.83819e+06      5.73e-06\npolygon 983               27  1.33192e+06      1.99e-06\npolygon 984               46  2.95028e+06      4.41e-06\npolygon 985               10  1.34210e+05      2.00e-07\npolygon 986               16  2.38274e+05      3.56e-07\npolygon 987               18  4.18536e+05      6.25e-07\npolygon 988               46  1.26584e+06      1.89e-06\npolygon 989               14  2.14679e+05      3.21e-07\npolygon 990               76  3.63371e+06      5.43e-06\npolygon 991              339  4.44685e+07      6.64e-05\npolygon 992              109  6.29786e+06      9.40e-06\npolygon 993               14  2.89570e+05      4.32e-07\npolygon 994               37  9.07704e+05      1.36e-06\npolygon 995               68  3.86104e+06      5.77e-06\npolygon 996              183  1.45458e+07      2.17e-05\npolygon 997               44  1.64355e+06      2.45e-06\npolygon 998               26  1.21667e+06      1.82e-06\npolygon 999               13  1.95710e+05      2.92e-07\npolygon 1000              38  1.44402e+06      2.16e-06\npolygon 1001              14  3.29394e+05      4.92e-07\npolygon 1002              14  1.79828e+05      2.69e-07\npolygon 1003              44  2.11118e+06      3.15e-06\npolygon 1004             643  1.79215e+08      2.68e-04\npolygon 1005              24  1.10979e+06      1.66e-06\npolygon 1006              30  1.57106e+06      2.35e-06\npolygon 1007              46  3.61716e+06      5.40e-06\npolygon 1008              93  7.56340e+05      1.13e-06\npolygon 1009              57  3.07732e+06      4.59e-06\npolygon 1010              18  2.16224e+05      3.23e-07\npolygon 1011              17  5.12388e+05      7.65e-07\npolygon 1012               9  7.44780e+04      1.11e-07\npolygon 1013              57  8.09122e+06      1.21e-05\npolygon 1014              16  4.01323e+05      5.99e-07\npolygon 1015             118  2.90304e+07      4.33e-05\npolygon 1016              22  4.44693e+05      6.64e-07\npolygon 1017              43  2.28763e+06      3.42e-06\npolygon 1018              27  1.15444e+06      1.72e-06\npolygon 1019              25  1.21695e+06      1.82e-06\npolygon 1020              53  4.49228e+06      6.71e-06\npolygon 1021 (hole)        8 -5.14960e-02     -7.69e-14\npolygon 1022 (hole)        3 -1.87101e-06     -2.79e-18\npolygon 1023 (hole)       31 -2.12239e-01     -3.17e-13\npolygon 1024 (hole)        6 -4.99398e-02     -7.46e-14\npolygon 1025 (hole)        8 -1.14003e-01     -1.70e-13\npolygon 1026 (hole)        4 -5.05161e-02     -7.54e-14\npolygon 1027 (hole)        4 -6.87492e-03     -1.03e-14\npolygon 1028 (hole)        6 -5.83051e-06     -8.71e-18\npolygon 1029 (hole)        7 -1.10596e-01     -1.65e-13\npolygon 1030 (hole)       14 -3.52603e-01     -5.26e-13\npolygon 1031 (hole)       14 -1.57739e-01     -2.36e-13\npolygon 1032 (hole)        6 -6.42550e-02     -9.59e-14\npolygon 1033 (hole)        4 -3.16857e-02     -4.73e-14\npolygon 1034 (hole)        8 -7.25950e-02     -1.08e-13\npolygon 1035 (hole)        4 -1.10823e-02     -1.65e-14\npolygon 1036 (hole)        8 -1.54074e-01     -2.30e-13\npolygon 1037 (hole)        4 -5.15531e-03     -7.70e-15\npolygon 1038 (hole)        7 -4.08919e-02     -6.11e-14\npolygon 1039 (hole)        9 -6.45354e-02     -9.64e-14\npolygon 1040 (hole)       13 -6.64876e-02     -9.93e-14\npolygon 1041 (hole)        5 -5.31928e-02     -7.94e-14\npolygon 1042 (hole)        6 -4.67378e-02     -6.98e-14\npolygon 1043 (hole)        4 -2.58840e-02     -3.86e-14\npolygon 1044 (hole)       10 -9.35297e-02     -1.40e-13\npolygon 1045 (hole)        4 -1.76462e-02     -2.63e-14\npolygon 1046 (hole)        4 -5.14884e-02     -7.69e-14\npolygon 1047 (hole)        3 -1.43941e-03     -2.15e-15\npolygon 1048 (hole)        8 -2.11864e-02     -3.16e-14\npolygon 1049 (hole)        4 -3.97950e-03     -5.94e-15\npolygon 1050 (hole)        3 -2.72931e-02     -4.08e-14\npolygon 1051 (hole)        4 -9.91931e-02     -1.48e-13\npolygon 1052 (hole)        9 -4.30090e-02     -6.42e-14\npolygon 1053 (hole)        3 -2.69442e-02     -4.02e-14\npolygon 1054 (hole)        6 -3.65336e-02     -5.46e-14\npolygon 1055 (hole)       10 -5.24779e-02     -7.84e-14\npolygon 1056 (hole)       12 -5.88191e-02     -8.78e-14\npolygon 1057 (hole)        8 -3.34285e-02     -4.99e-14\npolygon 1058 (hole)       18 -1.75177e-01     -2.62e-13\npolygon 1059 (hole)        6 -6.63686e-02     -9.91e-14\npolygon 1060 (hole)        3 -1.24000e-02     -1.85e-14\npolygon 1061 (hole)       10 -1.14560e-01     -1.71e-13\npolygon 1062 (hole)        5 -5.13942e-02     -7.67e-14\npolygon 1063 (hole)       10 -8.30359e-02     -1.24e-13\npolygon 1064 (hole)        4 -1.89513e-02     -2.83e-14\npolygon 1065 (hole)        6 -1.07333e-01     -1.60e-13\npolygon 1066 (hole)        3 -5.80809e-03     -8.67e-15\npolygon 1067              79  1.47390e+07      2.20e-05\npolygon 1068              54  9.35305e+06      1.40e-05\npolygon 1069 (hole)        3 -1.94487e-03     -2.90e-15\npolygon 1070 (hole)       10 -6.90518e-02     -1.03e-13\npolygon 1071 (hole)        4 -1.17368e-02     -1.75e-14\npolygon 1072 (hole)        9 -5.79029e-02     -8.65e-14\npolygon 1073 (hole)        3 -4.78872e-02     -7.15e-14\npolygon 1074 (hole)        3 -5.90059e-03     -8.81e-15\npolygon 1075 (hole)        5 -6.11108e-02     -9.12e-14\npolygon 1076           37606  6.60254e+11      9.86e-01\npolygon 1077 (hole)        5 -2.11931e-06     -3.16e-18\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n                     (934700 x 2086000 units)\nWindow area = 6.69714e+11 square units\nFraction of frame area: 0.343\n```\n\n\n:::\n:::\n\n:::\n\nThe¬†**`ppp`**¬†object outputted from combining both the point and polygon feature results in the boundary of Myanmar outlining the plot of conflict events as shown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up plotting layout\nn <- length(masked_ppp_list)\n\n# Plot each masked ppp object\npar(mfrow = c(2,3), mar = c(0,0,1,0))  # Adjust margins as needed\nfor (quarter in names(masked_ppp_list)) {\n  plot(masked_ppp_list[[quarter]], main = paste(\"Year Quarter:\", quarter))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-30-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-30-3.png){width=672}\n:::\n:::\n\n\n## 4. Exploratory Data Analysis\n\n### 4.1 Identifying *Districts* with Highest Proportion of Conflicts\n\nIt'll also be interesting to find out **specific districts** with the **highest concentration of armed conflicts.** I will first calculate the total occurrences of conflict events per district and add the column to **`boundary_sf`**.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Count number of conflicts by districts\"}\nconflict_count <- conflict_data_sf %>%\n  group_by(DT) %>%\n  summarise(total_count_DT = n()) %>%\n  st_drop_geometry() %>%\n  select(DT, total_count_DT)\n\n# Perform the join\nboundary_sf <- boundary_sf %>%\n  left_join(conflict_count, by = \"DT\")\n```\n:::\n\n\nNext, let's calculate the **proportion** of total conflicts and add it as a column into the **`boundary_sf`** dataset as **`proportion_DT`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create new 'proportion_DT' column\nboundary_sf <- boundary_sf %>%\n  mutate(proportion_DT = total_count_DT / sum(total_count_DT))\nhead(boundary_sf[c('DT','total_count_DT','proportion_DT')])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -14915.04 ymin: 1736124 xmax: 187961.7 ymax: 2051144\nProjected CRS: WGS 84 / UTM zone 47N\n         DT total_count_DT proportion_DT                       geometry\n1  Hinthada            160   0.003755780 MULTIPOLYGON (((90859.89 20...\n2   Labutta             51   0.001197155 MULTIPOLYGON (((75991.51 17...\n3    Maubin            118   0.002769888 MULTIPOLYGON (((115559 1928...\n4 Myaungmya             59   0.001384944 MULTIPOLYGON (((39919.39 18...\n5   Pathein            333   0.007816718 MULTIPOLYGON (((-6302.348 1...\n6    Pyapon            131   0.003075045 MULTIPOLYGON (((93411.72 17...\n```\n\n\n:::\n:::\n\n\nAt a quick glance, we can see that central and southern parts of Myanmar have the highest proportions of armed conflict events occuring.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Set up the points map\"}\ndistricts_choropleth <-\ntm_shape(boundary_sf) +\n  tm_fill(\"proportion_DT\",\n          n=10,\n          title=\"Proportion\",\n          style=\"equal\",\n          palette=\"Blues\") +\n  tm_borders(lwd=0.2,\n             alpha=1) +\n  tm_text(text = \"DT\", \n          size = 0.2, \n          col = \"black\",\n          fontface = \"bold\") +\n  tm_layout(main.title = \"Distribution of Conflict Points Across Districts\",\n            legend.outside=FALSE,\n            main.title.size=1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the map\ntmap_mode(\"plot\")\ntmap_arrange(districts_choropleth)\n```\n:::\n\n\n![](images/clipboard-1636605006.png)\n\nMore specifically, we can observe that the district types are all unique for the **top 3** conflict areas and mainly found in the districts of **Yinmarbin, Shwebo and Pakokku** which lies in the central regions of Myanmar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count number of conflicts by district\nconflict_count <- conflict_data_sf %>%\n  group_by(DT) %>%\n  summarise(total_count_DT = n()) %>%\n  st_drop_geometry() %>%\n  select(DT, total_count_DT)\n\n# Perform the join\nboundary_sf <- boundary_sf %>%\n  left_join(conflict_count, by = \"DT\")\n\nconflict_count %>%\n  arrange(desc(total_count_DT)) %>%\n  slice(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 2\n   DT         total_count_DT\n   <chr>               <int>\n 1 Shwebo               2694\n 2 Pakokku              2491\n 3 Yinmarbin            1788\n 4 Monywa               1514\n 5 Kale                 1261\n 6 Pyinoolwin           1261\n 7 Muse                 1244\n 8 Loikaw               1172\n 9 Dawei                1165\n10 Sagaing              1146\n```\n\n\n:::\n:::\n\n\n### 4.2 Identifying *States* with Highest Proportion of Conflicts\n\nInstead, let us also explore the **top 10 states** with the highest proportions of armed conflict events.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Count number of conflicts by states\"}\nconflict_count <- conflict_data_sf %>%\n  group_by(ST) %>%\n  summarise(total_count_ST = n()) %>%\n  st_drop_geometry() %>%\n  select(ST, total_count_ST)\n\n# Perform the join\nboundary_sf <- boundary_sf %>%\n  left_join(conflict_count, by = \"ST\")\n```\n:::\n\n\nLikewise, I'll add a new column called **`proportion_ST`** to represent the proportion based on each Myanmar state.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary_sf <- boundary_sf %>%\n  mutate(proportion_ST = total_count_ST / sum(total_count_ST))\n\nhead(boundary_sf[c('ST','total_count_ST','proportion_ST')])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -14915.04 ymin: 1736124 xmax: 187961.7 ymax: 2051144\nProjected CRS: WGS 84 / UTM zone 47N\n          ST total_count_ST proportion_ST                       geometry\n1 Ayeyarwady            852   0.003053731 MULTIPOLYGON (((90859.89 20...\n2 Ayeyarwady            852   0.003053731 MULTIPOLYGON (((75991.51 17...\n3 Ayeyarwady            852   0.003053731 MULTIPOLYGON (((115559 1928...\n4 Ayeyarwady            852   0.003053731 MULTIPOLYGON (((39919.39 18...\n5 Ayeyarwady            852   0.003053731 MULTIPOLYGON (((-6302.348 1...\n6 Ayeyarwady            852   0.003053731 MULTIPOLYGON (((93411.72 17...\n```\n\n\n:::\n:::\n\n\nAt a quick glance, we can see that **central** and **southern** parts of Myanmar have the highest proportions of armed conflict events occurring, particularly in **Sagaing**, **Mandalay** and **Magway** states.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Create the points map\"}\nstates_choropleth <-\ntm_shape(boundary_sf) +\n  tm_fill(\"proportion_ST\",\n          n=10,\n          title=\"Proportion\",\n          style=\"equal\",\n          palette=\"Blues\") +\n  tm_borders(lwd=0.2,\n             alpha=1) +\n  tm_text(text = \"ST\", \n          size = 0.2, \n          col = \"black\",\n          fontface = \"bold\") +\n  tm_layout(main.title = \"Distribution of Conflict Points Across States\",\n            legend.outside=FALSE,\n            main.title.size=1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the map\ntmap_mode(\"plot\")\ntmap_arrange(states_choropleth)\n```\n:::\n\n\n![](images/clipboard-1404098727.png)\n\nFor greater clarity, the top states with the most conflicts exist in **Sagaing**, **Mandalay,** **Magway** and **Yangon** states as indicated in the map above (darkest shade of blue).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconflict_count %>%\n  arrange(desc(total_count_ST)) %>%\n  slice(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 2\n   ST           total_count_ST\n   <chr>                 <int>\n 1 Sagaing               11128\n 2 Magway                 4179\n 3 Mandalay               3603\n 4 Shan (North)           2938\n 5 Kachin                 2776\n 6 Yangon                 2608\n 7 Rakhine                2277\n 8 Tanintharyi            2240\n 9 Kayin                  1817\n10 Mon                    1677\n```\n\n\n:::\n:::\n\n\n## **5. 1st Order Spatial Point Patterns Analysis**\n\n### 5.1 Kernel Density Estimation\n\n#### 5.1.1 Working with Fixed Bandwidth Methods\n\nUsing the geospatial data sets prepared, I will now perform 1st order spatial point pattern analysis by leveraging **kernel density estimation** **(KDE)** to understand the intensity of conflicts in different regions.\n\nI will be using a variety of **fixed** **bandwidth** methods via **`density()`** of the **`spatstat`** package, to determine the most optimal method for this analysis. Namely using **`bw.diggle()`**, **`bw.ppl()`, `bw.CvL()`** and **`bw.scott()`.**\n\n**Steps taken to calculate the KDE:**\n\n1.  Extract the masked ppp object for the current quarter.\n2.  Compute the kernel density estimate by setting the **`signma`** parameters.\n3.  Plot the kernel density estimate using **`plot()`** where \"Bw\" represents the optimal bandwidth\n\nFor the purposes of identifying the most optimal bandwidth method, I will create a **`ppp_obj`** using the **2021 Q1** conflict events first to assist my decision-making.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set Up\nppp_obj = masked_ppp_list$`2021 Q1`\ncolours <- colorRampPalette(c(\"midnightblue\", \"skyblue\"))(100)\n```\n:::\n\n\n##### **1) Using bw.diggle()**\n\nThe **`bw.diggle()`** bandwidth is referred to as Diggle's cross-validation bandwidth which minimises the mean-squared error (MSE) to balance between under and over-smoothing. I will use the **`density()`** function to compute the kernel density of the masked ppp objects and visualise the distribution of conflict event points by using the **`plot()`** function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw.diggle()\nkde_conflict_bw_diggle <- density(ppp_obj,\n                           sigma=bw.diggle,\n                           edge=TRUE,\n                           kernel=\"gaussian\")\noptimal_bw_d = floor(bw.diggle(ppp_obj)[[1]]*10)/10\nplot(kde_conflict_bw_diggle, main = paste(\"BW: diggle\", \"(\",optimal_bw_d,\"m)\"), col = colours)\n```\n:::\n\n\n![](images/clipboard-2882188917.png)\n\n##### **2) Using bw.ppl()**\n\nThe second bandwidth method I attempted using is **`bw.ppl()`**, This method chooses the bandwidth that minimises the **likelihood cross-validation score** and improving the **prediction accuracy** of the kernel density estimate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw.ppl()\nkde_conflict_bw_ppl <- density(ppp_obj,\n                           sigma=bw.ppl,\n                           edge=TRUE,\n                           kernel=\"gaussian\")\noptimal_bw_p = floor(bw.ppl(ppp_obj)[[1]]*10)/10\nplot(kde_conflict_bw_ppl, main = paste(\"Bw: ppl\", \"(\",optimal_bw_p,\"m)\"), col = colours)\n```\n:::\n\n\n![](images/clipboard-2436588955.png)\n\n::: {.callout-tip title=\"Reflections\"}\nAs `bw.ppl()` tends to choose **smaller bandwidths**, it provide more **localised density estimates** which highlights finer spatial details. As such, we can see **more variability** and **finer** **details** in the density distribution, with more variation between high- and low-density areas.\n:::\n\n##### **3) Using bw.CvL()**\n\nThirdly, let's explore the bandwidth method **`bw.CvL()`**, also known as Cronie and Van Lieshout cross-validation**,** designed to provide an **optimal, adaptive bandwidth** for **inhomogeneous point patterns**.**.** Similar to **`bw.ppl()`**, it aims to reduce the error measure but also aims to **balance over and under-fitting** based on the spatial structure of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw.CvL()\nkde_conflict_bw_CvL <- density(ppp_obj,\n                           sigma=bw.CvL,\n                           edge=TRUE,\n                           kernel=\"gaussian\")\noptimal_bw_c = floor(bw.CvL(ppp_obj)[[1]]*10)/10\nplot(kde_conflict_bw_CvL, main = paste(\"Bw: CvL (\",optimal_bw_c,\"m)\"), col = colours)\n```\n:::\n\n\n![](images/clipboard-139099524.png)\n\n::: {.callout-tip title=\"Observations\"}\nThe kernel density plot shows that CvL makes a good attempt in **balancing between detail and smoothness**, making it more suitable for capturing the **overall density trends** in spatial data with some **local structures** highlighted.\n:::\n\n##### **4) Using bw.scott()**\n\nLastly, I will explore the `bw.scott()` bandwidth method. This method returns separate bandwidths for the x- and y-axes which is ideal for our spatial data that contains both x and y components. I will combine these bandwidths into a single value for isotropic kernel density estimation by taking the **taking the geometric mean** as shown in the value returned by **`sigma_combined`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw.scott()\nbw_values <- bw.scott(ppp_obj)\nsigma_x <- bw_values[1]\nsigma_y <- bw_values[2]\nsigma_combined <- sqrt(sigma_x * sigma_y)\n\nkde_conflict_bw_scott <- density(ppp_obj,\n                           sigma = sigma_combined,\n                           edge = TRUE,\n                           kernel = \"gaussian\")\n\noptimal_bw_s = floor(sigma_combined*10)/10\nplot(kde_conflict_bw_scott, main = paste(\"Bw: scott\", \"(\",optimal_bw_s,\"m)\"), col = colours)\n```\n:::\n\n\n![](images/clipboard-479310501.png)\n\n::: {.callout-tip title=\"Observations\"}\nAs shown, the **geometric mean** ensures equal smoothing in both x and y directions, and it largely similar to **`bw.Cvl()`**, making it a good choice for a **balanced** and **general overview** of the spatial data distribution.\n:::\n\n##### **Selecting a Bandwidth Method**\n\nBased on my research and observations of the charts below, the four methods cater to different types of data depending on how varied the densities are spread across and the granularity of conflict events. Additionally, I notice that **`bw.ppl()`** takes a significantly longer time to complete its KDE computations.\n\n-   **`bw.diggle()`** seems effective for homogeneous data in seeing **general** conflict hotspots.\n-   **`bw.ppl()`** for non-homogeneous data in analysing specific locations of **localised conflict zones**.\n-   **`bw.CvL()`** for non-homogeneous data in capturing both **localised conflicts** and the broader **conflict trends**.\n-   **`bw.scott()`** for a **fast** **overview** and aren‚Äôt focusing on small clusters or detailed variations especially when working with large datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot all bandwidth methods\"}\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \nplot(kde_conflict_bw_diggle, main = paste(\"diggle (\",optimal_bw_d,\"m)\"), col = colours)\nplot(kde_conflict_bw_ppl, main = paste(\"ppl (\",optimal_bw_p,\"m)\"), col = colours)\nplot(kde_conflict_bw_CvL, main = paste(\"CvL (\",optimal_bw_c,\"m)\"), col = colours)\nplot(kde_conflict_bw_scott, main = paste(\"scott (\",optimal_bw_s,\"m)\"), col = colours)\n```\n:::\n\n\n![](images/clipboard-3739036667.png)\n\n> üí° **Decision: I decided to use** `bw.CvL()` **for computing the KDE** of the masked ppp objects based on each quarter. As seen above, we get a relatively smooth density estimate that isn't too detailed like **`bw.ppl()`** and has a bandwidth of \\~10,000m less than **`bw.scott()`** which makes the density not as generalised. This bandwidth method is effective for the **non-homogeneous data** spread of our Myanmar conflict data and it isn't as computationally heavy as **`bw.ppl()`**.\n\n##### Putting Together our Fixed KDE\n\nNow, let us perform the KDE computation for the conflict events across all quarters using **`bw.CvL()`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate density using bw.CvL()\npar(mfrow = c(2,3), mar = c(0,0,1,0)) \nfor (quarter in names(masked_ppp_list)) {\n  ppp_obj = masked_ppp_list[[quarter]]\n  kde_conflict_bw <- density(ppp_obj,\n                             sigma=bw.CvL,\n                             edge=TRUE,\n                             kernel=\"gaussian\")\n  optimal_bw = floor(bw.CvL(ppp_obj)[[1]]*10)/10\n  plot(kde_conflict_bw, main = paste(quarter, \"(Bw:\",optimal_bw,\"m)\"), col = colours)\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-47-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-47-3.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nUsing a **fixed KDE** is beneficial for our quarterly analysis here as it ensures **consistency in bandwidth** across different time periods so we can focus on spatial distribution over time.\n\n**Density Values Range**: The density values of the output range from **0 to 0.000000002** which can be **too small to comprehend**. After some research, it appears that the default unit of measurement of EPSG:32647 is in **metres**. As such, this causes the density values computed to be in **number** **of points per square metre.**\n\n**Bandwidth Size**: A bandwidth of around **60,000 to 100,000** is considered relatively large as compared to the bandwidth returned from using **`bw.diggle()`** and **`bw.ppl()`**. Hence, this results in a **smoother density estimate** with less emphasis on local clusters as indicated in the generalised spatial trends.\n:::\n\nTo make the density values more comprehensible, we will **re-scale** the density values from metres to kilometres using¬†`rescale()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmasked_ppp_list_km = list()\n\nfor (quarter in names(masked_ppp_list)) {\n  ppp_obj <- masked_ppp_list[[quarter]]\n  ppp_obj_km <- rescale(ppp_obj, 1000, \"km\")\n  masked_ppp_list_km[[quarter]] <- ppp_obj_km\n}\n```\n:::\n\n\nNow, we can re-run the¬†**`density()`**¬†function to compute the KDE map and round the numbers to their **3rd decimal place.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2,3), mar = c(0,0,1,0)) \nfor (quarter in names(masked_ppp_list_km)) {\n  ppp_obj = masked_ppp_list_km[[quarter]]\n  kde_conflict_bw <- density(ppp_obj,\n                             sigma=bw.CvL,\n                             edge=TRUE,\n                             kernel=\"gaussian\")\n  optimal_bw = floor(bw.CvL(ppp_obj)[[1]]*1000)/1000\n  plot(kde_conflict_bw, main = paste(quarter, \"(Bw:\",optimal_bw,\"km)\"), col = colours)\n}\n```\n:::\n\n\n![](images/clipboard-2221400801.png)\n\n![](images/clipboard-2997382061.png)\n\n![](images/clipboard-3229467718.png)\n\n> üí° Notice the output image looks identical to the earlier version, the only changes are in the data values from **metres** to **kilometres** (refer to the legend).\n\n#### 5.1.2 Working with Different Kernel Methods\n\nNow, I will experiment with a variety of kernels for the **`CvL`** bandwidth method, specifically using the **2021 Q1** conflict data to assist me. I will be using these four kernel methods, namely **gaussian, epanechniko, quartic** and **disc.**\n\n::: {.callout-tip title=\"Observations\"}\nIt is of my observation that the **`CvL`** bandwidth will automatically be **defaulted to the Gaussian kernel** like most KDE implementations which causes a warning message '**Bandwidth selection will be based on Gaussian kernel'.** This means that only after the bandwidth is selected using the Gaussian kernel, the KDE calculation will perform using the non-gaussian kernel specified e.g. **`quartic`** / **`epanechniko` / `disc`**. In many cases, this still provides a reasonable estimate.\n:::\n\nWith that said, let us begin with setting up the **`ppp_obj`** taken from 2021 Q1 and run the density estimation for each kernel method to identify the most optimal for our dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \nppp_obj = masked_ppp_list$`2021 Q1`\n\n# Using the gaussian kernel\nkde_conflict_g <- density(ppp_obj,\n                           sigma=bw.CvL,\n                           edge=TRUE,\n                           kernel=\"gaussian\")\nplot(kde_conflict_g, main=\"Gaussian Kernel\", col = colours)\n\n# Using the epanechniko kernel\nkde_conflict_e <- density(ppp_obj,\n                           sigma=bw.CvL,\n                           edge=TRUE,\n                           kernel=\"epanechnikov\")\nplot(kde_conflict_e, main=\"Epanechnikov Kernel\", col = colours)\n\n# Using the quartic kernel\nkde_conflict_g <- density(ppp_obj,\n                           sigma=bw.CvL,\n                           edge=TRUE,\n                           kernel=\"quartic\")\nplot(kde_conflict_g, main=\"Quartic Kernel\", col = colours)\n\n# Using the disc kernel\nkde_conflict_e <- density(ppp_obj,\n                           sigma=bw.CvL,\n                           edge=TRUE,\n                           kernel=\"disc\")\nplot(kde_conflict_e, main=\"Disc Kernel\", col = colours)\n```\n:::\n\n\n![](images/clipboard-4016342561.png)\n\n::: {.callout-tip title=\"Observations\"}\n-   **Gaussian**: provides a **localised** density estimate over the entire spatial extent as compared to **`epanechnikov`** and **`quartic`**. It is good at **highlighting variance** and **opposing ends of conflict intensities** as shown by the wider range used in the legend.\n-   **Epanechnikov**: It is more efficient than the **`gaussian`** in terms of variance but produces a slightly rougher surface. It is also more **localised** than the **`quartic`** kernel, focusing on areas near each point, with a sharper boundary at the bandwidth limit.\n-   **Quartic**: Results in a **good balance** between smoothness and localised influence, smoother than **`epanechnikov`** but with similar properties. It appears suitable for moderate smoothing and sharper focus on local patterns.\n-   **Disc**: results in the **sharpest density estimate** as compared to the other three kernels as all points within a certain distance are made to have equal influence and zero influence beyond that distance.\n\n**Decision:** Hence, I will use the **`quartic`** kernel method to ensure a relatively smooth density estimate with emphasis on local points over distant ones.\n:::\n\nAs such, I run the density estimate computation using **`kernel = 'quartic'`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using 'quartic' kernel\npar(mfrow = c(2,3), mar = c(0,0,1,0)) \n\nfor (quarter in names(masked_ppp_list_km)) {\n  ppp_obj = masked_ppp_list_km[[quarter]]\n  kde_conflict_bw <- density(ppp_obj,\n                             sigma=bw.CvL,\n                             edge=TRUE,\n                             kernel=\"quartic\")\n  optimal_bw = floor(bw.CvL(ppp_obj)[[1]]*1000)/1000\n  plot(kde_conflict_bw, main = paste(quarter, \"(Bw:\",optimal_bw,\"km)\"), col = colours)\n}\n```\n:::\n\n\n![](images/clipboard-2221400801.png)\n\n![](images/clipboard-2997382061.png)\n\n![](images/clipboard-3229467718.png)\n\n::: {.callout-tip title=\"Observations\"}\nWe can see **high densities** of armed conflict in the **central** and **southern** regions of Myanmar but more can be uncovered from conflict data. Let's proceed to the next section.\n:::\n\n::: callout-note\nFor all subsequent fixed KDE computations, I will assign **`sigma`** using the average of the **CvL bandwidth returned** from each quarter**.** Here's the calculations based on the plots returned:\n\n**Average bandwidth size =** `61.649 + 64.386 + 74.501 + 114.08 + 103.863 + 103.863 + 95.567 + 56.757 + 57.752 + 66.968 + 49.649 + 48.135 + 48.135 + 60.323) / 14 = 71.831`\n:::\n\nLet's recompute the Fixed KDE based on the newly calculated average bandwidth such that **sigma = 71.831.** I'll store the quarterly KDE outputs into a list called **`kde_conflict_bw_list`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using sigma = 71.831\npar(mfrow = c(2,3), mar = c(0,0,1,0)) \n\n# Add KDE into this list\nkde_conflict_bw_list <- list()\nfor (quarter in names(masked_ppp_list_km)) {\n  ppp_obj = masked_ppp_list_km[[quarter]]\n  kde_conflict_bw <- density(ppp_obj,\n                             sigma=71.831,\n                             edge=TRUE,\n                             kernel=\"quartic\")\n  optimal_bw = floor(bw.CvL(ppp_obj)[[1]]*1000)/1000\n  kde_conflict_bw_list[[quarter]] <- kde_conflict_bw\n  plot(kde_conflict_bw, main = paste(quarter, \"(Bw:\",optimal_bw,\"km)\"), col = colours)\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-52-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-52-3.png){width=672}\n:::\n:::\n\n\n#### 5.1.3 Working with Adaptive KDE\n\n![](images/clipboard-3061655849.png){fig-align=\"center\" width=\"500\"}\n\nAs seen above, **fixed** bandwidths tend to **oversmooth** the mode of the distribution. On the contrary, the **adaptive** kernel estimate has the ability to **reduce variability** of estimates in areas with **low density** and **increases** it in areas with **higher density** (The Stata Journal, 2003).\n\nOnce again, let us use the **2021 Q1** conflict data to illustrate the difference in outputs of all three adaptive methods.\n\n::: panel-tabset\n**Voronoi Adaptive KDE**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set Up\nppp_obj = masked_ppp_list_km$`2021 Q1`\n\n# Using Voronoi adaptive KDE\nvd_adaptive_kde <- adaptive.density(ppp_obj, f=1, method=\"voronoi\")\n\n# Plot\npar(mar = c(0,1,1,1))\nplot(vd_adaptive_kde, main = \"Voronoi-Dirichlet Adaptive KDE\", col = colours)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n**Adaptive KDE**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using adaptive KDE\nadaptive_kde <- adaptive.density(ppp_obj, method=\"kernel\")\n\n# Plot\npar(mar = c(0,1,1,1))\nplot(adaptive_kde, main = \"Adaptive KDE\", col = colours)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n**Nearest Neighbour Adaptive KDE**\n\nI've used a relatively larger number of neighbours **(i.e. k = 10)** to provide a smoother, more general density estimate which captures broader trends and may smooth out details.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using nearest neighbour adaptive KDE\nnn_kde <- nndensity(ppp_obj, k=10)\n\n# Plot\npar(mar = c(0,1,1,1))\nplot(nn_kde, main = \"Nearest Neighbour Adaptive KDE\", col = colours)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n:::\n\nWe can also compare the performance of each method based on the **top 4** highest density **states** as highlighted earlier.\n\n::: panel-tabset\n**Voronoi Adaptive KDE**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot for Voronoi Adaptive KDE\"}\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0))\n\n# Sagaing\nconflict_sagaing <- conflict_data_sf %>%\n  filter(ST == \"Sagaing\")\nboundary_sagaing <- filter(boundary_sf, ST == \"Sagaing\")\ndistrict_boundary <- as.owin(st_as_sfc(boundary_sagaing))\nppp_obj <- as.ppp(st_geometry(conflict_sagaing), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- adaptive.density(ppp_obj, f=1, method=\"voronoi\")\nplot(kde, main = paste(\"Sagaing\"), col=colours)\n\n# Mandalay\nconflict_mandalay <- conflict_data_sf %>%\n  filter(ST == \"Mandalay\")\nboundary_mandalay <- filter(boundary_sf, ST == \"Mandalay\")\ndistrict_boundary <- as.owin(st_as_sfc(boundary_mandalay))\nppp_obj <- as.ppp(st_geometry(conflict_mandalay), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- adaptive.density(ppp_obj, f=1, method=\"voronoi\")\nplot(kde, main = paste(\"Mandalay\"), col=colours)\n\n# Magway\nconflict_magway <- conflict_data_sf %>%\n  filter(ST == \"Magway\")\nboundary_magway <- filter(boundary_sf, ST == \"Magway\")\ndistrict_boundary <- as.owin(st_as_sfc(boundary_magway))\nppp_obj <- as.ppp(st_geometry(conflict_magway), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- adaptive.density(ppp_obj, f=1, method=\"voronoi\")\nplot(kde, main = paste(\"Magway\"), col=colours)\n\n# Yangon\nconflict_yangon <- conflict_data_sf %>%\n  filter(ST == \"Yangon\")\nboundary_yangon <- filter(boundary_sf, ST == \"Yangon\")\ndistrict_boundary <- as.owin(st_as_sfc(boundary_yangon))\nppp_obj <- as.ppp(st_geometry(conflict_yangon), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- adaptive.density(ppp_obj, f=1, method=\"voronoi\")\nplot(kde, main = paste(\"Yangon\"), col=colours)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n**Adaptive KDE**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot for Adaptive KDE\"}\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0))\n\n# Sagaing\ndistrict_boundary <- as.owin(st_as_sfc(boundary_sagaing))\nppp_obj <- as.ppp(st_geometry(conflict_sagaing), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- adaptive.density(ppp_obj, method=\"kernel\")\nplot(kde, main = paste(\"Sagaing\"), col=colours)\n\n# Mandalay\ndistrict_boundary <- as.owin(st_as_sfc(boundary_mandalay))\nppp_obj <- as.ppp(st_geometry(conflict_mandalay), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- adaptive.density(ppp_obj, method=\"kernel\")\nplot(kde, main = paste(\"Mandalay\"), col=colours)\n\n# Magway\ndistrict_boundary <- as.owin(st_as_sfc(boundary_magway))\nppp_obj <- as.ppp(st_geometry(conflict_magway), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- adaptive.density(ppp_obj, method=\"kernel\")\nplot(kde, main = paste(\"Magway\"), col=colours)\n\n# Yangon\ndistrict_boundary <- as.owin(st_as_sfc(boundary_yangon))\nppp_obj <- as.ppp(st_geometry(conflict_yangon), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- adaptive.density(ppp_obj, method=\"kernel\")\nplot(kde, main = paste(\"Yangon\"), col=colours)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n**Nearest Neighbour Adaptive KDE**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot for NN Adaptive KDE\"}\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0))\n\n# Sagaing\ndistrict_boundary <- as.owin(st_as_sfc(boundary_sagaing))\nppp_obj <- as.ppp(st_geometry(conflict_sagaing), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- nndensity(ppp_obj, k=10)\nplot(kde, main = paste(\"Sagaing\"), col=colours)\n\n# Mandalay\ndistrict_boundary <- as.owin(st_as_sfc(boundary_mandalay))\nppp_obj <- as.ppp(st_geometry(conflict_mandalay), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- nndensity(ppp_obj, k=10)\nplot(kde, main = paste(\"Mandalay\"), col=colours)\n\n# Magway\ndistrict_boundary <- as.owin(st_as_sfc(boundary_magway))\nppp_obj <- as.ppp(st_geometry(conflict_magway), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- nndensity(ppp_obj, k=10)\nplot(kde, main = paste(\"Magway\"), col=colours)\n\n# Yangon\ndistrict_boundary <- as.owin(st_as_sfc(boundary_yangon))\nppp_obj <- as.ppp(st_geometry(conflict_yangon), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\nkde <- nndensity(ppp_obj, k=10)\nplot(kde, main = paste(\"Yangon\"), col=colours)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n:::\n\n**Comparing the three Adaptive KDE Types**\n\nFrom the outputs above, it appears that there is no major differences between the distribution of KDE values returned across the three methods, where there is high concentration of points in a specific area. Hence, we will choose to go with¬†`Adapative Kernel`¬†method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,2,2,2),mfrow = c(3,1))\nhist(vd_adaptive_kde,main = \"Voronoi-Dirichlet Adaptive\")\nhist(adaptive_kde,main = \"Adaptive Kernel\")\nhist(nn_kde,main = \"Nearest-Neighbour Adaptive\")\n```\n:::\n\n\n![](images/clipboard-3272856398.png)\n\n**Let's compare the results of my two selected fixed and adaptive KDEs (E.g. Magway District)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,2), mar = c(0,0,1,0))\ndistrict_boundary <- as.owin(st_as_sfc(boundary_magway))\nppp_obj <- as.ppp(st_geometry(conflict_magway), W = district_boundary)\nppp_obj <- rescale(ppp_obj, 1000, \"km\")\n\nkde_fixed <- density(ppp_obj, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\")\nplot(kde_fixed, main = paste(\"Fixed KDE (CvL | quartic)\"), col = colours)\nkde_adaptive <- adaptive.density(ppp_obj, method=\"kernel\")\nplot(kde_adaptive, main = paste(\"Adaptive KDE (Kernel)\"), col=colours)\n```\n:::\n\n\n![](images/clipboard-263685601.png)\n\n> We can observe how **adaptive kernels** provides a **more detailed** picture of conflict spatial distribution but since it's largely localised, conflict spots require more effort in identifying and can be **computationally heavy** for this exercise.\n>\n> Additionally, **varying bandwidth** makes comparisons across **regions** or **time** **periods** (like quarters) **more difficult** because the scale of smoothing is not constant across space and time.\n\n#### 5.1.5 **Converting Gridded KDE Output into Raster**\n\nNext, we need to convert the KDE output to KDE raster layers before it can be viewed using **`tmap`**.\n\n**Step 1) Converting KDE to Spatial Grid Data Frame**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(grid)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'grid'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:spatstat.geom':\n\n    as.mask\n```\n\n\n:::\n\n```{.r .cell-code}\nplot_list <- list()\nfor (quarter in names(kde_conflict_bw_list)) {\n  ppp_obj <- kde_conflict_bw_list[[quarter]]\n  gridded_ppp_obj <- as(ppp_obj, \"SpatialGridDataFrame\")\n  plot_list[[quarter]] <- spplot(gridded_ppp_obj, main = paste(quarter), col.regions = colours)\n}\n\nlibrary(gridExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'gridExtra'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    combine\n```\n\n\n:::\n\n```{.r .cell-code}\nplot_list_subset1 <- plot_list[1:6]\nplot_list_subset2 <- plot_list[7:12]\nplot_list_subset3 <- plot_list[13:14]\ngrid.newpage()\ngrid.arrange(grobs = plot_list_subset1, ncol = 3, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngrid.newpage() \ngrid.arrange(grobs = plot_list_subset2, ncol = 3, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-61-2.png){width=672}\n:::\n\n```{.r .cell-code}\ngrid.newpage()\ngrid.arrange(grobs = plot_list_subset3, ncol = 3, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-61-3.png){width=672}\n:::\n:::\n\n\n**Step 2) Rasterisation of Grid Outputs & Assigning Projection Systems**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_ppp_obj_raster_list <- list()\nfor (quarter in names(kde_conflict_bw_list)) {\n  gridded_ppp_obj = kde_conflict_bw_list[[quarter]]\n  gridded_ppp_obj_raster <- raster(gridded_ppp_obj)\n  projection(gridded_ppp_obj_raster) <- CRS(\"+init=EPSG:32647\")\n  gridded_ppp_obj_raster_list[[quarter]] <- gridded_ppp_obj_raster\n}\n\n# Inspect for 2024 Q2\ngridded_ppp_obj_raster_list$`2024 Q2`\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 7.302001, 16.30032  (x, y)\nextent     : -210.0086, 724.6476, 1072.026, 3158.467  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : 7.061861e-06, 0.01847887  (min, max)\n```\n\n\n:::\n:::\n\n\n**Step 3) Plot Maps**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nplots_by_quarter <- list()\nfor (quarter in names(gridded_ppp_obj_raster_list)){\n  gridded_ppp_obj_raster = gridded_ppp_obj_raster_list[[quarter]]\n  raster_plot <- tm_shape(gridded_ppp_obj_raster) +\n    tm_raster(\"layer\", title=\"Density\", palette=\"Blues\") +\n    tm_layout(legend.position = c(\"left\",\"bottom\"),frame=FALSE, main.title = quarter,\n            main.title.size=1, main.title.position = \"center\", legend.text.size = 0.5,legend.title.size = 0.7) \n  plots_by_quarter[[quarter]] <- raster_plot\n}\n\ntmap_arrange(plots_by_quarter[1:14], ncol=5, nrow=3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.3, 0.3, 0.3, 0.3, 0.3, 0.3. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nPlotting raster grid versions of KDE outputs uses discrete colour ranges which does a good job in highlighting gradual changes in conflict events across an area. Since 2021 Q2, more conflicts are seen in Southern parts of Myanmar. The density range differs for each quarter but we can see an increase in no. of armed conflicts per kilometre from 2021 Q1 to 2022 Q2, which stagnates in density and increases again in 2023 Q4.\n:::\n\n### 5.2 Nearest Neighbour Analysis\n\nOur current analyses does not reveal patterns of clustering or dispersion, to which Michael J. Crawley proposes to employ **Clark-Evans** **test** spatial randomness for its simplicity and applicability for **first-order spatial analysis**, which means checking for overall spatial randomness based on nearest-neighbor distances. (Crawley M. J. , 2007)\n\n![](images/clipboard-1436160892.png){fig-align=\"center\" width=\"386\"}\n\n**Clark-Evans Test**\n\nThe test checks whether the observed point pattern of armed conflicts in Myanmar shows **clustering** (points are closer than expected under randomness), **dispersion** (points are more spread out), or **randomness**.\n\n**The test hypotheses are:**\n\n-   **Ho** = The distribution of armed conflicts in Myanmar are randomly distributed.\n-   **H1**= The distribution of armed conflicts in Myanmar are not randomly distributed.\n-   The **95%** confident interval will be used.\n\nWe will conduct the test using [clarkevans.test()](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (quarter in names(masked_ppp_list_km)) {\n  ppp_obj = masked_ppp_list_km[[quarter]]\n  print(quarter)\n  print(clarkevans.test(ppp_obj,\n                  correction=\"none\",\n                  clipregion=\"boundary_sf\",\n                  alternative=c(\"clustered\"),\n                  nsim=99))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024 Q2\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.26663, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2024 Q1\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.23563, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2023 Q4\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.21795, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2023 Q3\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.22002, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2023 Q2\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.24485, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2023 Q1\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.24365, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2022 Q4\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.22139, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2022 Q3\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.23974, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2022 Q2\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.22989, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2022 Q1\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.21976, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2021 Q4\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.21341, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2021 Q3\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.21808, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2021 Q2\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.17458, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n[1] \"2021 Q1\"\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  ppp_obj\nR = 0.24696, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nFor a 95% confidence level, If the **p-value \\< 0.05**, I will **reject** **the null hypothesis** of complete spatial randomness and **check if data is uniform (R \\> 1)** or **clustered (R \\< 1).**\n\nWith that said, all tests conducted across each quarter **rejects the null hypothesis** as **p \\< 0.05** and spatial points are found to be **clustered** since **R \\< 1**.\n:::\n\n### 5.3 Further Data Exploration\n\nBy using the fixed KDE with CvL bandwidth and quartic kernel, let's see what insights can we glean from the density of conflicts in Myanmar.\n\n#### 5.3.1 KDE by *Event Type*\n\nFirst, let's identify the unique event types in this dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check unique events\nunique(conflict_data_sf$event_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Battles\"                    \"Strategic developments\"    \n[3] \"Violence against civilians\" \"Explosions/Remote violence\"\n```\n\n\n:::\n:::\n\n\nNow, let us analyse the kernel density estimate of each unique event type found in **`conflict_data_sf`** to identify hot and cold spots across Myanmar.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot the KDE based on Event Type\"}\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \n\nconflict_data_sf %>%\n  group_by(event_type) %>%\n  group_split() -> conflict_by_event_type\n\n# Convert the sf object to owin\ndistrict_boundary <- as.owin(st_as_sfc(boundary_sf))\n\nkde_list <- lapply(seq_along(conflict_by_event_type), function(i) {\n  data <- conflict_by_event_type[[i]]\n  event_type <- unique(data$event_type)\n  ppp_obj <- as.ppp(st_geometry(data), W = district_boundary)\n  ppp_obj <- rescale(ppp_obj, 1000, \"km\")\n  kde <- density(ppp_obj,\n                 sigma=71.831,\n                 edge=TRUE,\n                 kernel=\"quartic\")\n  plot(kde, main = paste(event_type), col=colours)\n  return(kde)\n})\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 3 points were rejected as lying outside the specified window\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: data contain duplicated points\nWarning: data contain duplicated points\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 1 point was rejected as lying outside the specified window\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: data contain duplicated points\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 3 points were rejected as lying outside the specified window\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: data contain duplicated points\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n\n![](images/clipboard-80379057.png)\n\n::: {.callout-tip title=\"Observations\"}\nWe can almost see an equal spread of all four event types, with **battles** being more dominantly found in **Central** **Myanmar**, followed by strategic developments and violence against citizens.\n:::\n\n#### 5.3.2 KDE Across Top 4 States With Most Conflicts\n\nPreviously, we identified the **top 4** **states** with the highest proportions of conflicts as Sagaing, Mandalay, Magway and Yangon. We can delve deeper into each state by **analysing the intensity of conflicts** across these states using **`density()`**.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot the KDE of Top 4 States\"}\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0))\n\n# Sagaing\ndistrict_boundary <- as.owin(st_as_sfc(boundary_sagaing))\nppp_obj <- as.ppp(st_geometry(conflict_sagaing), W = district_boundary)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: data contain duplicated points\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot the KDE of Top 4 States\"}\nppp_obj_sagaing <- rescale(ppp_obj, 1000, \"km\")\nkde <- density(ppp_obj_sagaing,\n               sigma=71.831,\n               edge=TRUE,\n               kernel=\"quartic\")\nplot(kde, main = paste(\"Sagaing\"), col=colours)\n\n# Mandalay\ndistrict_boundary <- as.owin(st_as_sfc(boundary_mandalay))\nppp_obj <- as.ppp(st_geometry(conflict_mandalay), W = district_boundary)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: data contain duplicated points\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot the KDE of Top 4 States\"}\nppp_obj_mandalay <- rescale(ppp_obj, 1000, \"km\")\nkde <- density(ppp_obj_mandalay,\n               sigma=71.831,\n               edge=TRUE,\n               kernel=\"quartic\")\nplot(kde, main = paste(\"Mandalay\"), col=colours)\n\n# Magway\ndistrict_boundary <- as.owin(st_as_sfc(boundary_magway))\nppp_obj <- as.ppp(st_geometry(conflict_magway), W = district_boundary)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: data contain duplicated points\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot the KDE of Top 4 States\"}\nppp_obj_magway <- rescale(ppp_obj, 1000, \"km\")\nkde <- density(ppp_obj_magway,\n               sigma=71.831,\n               edge=TRUE,\n               kernel=\"quartic\")\nplot(kde, main = paste(\"Magway\"), col=colours)\n\n# Yangon\ndistrict_boundary <- as.owin(st_as_sfc(boundary_yangon))\nppp_obj <- as.ppp(st_geometry(conflict_yangon), W = district_boundary)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: data contain duplicated points\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot the KDE of Top 4 States\"}\nppp_obj_yangon <- rescale(ppp_obj, 1000, \"km\")\nkde <- density(ppp_obj_yangon,\n               sigma=71.831,\n               edge=TRUE,\n               kernel=\"quartic\")\nplot(kde, main = paste(\"Yangon\"), col=colours)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\nIt's interesting that armed conflict isn't evenly distributed across the states though it does seem that **armed conflict** has **inflicted the entire state of Yangon.** Nonetheless, it is worth noting that Yangon is **relatively smaller in size** than the other three states and that will **increase** the density of conflict **quite significantly.**\n:::\n\n#### 5.3.3 KDE of Top 4 States by *Event Type*\n\nIt'll also be interesting to breakdown each top 4 state **by the event type** category as shown.\n\n::: panel-tabset\n**Sagaing**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot the KDE for Sagaing by Event Type\"}\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \n\nconflict_sagaing %>%\n  group_by(event_type) %>%\n  group_split() -> conflict_by_event_type\n\n# Convert the sf object to owin\ndistrict_boundary <- as.owin(st_as_sfc(boundary_sagaing))\n\nkde_list <- lapply(seq_along(conflict_by_event_type), function(i) {\n  data <- conflict_by_event_type[[i]]\n  event_type <- unique(data$event_type)\n  ppp_obj <- as.ppp(st_geometry(data), W = district_boundary)\n  ppp_obj <- rescale(ppp_obj, 1000, \"km\")\n  kde <- density(ppp_obj,\n                 sigma=71.831,\n                 edge=TRUE,\n                 kernel=\"quartic\")\n  plot(kde, main = paste(\"Sagaing - \",event_type), col=colours)\n  return(kde)\n})\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n:::\n\n\n**Mandalay**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot the KDE for Mandalay by Event Type\"}\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \n\nconflict_mandalay %>%\n  group_by(event_type) %>%\n  group_split() -> conflict_by_event_type\n\n# Convert the sf object to owin\ndistrict_boundary <- as.owin(st_as_sfc(boundary_mandalay))\n\nkde_list <- lapply(seq_along(conflict_by_event_type), function(i) {\n  data <- conflict_by_event_type[[i]]\n  event_type <- unique(data$event_type)\n  ppp_obj <- as.ppp(st_geometry(data), W = district_boundary)\n  ppp_obj <- rescale(ppp_obj, 1000, \"km\")\n  kde <- density(ppp_obj,\n                 sigma=71.831,\n                 edge=TRUE,\n                 kernel=\"quartic\")\n  plot(kde, main = paste(\"Mandalay - \",event_type), col=colours)\n  return(kde)\n})\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\n**Magway**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot the KDE for Magway by Event Type\"}\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \n\nconflict_magway %>%\n  group_by(event_type) %>%\n  group_split() -> conflict_by_event_type\n\n# Convert the sf object to owin\ndistrict_boundary <- as.owin(st_as_sfc(boundary_magway))\n\nkde_list <- lapply(seq_along(conflict_by_event_type), function(i) {\n  data <- conflict_by_event_type[[i]]\n  event_type <- unique(data$event_type)\n  ppp_obj <- as.ppp(st_geometry(data), W = district_boundary)\n  ppp_obj <- rescale(ppp_obj, 1000, \"km\")\n  kde <- density(ppp_obj,\n                 sigma=71.831,\n                 edge=TRUE,\n                 kernel=\"quartic\")\n  plot(kde, main = paste(\"Magway - \",event_type), col=colours)\n  return(kde)\n})\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\n**Yangon**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plot the KDE for Yangon by Event Type\"}\n# Set Up\npar(mfrow = c(2,2), mar = c(0,0,1,0)) \n\nconflict_yangon %>%\n  group_by(event_type) %>%\n  group_split() -> conflict_by_event_type\n\n# Convert the sf object to owin\ndistrict_boundary <- as.owin(st_as_sfc(boundary_yangon))\n\nkde_list <- lapply(seq_along(conflict_by_event_type), function(i) {\n  data <- conflict_by_event_type[[i]]\n  event_type <- unique(data$event_type)\n  ppp_obj <- as.ppp(st_geometry(data), W = district_boundary)\n  ppp_obj <- rescale(ppp_obj, 1000, \"km\")\n  kde <- density(ppp_obj,\n                 sigma=71.831,\n                 edge=TRUE,\n                 kernel=\"quartic\")\n  plot(kde, main = paste(\"Yangon - \",event_type), col=colours)\n  return(kde)\n})\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.callout-tip title=\"Observations\"}\nThe kernel density of **violence against civillians** is generally found to be the **lowest** amongst all conflict events. Additionally, all types of armed conflicts tend to **occur repeatedly** in the **same parts of each state.** E.g. conflicts regarding strategic development tend to happen in Southern part of the Sagaing state, just as it is for explosions/remote violence.\n:::\n\n## 6. 2nd Order Spatial Point Patterns Analysis\n\nUnlike 1st-order analysis, which studies the intensity of points (e.g., density), let's also leverage 2nd-order analysis to examine how points are distributed relative to each other, which can offer deeper insights into the spatial interaction between events.\n\nI will use the K-function and L-function is to understand the spatial relationships between events, particularly focusing on whether the points exhibit clustering, uniformity, or randomness.\n\n### 6.1 Using K-Function Estimation\n\n**K-function** helps detect spatial patterns by comparing the observed distribution of points against a random pattern at different distances.\n\n#### **6.1.1 Yinmarbin District**\n\n**1) Computing K-Function Estimation**\n\nFor Yinmarbin district, let's compute K-function estimates by using **`Kest()`** of the **spatstat** package.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Prepare Dataset for Yinmarbin District\"}\nconflict_yinmarbin = filter(conflict_data_sf, DT == \"Yinmarbin\")\nboundary_yinmarbin <- filter(boundary_sf, DT == \"Yinmarbin\")\nyinmarbin_owin <- as.owin(boundary_yinmarbin)\n\n# Create a combined ppp and owin object\nppp_obj <- as.ppp(conflict_yinmarbin$geometry)\nmasked_ppp <- ppp_obj[yinmarbin_owin]\nyinmarbin_ppp_owin <- rescale(masked_ppp, 1000, \"km\")\n```\n:::\n\n\nWe are now ready to plot the K-function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_ck = Kest(yinmarbin_ppp_owin, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\",\n       main = paste(\"Yinmarbin District (K-Function)\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\n**How to interpret the plot:**\n\n-   **K-iso** represents the observed or estimated K-function value calculated from the actual data\n-   **K-pois** is the theoretical K-function that represents the expected K-function\n\n**With that said...**\n\nWe can observe how the **observed line (K-iso)** is constantly above the **theoretical line** from **2021 Q2 to 2024 Q2**. This confirms that conflict points in **Yinmarbin** are **highly clustered**. In fact, it is more clustered together than expected by the null hypothesis.\n\nHowever, we do not have any conflict points in **2021 Q1**\n\n**Note:** Since I had used the default **`edge = TRUE`** settings, edge correction will account for missing neighbours outside the boundary which helps maintain an accurate estimate of the K-function.\n:::\n\n**2) Performing Complete Spatial Randomness Test**\n\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted. The hypothesis and test are as follows:\n\n-   **Ho** = The distribution of conflict events in Myanmar are randomly distributed.\n-   **H1**= The distribution of conflict events in Myanmar are not randomly distributed.\n-   The null hypothesis will be rejected if **p-value is smaller** than **alpha value of 0.001**.\n\nBy using **`envelop()`**, we can get a more robust interpretation by comparing the observed K-function against a simulation envelope of K-functions generated under the null hypothesis.\n\n::: callout-note\nTo achieve a **95% confidence envelope** in a K-function test with **Complete Spatial Randomness,** I will need to exclude the upper 2.5% and lower 2.5% of the simulated K-functions., i.e. I will need to generate **at least** **40 simulations** where **`nsim = 39`**.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Monte Carlo test with K-function\nK_ck.csr <- envelope(yinmarbin_ppp_owin, Kest, \n                     nsim = 39, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 39 simulations of CSR  ...\n1, 2, \n[29:43 remaining, estimate finish 2024-09-16 19:42:45]\n3, \n[27:46 remaining, estimate finish 2024-09-16 19:41:32]\n4, \n[27:03 remaining, estimate finish 2024-09-16 19:41:35]\n5, \n[25:53 remaining, estimate finish 2024-09-16 19:41:09]\n6, \n[25:05 remaining, estimate finish 2024-09-16 19:41:06]\n7, \n[24:32 remaining, estimate finish 2024-09-16 19:41:21]\n8, \n[24:01 remaining, estimate finish 2024-09-16 19:41:39]\n9, \n[23:11 remaining, estimate finish 2024-09-16 19:41:36]\n10, \n[22:19 remaining, estimate finish 2024-09-16 19:41:27]\n11, \n[21:31 remaining, estimate finish 2024-09-16 19:41:25]\n12, \n[20:53 remaining, estimate finish 2024-09-16 19:41:37]\n13, \n[20:04 remaining, estimate finish 2024-09-16 19:41:32]\n14, \n[19:22 remaining, estimate finish 2024-09-16 19:41:40]\n15, \n[18:34 remaining, estimate finish 2024-09-16 19:41:37]\n16, \n[17:49 remaining, estimate finish 2024-09-16 19:41:40]\n17, \n[17:00 remaining, estimate finish 2024-09-16 19:41:35]\n18, \n[16:19 remaining, estimate finish 2024-09-16 19:41:44]\n19, \n[15:32 remaining, estimate finish 2024-09-16 19:41:44]\n20, \n[14:43 remaining, estimate finish 2024-09-16 19:41:39]\n21, \n[13:57 remaining, estimate finish 2024-09-16 19:41:40]\n22, \n[13:10 remaining, estimate finish 2024-09-16 19:41:39]\n23, \n[12:22 remaining, estimate finish 2024-09-16 19:41:36]\n24, \n[11:35 remaining, estimate finish 2024-09-16 19:41:34]\n25, \n[10:49 remaining, estimate finish 2024-09-16 19:41:35]\n26, \n[10:03 remaining, estimate finish 2024-09-16 19:41:37]\n27,  [9:17 remaining] 28,  [8:31 remaining] 29,  [7:44 remaining] 30,  [6:57 remaining] 31,  [6:15 remaining] 32,  [5:32 remaining] 33,  [4:46 remaining] 34,  [3:59 remaining] 35,  [3:12 remaining] 36,  [2:26 remaining] 37,  [1:39 remaining] 38,  [49 sec remaining] \n39.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(K_ck.csr, main = paste(\"Yinmarbin District (CSR)\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\n:::\n\n#### **6.1.2 Shwebo District**\n\n**1) Computing K-Function Estimation**\n\nFor Shwebo district, let's compute K-function estimates by using **`Kest()`** of the **spatstat** package.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Prepare Dataset for Shwebo District\"}\nconflict_shwebo = filter(conflict_data_sf, DT == \"Shwebo\")\nboundary_shwebo <- filter(boundary_sf, DT == \"Shwebo\")\nshwebo_owin <- as.owin(boundary_shwebo)\n\n# Create a combined ppp and owin object\nppp_obj <- as.ppp(conflict_shwebo$geometry)\nmasked_ppp <- ppp_obj[shwebo_owin]\nshwebo_ppp_owin <- rescale(masked_ppp, 1000, \"km\")\n```\n:::\n\n\nWe are now ready to plot the K-function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_ck = Kest(shwebo_ppp_owin, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\",\n       main = paste(\"Shwebo District (K-Function)\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\n:::\n\n**2) Performing Complete Spatial Randomness Test**\n\nTo confirm the observed spatial patterns above, a hypothesis test (i.e. Monta Carlo simulation test) will be conducted. The hypothesis and test are as follows:\n\n-   **Ho** = The distribution of conflict events in Myanmar are randomly distributed.\n-   **H1**= The distribution of conflict events in Myanmar are not randomly distributed.\n-   The null hypothesis will be rejected if **p-value is smaller** than **alpha value of 0.001**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Monte Carlo test with K-function\nK_ck.csr <- envelope(shwebo_ppp_owin, Kest, \n                     nsim = 39, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 39 simulations of CSR  ...\n1, 2, \n[2:02:05 remaining, estimate finish 2024-09-16 22:02:05]\n3, \n[2:05:33 remaining, estimate finish 2024-09-16 22:09:13]\n4, \n[2:01:07 remaining, estimate finish 2024-09-16 22:08:12]\n5, \n[1:56:04 remaining, estimate finish 2024-09-16 22:06:26]\n6, \n[1:55:29 remaining, estimate finish 2024-09-16 22:09:41]\n7, \n[1:59:33 remaining, estimate finish 2024-09-16 22:18:39]\n8, \n[1:58:01 remaining, estimate finish 2024-09-16 22:21:21]\n9, \n[1:52:50 remaining, estimate finish 2024-09-16 22:19:37]\n10, \n[1:51:44 remaining, estimate finish 2024-09-16 22:23:06]\n11, \n[1:48:46 remaining, estimate finish 2024-09-16 22:24:19]\n12, \n[1:47:49 remaining, estimate finish 2024-09-16 22:28:27]\n13, \n[1:43:52 remaining, estimate finish 2024-09-16 22:28:30]\n14, \n[1:38:23 remaining, estimate finish 2024-09-16 22:26:15]\n15, \n[1:33:19 remaining, estimate finish 2024-09-16 22:24:27]\n16, \n[1:28:26 remaining, estimate finish 2024-09-16 22:22:49]\n17, \n[1:23:52 remaining, estimate finish 2024-09-16 22:21:33]\n18, \n[1:19:50 remaining, estimate finish 2024-09-16 22:21:09]\n19, \n[1:15:26 remaining, estimate finish 2024-09-16 22:20:01]\n20, \n[1:11:13 remaining, estimate finish 2024-09-16 22:19:08]\n21, \n[1:07:06 remaining, estimate finish 2024-09-16 22:18:22]\n22, \n[1:03:09 remaining, estimate finish 2024-09-16 22:17:52]\n23, \n[59:12 remaining, estimate finish 2024-09-16 22:17:18]\n24, \n[55:18 remaining, estimate finish 2024-09-16 22:16:47]\n25, \n[51:20 remaining, estimate finish 2024-09-16 22:16:03]\n26, \n[47:30 remaining, estimate finish 2024-09-16 22:15:33]\n27, \n[44:13 remaining, estimate finish 2024-09-16 22:16:44]\n28, \n[40:37 remaining, estimate finish 2024-09-16 22:17:02]\n29, \n[36:47 remaining, estimate finish 2024-09-16 22:16:30]\n30, \n[33:04 remaining, estimate finish 2024-09-16 22:16:17]\n31, \n[29:16 remaining, estimate finish 2024-09-16 22:15:43]\n32, \n[25:32 remaining, estimate finish 2024-09-16 22:15:18]\n33, \n[21:50 remaining, estimate finish 2024-09-16 22:15:02]\n34, \n[18:07 remaining, estimate finish 2024-09-16 22:14:23]\n35, \n[14:26 remaining, estimate finish 2024-09-16 22:13:51]\n36, \n[10:46 remaining, estimate finish 2024-09-16 22:13:08]\n37,  [7:08 remaining] 38,  [3:33 remaining] \n39.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(K_ck.csr, main = paste(\"Shwebo District (CSR)\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\n:::\n\n### 6.2 Using L-Function Estimation\n\nIn this section, I will be computing L-function via [Lest()](#0) of **spatstat** package which is normalises the K-function to a linear scale for easier interpretation.\n\n#### **6.2.1 Yinmarbin District**\n\n**1) Computing L-function Estimation**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_ck = Lest(yinmarbin_ppp_owin, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\",\n     main = paste(\"Yinmarbin District (L-Function)\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\n:::\n\n**2) Performing Complete Spatial Randomness Test**\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\n-   **Ho** = The distribution of conflict events in Myanmar are randomly distributed.\n-   **H1**= The distribution of conflict events in Myanmar are not randomly distributed.\n-   The null hypothesis will be rejected if **p-value is smaller** than **alpha value of 0.001**.\n\nI will also perform monta carlo simulation test using **`envelope()`** of the¬†**spatstat**¬†package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Monte Carlo test with L-function\nL_ck.csr <- envelope(yinmarbin_ppp_owin, Lest, \n                     nsim = 39, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 39 simulations of CSR  ...\n1, 2, \n[26:56 remaining, estimate finish 2024-09-16 22:43:13]\n3, \n[25:21 remaining, estimate finish 2024-09-16 22:42:18]\n4, \n[24:56 remaining, estimate finish 2024-09-16 22:42:38]\n5, \n[24:28 remaining, estimate finish 2024-09-16 22:42:53]\n6, \n[24:22 remaining, estimate finish 2024-09-16 22:43:36]\n7, \n[24:41 remaining, estimate finish 2024-09-16 22:44:51]\n8, \n[23:30 remaining, estimate finish 2024-09-16 22:44:21]\n9, \n[22:50 remaining, estimate finish 2024-09-16 22:44:29]\n10, \n[22:19 remaining, estimate finish 2024-09-16 22:44:48]\n11, \n[21:28 remaining, estimate finish 2024-09-16 22:44:41]\n12, \n[21:13 remaining, estimate finish 2024-09-16 22:45:25]\n13, \n[20:43 remaining, estimate finish 2024-09-16 22:45:49]\n14, \n[19:47 remaining, estimate finish 2024-09-16 22:45:37]\n15, \n[18:48 remaining, estimate finish 2024-09-16 22:45:18]\n16, \n[17:58 remaining, estimate finish 2024-09-16 22:45:15]\n17, \n[17:08 remaining, estimate finish 2024-09-16 22:45:08]\n18, \n[16:26 remaining, estimate finish 2024-09-16 22:45:17]\n19, \n[15:36 remaining, estimate finish 2024-09-16 22:45:12]\n20, \n[14:47 remaining, estimate finish 2024-09-16 22:45:08]\n21, \n[13:56 remaining, estimate finish 2024-09-16 22:44:58]\n22, \n[13:07 remaining, estimate finish 2024-09-16 22:44:53]\n23, \n[12:19 remaining, estimate finish 2024-09-16 22:44:48]\n24, \n[11:30 remaining, estimate finish 2024-09-16 22:44:40]\n25, \n[10:40 remaining, estimate finish 2024-09-16 22:44:30]\n26,  [9:56 remaining] 27,  [9:12 remaining] 28,  [8:30 remaining] 29,  [7:44 remaining] 30,  [6:56 remaining] 31,  [6:10 remaining] 32,  [5:23 remaining] 33,  [4:36 remaining] 34,  [3:49 remaining] 35,  [3:03 remaining] 36,  [2:17 remaining] 37,  [1:31 remaining] 38,  [45 sec remaining] \n39.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\",\n       main = paste(\"Yinmarbin District (CSR)\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-79-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\n:::\n\n#### **6.2.2 Shwebo District**\n\n**1) Computing L-function Estimation**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_ck = Lest(shwebo_ppp_owin, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\",\n     main = paste(\"Shwebo District (L-Function)\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\n:::\n\n**2) Performing Complete Spatial Randomness Test**\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\n-   **Ho** = The distribution of conflict events in Myanmar are randomly distributed.\n-   **H1**= The distribution of conflict events in Myanmar are not randomly distributed.\n-   The null hypothesis will be rejected if **p-value is smaller** than **alpha value of 0.001**.\n\nI will also perform monta carlo simulation test using **`envelope()`** of the¬†**spatstat**¬†package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Monte Carlo test with L-function\nL_ck.csr <- envelope(shwebo_ppp_owin, Lest, \n                     nsim = 39, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 39 simulations of CSR  ...\n1, 2, \n[1:48:44 remaining, estimate finish 2024-09-17 00:47:43]\n3, \n[1:45:47 remaining, estimate finish 2024-09-17 00:47:42]\n4, \n[1:44:19 remaining, estimate finish 2024-09-17 00:49:18]\n5, \n[1:42:10 remaining, estimate finish 2024-09-17 00:50:13]\n6, \n[1:39:51 remaining, estimate finish 2024-09-17 00:51:02]\n7, \n[1:36:04 remaining, estimate finish 2024-09-17 00:50:07]\n8, \n[1:32:40 remaining, estimate finish 2024-09-17 00:49:39]\n9, \n[1:29:28 remaining, estimate finish 2024-09-17 00:49:23]\n10, \n[1:26:25 remaining, estimate finish 2024-09-17 00:49:16]\n11, \n[1:23:13 remaining, estimate finish 2024-09-17 00:48:59]\n12, \n[1:19:49 remaining, estimate finish 2024-09-17 00:48:22]\n13, \n[1:16:41 remaining, estimate finish 2024-09-17 00:48:06]\n14, \n[1:13:34 remaining, estimate finish 2024-09-17 00:47:51]\n15, \n[1:10:30 remaining, estimate finish 2024-09-17 00:47:40]\n16, \n[1:07:38 remaining, estimate finish 2024-09-17 00:47:47]\n17, \n[1:04:40 remaining, estimate finish 2024-09-17 00:47:44]\n18, \n[1:01:53 remaining, estimate finish 2024-09-17 00:48:02]\n19, \n[59:01 remaining, estimate finish 2024-09-17 00:48:11]\n20, \n[56:06 remaining, estimate finish 2024-09-17 00:48:15]\n21, \n[53:00 remaining, estimate finish 2024-09-17 00:47:57]\n22, \n[50:06 remaining, estimate finish 2024-09-17 00:48:02]\n23, \n[47:11 remaining, estimate finish 2024-09-17 00:48:07]\n24, \n[44:20 remaining, estimate finish 2024-09-17 00:48:22]\n25, \n[41:26 remaining, estimate finish 2024-09-17 00:48:30]\n26, \n[38:32 remaining, estimate finish 2024-09-17 00:48:42]\n27, \n[35:31 remaining, estimate finish 2024-09-17 00:48:30]\n28, \n[32:34 remaining, estimate finish 2024-09-17 00:48:31]\n29, \n[29:34 remaining, estimate finish 2024-09-17 00:48:24]\n30, \n[26:37 remaining, estimate finish 2024-09-17 00:48:25]\n31, \n[23:39 remaining, estimate finish 2024-09-17 00:48:21]\n32, \n[20:39 remaining, estimate finish 2024-09-17 00:48:10]\n33, \n[17:43 remaining, estimate finish 2024-09-17 00:48:14]\n34, \n[14:44 remaining, estimate finish 2024-09-17 00:48:02]\n35, \n[11:47 remaining, estimate finish 2024-09-17 00:47:56]\n36,  [8:51 remaining] 37,  [5:55 remaining] 38,  [2:58 remaining] \n39.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\",\n       main = paste(\"Shwebo District (CSR)\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1_files/figure-html/unnamed-chunk-81-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip title=\"Observations\"}\n:::\n\n## 7. Spatio-Tempmoral KDE\n\nWe focus on the continuous time\n\n## References\n\nCrawley, M. J. (2007). The R Book. Wiley.\n\nThe Stata Journal. (2003). Adaptive kernel density estimation. Sage Journals. [https://journals.sagepub.com/doi/pdf/10.1177/1536867X0300300204](https://journals.sagepub.com/doi/pdf/10.1177/1536867X0300300204https://journals.sagepub.com/doi/pdf/10.1177/1536867X0300300204)\n",
    "supporting": [
      "Take-home_Ex1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}