{
  "hash": "8df2b9f95fce8244658b0b75b9a72d1a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 2\"\nsubtitle: \"Choropleth Mapping and GeoVisualisation with R\"\nauthor: \"Foo Jia Yi Samantha\"\ndate-modified: \"August 22, 2024\"\ndate: \"August 22, 2024\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n```{=html}\n<button>Hands-on Exercise</button> <button>R</button> <button>sf</button> <button>tmap</button>\n```\n\n## 1. Getting Started\n\n**Thematic mapping** involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices.\n\n**Geovisualisation** works by providing graphical ideation to render a place, phenomenon or a process.\n\nIn this hands-on exercise, I will learn how to plot functional and truthful **chloropleth maps** by using the **`tmap` R package.** The output of this exercise should look like thisL\n\n![](images/clipboard-2118003926.png)\n\n## 2. Let's Set Up!\n\n### 2.1 Importing Libraries into R\n\nIn this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R, alongside these four other R packages:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.\n\n> Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package. Hence, we will only need to install the **tidyverse** package.\n\nNow, let's install and load these packages in RStudio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n### 2.2 Download Data and Set Up Folders\n\nWe will be using two data sets to create the choropleth maps\n\n**1) Master Plan 2014 Subzone Boundary (Web)**: geospatial data consisting of the geographical boundary of Singapore at the planning subzone level.\n\nüìÖ The data is based on URA Master Plan 2014.\n\nüìÅ ESRI shapefile format (i.e.¬†`MP14_SUBZONE_WEB_PL`)\n\nüîó Can be downloaded at [data.gov.sg](https://data.gov.sg/)\n\n**2) Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling**: aspatial data file. Although it does not contain any coordinates values, the PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.\n\nüìÖ June 2011-2020\n\nüìÅ csv format (i.e.¬†`respopagesextod2011to2020.csv`)\n\nüîó Can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/)\n\nThis is the file structure for containing the data files that I have extracted in the previous step.\n\n![](images/clipboard-838106070.png){width=\"873\"}\n\n### 2.3 Importing Data into R\n\n#### **2.3.1 Importing Geospatial Data into R**\n\nNow, we'll use the **`st_read()`** function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import shapefile\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\SamanthaxFoo\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\n# Inspect shapefile\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\n> üîé **Observations:** The `MP14_SUBZONE_WEB_PL` data set consists of **323 features** and **15 fields** made up of multipolygon features.\n\n#### **2.3.2 Importing Aspatial (Attribute) Data into R**\n\nFor aspatial datasets like *`respopagsex2011to2020.csv`,* we will import into Rstudio using `read_csv()` function of **readr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 984656 Columns: 7\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n> üîé **Observations:** The *`respopagsex2011to2020.csv`* data follows the **SVY21 projected coordinate** which contains 984656 rows and 7 columns\n\n## 3. Data Preparation and Wrangling\n\nBefore a thematic map can be prepared, we will need to prepare a data table with values from 2020 which includes these variables:\n\n-   **YOUNG**: age group 0 to 4 until age group 20 to 24,\n-   **ECONOMY** **ACTIVE**: age group 25-29 until age group 60-64,\n-   **AGED**: age group 65 and above,\n-   **TOTAL**: all age group, and\n-   **DEPENDENCY**: the ratio between young and aged against economy active group\n\n### **3.1 Data Wrangling**\n\nIn order to carry out necessary data wrangling and transformation, the following functions will be used:\n\n-   `pivot_wider()` of **tidyr** package, and\n-   `mutate()`, `filter()`, `group_by()` and `select()` of **dplyr** package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n> üîé **Observations:** Notice that we have filtered our population data from 2020 and successfully grouped them by PA, SZ and AG which sums up the population within each category. I've also summed up the rows for **`ECONOMY ACTIVE`**, `AGED` and **`TOTAL`**, and created a new **`DEPENDENCY`** column which takes the sum of `YOUNG` and `AGED`, and then divide that sum by the value of `ECONOMY ACTIVE`.\n\n### **3.2 Joining Geospatial Data and Attribute Data**\n\nBefore we can perform the georelational join, we are required to convert the values in PA and SZ fields to uppercase to ensure consistency with the uppercase values in SUBZONE_N and PLN_AREA_N.\n\nHence, we will standardise the data values in these two fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to uppercase\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\nNext,¬†**`left_join()`**¬†of¬†**dplyr**¬†is used to join the geographical data and attribute table using planning subzone name e.g.¬†*SUBZONE_N*¬†and¬†*SZ*¬†as the common identifier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n## **4. Choropleth Mapping Geospatial Data Using *tmap***\n\nChoropleth mapping involves the symbolisation of **enumeration units**, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.\n\n**üìñ Scenario:** A social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\n[**Two approaches**]{.underline} can be used to prepare thematic map using *tmap*, they are:\n\n1.  Plotting a thematic map quickly by using **`qtm()`**.\n2.  Plotting highly customisable thematic map by using **`tmap`** elements, i.e. **`tm_shape()`**\n\n### **4.1 Method 1: Plotting a Choropleth Map quickly using *qtm()***\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot choropleth map using qtm()\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n> üí° **Note:**\n>\n> -   *tmap_mode()* with ‚Äúplot‚Äù option is used to produce a static map. For interactive mode, ‚Äúview‚Äù option should be used.\n> -   ***fill*** argument is used to map the attribute (i.e.¬†DEPENDENCY)\n\n### **4.2 Method 2: Plotting a Choropleth Map quickly using *tm_shape()***\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot choropleth map using tmap's elements\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n#### **Step 1: Drawing a Base Map Using *tm_shape()***\n\nThe basic building block of **tmap** is `tm_shape()` followed by one or more layer elemments such as `tm_fill()` and `tm_polygons()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n> üí° **Note:** `tm_shape()` is used to define the input data (i.e *mpsz_pop2020*) and `tm_polygons()` is used to draw the planning subzone polygons.\n\n#### **Step 2: Drawing a Choropleth Map Using *tm_polygons()***\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to `tm_polygons()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n#### **Step 3: Drawing a Choropleth Map Using *tm_fill()* and *tm_border()***\n\nFirstly, we will try to draw a choropleth map by using `tm_fill()` alone.\n\n> üí° **Note:** *tm_polygons()* is a wrapper of *tm_fill()* and *tm_border()*\n>\n> tm*\\_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add fill\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add boundary\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n> üí° **Note:** Notice that light-gray border lines have been added on the choropleth map.\n>\n> The **alpha** argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). Default alpha value is 1.\n>\n> Beside alpha argument, there are three other arguments for tm_borders(), they are:\n>\n> -   col = border colour,\n>\n> -   lwd = border line width (default is 1)\n>\n> -   lty = border line type (default is ‚Äúsolid‚Äù)\n\n## **5. Data Classification Methods of tmap**\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\n> **tmap** provides a total ten data classification methods, namely:\n>\n> -   *fixed*,\n> -   *sd*,\n> -   *equal*,\n> -   *pretty* (default),\n> -   *quantile*,\n> -   *kmeans*,\n> -   *hclust*,\n> -   *bclust*,\n> -   *fisher*,\n> -   *jenks*.\n\n### **5.1 Plotting Choropleth Maps with Built-in Classification Methods**\n\nTo define a data classification method, the ***style*** argument of `tm_fill()` or `tm_polygons()` will be used. The code chunks below uses 5 classes where, n = 5.\n\n> üí° **There are 10 types of styles:** jenks, equal, fixed, sd, pretty (default), quantile, kmeans, fisher, hclust and bclust\n\n#### 1) jenks\n\nFirstly, we'll use the¬†**jenks** style method. It is known as natural breaks and is based on natural groupings inherent in the data. Data is clustered into groups that minimise the within-group variance and maximise the between-group variance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n#### 2) equal\n\nNext, we will try **equal** data classification method. This creates a more even distribution as shown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n> üí° **Note:** not compatible for data that are highly-skewed or with one or two large outliers\n\n#### 3) sd\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"sd\") +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n> üí° **Note:** Should only use if the distribution resembles a normal distribution (bell-curve)!\n\n#### 4) kmeans\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"kmeans\") +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n#### 5) fisher\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"fisher\") +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n> üí° **Note**: At a glance, using Fisher and KMeans lead to similar visualisations.\n\n#### 4) hclust\n\n**hclust** is hierarchical clustering used to create a hierarchy of clusters based on their similarity. Each data point starts as an individual cluster and then progressively merges or splits clusters until a stopping criterion is met.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"hclust\") +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n#### 5) bclust\n\n**bclust** is bagged clustering which creates multiple subsets of the original dataset through resampling. Each subset is then used to train an individual clustering model, and the final cluster assignments are obtained by combining the results from all models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"bclust\") +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n```\n\n\n:::\n:::\n\n\n### 5.2 **Plotting Choropleth Maps with Custom Breaks**\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument in `tm_fill()`.\n\n> üí° **Note:** in **tmap**, the breaks include a minimum and maximum. As a result, in order to end up with n categories, **n+1** elements must be specified in the breaks option (the values must be in increasing order).\n\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n```\n\n\n:::\n:::\n\n\nLooking at the summary statistics, the break point can be set to 0.60, 0.70, 0.80, and 0.90. The minimum and maximum breaks must also be included, which are 0 and 100 respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using this information, we will now proceed to plot the choropleth map.\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          palette=\"plasma\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Values have found that are higher than the highest break\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n> üí° **Observations:** the legend has now been categorised according to the *breaks* vector,¬†`c(0, 0.60, 0.70, 0.80, 0.90, 1.00)`.\n\n### 5.3 Customising Colour Schemes\n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\nTo change the colour, we assign the preferred colour to the ***palette*** argument of **`tm_fill()`** as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"plasma\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nAdd a \"-\" prefix to reverse the colour shading.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## 6. **Controlling and Customising Map Layouts**\n\n### 6.1 Map Legend\n\nIn¬†**tmap**, several¬†***legend***¬†options are provided to change the placement, format and appearance of the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"plasma\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            #legend.height = 0.45, \n            #legend.width = 0.35,\n            legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### **6.2 Map Style**\n\nThe layout of the map can also be adjusted using¬†*tmap_style()*. E.g. Classic\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"classic\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n> üí° **Observations:** the classic tmap style creates a border with double lines, the colours used are more muted and neutral, and the font has been changed to something more elegant\n\n### **6.3 Cartographic Furniture**\n\n**tmap** also provides arguments to draw other important map elements like compass, scale bar and grid lines.\n\nTo add compass, scale and gridlines, pay attention to how `tm_compass()`,¬†`tm_scale_bar()`¬†and¬†`tm_grid()` are used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"plasma\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n### **6.4 Drawing Small Multiple Choropleth Maps**\n\nSmall multiple maps, also referred as **facet maps**, comprise of many adjacent maps. These facets enable easier visualisation of how spatial relationships change with respect to another variable. Such as, time.\n\nIn **tmap**, small multiple maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the asthetic arguments,\n-   by defining a group-by variable in `tm_facets()`, and\n-   by creating multiple stand-alone maps with `tmap_arrange()`.\n\n#### **Method 1: By assigning multiple values to at least one of the aesthetic arguments**\n\nIn this example, small multiple choropleth maps are created by defining ***ncols*** in **`tm_fill()`**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n> üí° **Observations:** two choropleth maps been generated to represent the **Young** and **Aged** demographics respectively.\n\nAdditionally, the **style** and **palette** arguments can be adjusted accordingly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n#### **Method 2: By defining a group-by variable in *tm_facets()***\n\n**`tm_facets()`** can help to group categorical data like regions and subzone areas such that the generated facet maps will zoom in to the specified variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n> üí° **Observations:** we have generated 5 different choropleth maps that represent the 5 unique regions found in the **`REGION_N`** data variable!\n\n#### **Method 3: By creating multiple stand-alone maps with *tmap_arrange()***\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **`tmap_arrange()`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"viridis\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"plasma\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n> üí° **Observations:** as compared to the charts generated in Method 1, writing two **`tm_shape()`** functions allows us to create two separate choropleth maps produced as seen above.\n\n## **7. Mappping Spatial Object Meeting a Selection Criterion**\n\nMap outputs can also be targeted by using selection functions to meet the selection criterion. For example, we have selected the **central** region and¬†***DEPENDENCY*** column to plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"plasma\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n> üí° **Note:** In order to only display data from the **Central Region**, we need to filter the **`mpsz_pop2020`** data frame via **`mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]`**\n",
    "supporting": [
      "Hands-on_Ex2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}