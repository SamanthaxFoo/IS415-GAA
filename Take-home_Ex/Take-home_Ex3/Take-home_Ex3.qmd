---
title: "Take-home Exercise 3"
subtitle: "Navigating Jakartaâ€™s Traffic Network Using Grab Posisi Data"
author: "Foo Jia Yi Samantha"
date-modified: 11/03/2024
date: 11/03/2024
format: 
  html:
    toc-depth: 5
execute: 
  eval: true
  echo: true
  freeze: true
---

# 1. Overview

In this Take-Home Exercise, I will be leveraging the [Grab Posisi dataset](https://engineering.grab.com/grab-posisi) to analyse Jakarta's growing need for on-demand ride-hailing services like Grab, given its increasing pace of urbanisation, particularly in areas with high Points of Interests (POIs).

Feel free to move over to my team's Netlify site for a more in-depth understanding of our project scope and our progress: <https://is415-projectgrab-g2.netlify.app/>

With that said, let's begin with my contributions to the project. In this exercise, I will delve into two aspects of the project - **exploratory data analysis (EDA)** and **exploratory spatial data analysis (ESDA)** using Local Moran's I and LISA classificationon the Grab dataset. My goal is to experiment with as many charts as possible, e.g. heat maps, flow maps, choropleths, to answer critical questions that will be useful in informing us of **ride-hailing demand, traffic hotspots, and movement patterns** around key locations in Jakarta. Eventually, the most useful charts will be selected in the final project.

# 2. Let's Set Up!

## 2.1 Installing Required Packages

Firstly, let us begin by loading these requiring libraries into our R environment.

-   [`tidyverse`](https://www.tidyverse.org/) : a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structure.

-   [`ggplot2`](https://cran.r-project.org/web/packages/ggplot2/) : for creating advanced visualisations, graphics and maps using the Grammar of Graphics.

-   [`patchwork`](https://patchwork.data-imaginist.com/) and [gridExtra](https://cran.r-project.org/web/packages/gridExtra/index.html): for arranging multiple ggplot2 maps beside each other

-   [`ggalluvial`](https://cran.r-project.org/web/packages/ggalluvial/vignettes/ggalluvial.html): allows for building flow diagrams between origin and destination locations, similar to a sankey diagram.

-   [`sf`](https://cran.r-project.org/web/packages/sf/index.html) and [`sfdep`](https://cran.r-project.org/package=sfdep): for spatial data handling

-   [`fmsb`](https://cran.r-project.org/web/packages/fmsb/index.html): for plotting radarcharts in R

-   [tmap](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html): for creating thematic maps with spatial data, providing custom styles, colors, legends, and interactivity

-   [`knitr`](https://cran.r-project.org/package=knitr): for dynamic report generation

```{r}
pacman::p_load(tidyverse, ggplot2, patchwork, ggalluvial, gridExtra, sf, sfdep, fmsb, tmap, knitr)
```

## 2.2 Importing Datasets

As mentioned, I will be using the Grab Posisi dataset for Jakarta which contains GPS pings from Grab vehicles, including **timestamps, route data, and vehicle type** (motorcycle/car).

In addition, my team will be delving into the **district** administration level to offer more meaningful analysis that is still computationally suitable for this project. We have also **further augmented** the dataset by including data categories such as, POIs, weather, population size.

**Datasets used in this project**

1.  Jakarta Point of interests (POIs): <https://data.humdata.org/dataset/hotosm_idn_points_of_interest>

2.  Weather API <https://www.weatherbit.io/>

3.  Jakarta Population Density Data: <https://storymaps.arcgis.com/stories/36e38ceefab0455eb6059a734381723c>

4.  Jakarta Map: <https://data.humdata.org/dataset/cod-ab-idn>

5.  Grab Possi: <https://engineering.grab.com/grab-posisi>

### 2.2.1 Aspatial Data

```{r}
trips <- readRDS("data/aspatial/trip_data.rds")
pois <- readRDS("data/aspatial/jakarta_pois.rds")
population <- read_csv("data/aspatial/jakarta_township_population.csv")
```

The `trips` tibble dataframe contains **55,995** unique Grab trips based on every 1 second GPS ping. This dataset also includes useful variables such as the `driving_mode` (car / motorcycle), `total_duration_minutes`, `total_distance_km`, location data (`origin_district` & `destination_district`) and time data (`origin_day` & `origin_hour`). I will be most interested in knowing where a Grab trip ends, i.e. its destination district, across which periods of the day and week.

```{r}
glimpse(trips)
```

::: callout-note
Grab trips from **outside of Jakarta** and moving out of Jakarta are attributed to the outer islands of Jakarta, namely the **Kepulauan Seribu Regency,** which are chains of islands in the North of Jakarta's coasts.
:::

This dataset contains all **unique** **9,685 POIs** found within each district of Jakarta. This will give us insights on how Grab is demanded based on the availability of POIs across different districts.

```{r}
glimpse(pois)
```

Thirdly, the `population` dataframe contains all population counts in **2019** down to the township level. We will need to perform some data wrangling to summarise it to the **district** level later.

```{r}
glimpse(population)
```

### 2.2.2 Geospatial Data

Next, let's proceed with producing the `jakarta_district` simple feature dataframe consisting of the district boundary of Jakarta by reading from the `idn_admbnda_adm3_bps_20200401` shapefile below.

```{r}
# Step 1: Read the Indonesia administrative boundary shapefile
indonesia <- st_read(
  dsn = "data/geospatial/indon", 
  layer = "idn_admbnda_adm3_bps_20200401"
)

# Step 2: Filter for DKI Jakarta and rename it to "Jakarta"
jakarta_district <- indonesia %>%
  filter(ADM1_EN == "Dki Jakarta") %>%
  mutate(ADM1_EN = "Jakarta")

# Step 3: Exclude districts belonging to "Kepulauan Seribu"
jakarta_district <- jakarta_district %>%
  filter(ADM2_EN != "Kepulauan Seribu")  # Exclude Kepulauan Seribu

# Step 4: Select only the required columns
jakarta_district <- jakarta_district %>%
  dplyr::select(ADM1_EN, ADM2_EN, ADM3_EN, geometry)

# Step 5: Rename columns to more meaningful names
jakarta_district <- jakarta_district %>%
  rename(
    province = ADM1_EN,
    city = ADM2_EN,
    district = ADM3_EN,
  )

# Step 6: Ensure the CRS is EPSG:4326 (WGS84)
jakarta_district <- jakarta_district %>%
  st_transform(crs = 6384)  # Transform to WGS84

jakarta_district <- jakarta_district %>%
  mutate(across(where(is.character), tolower))

jakarta_district_df <- jakarta_district %>%
  st_drop_geometry()

# Step 7: Simplify the geometry with a smaller tolerance
jakarta_district <- jakarta_district %>%
  st_simplify(dTolerance = 10.0)  # Smaller tolerance for longitude/latitude data
```

```{r}
class(jakarta_district)
```

Next, we can plot the interactive map of Jakarta and their districts using **tmap** and **OpenStreetMap**, which plots all of its 44 districts and their boundaries as shown below.

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: Plot the interactive map using tmap
tmap_mode("view") 

tm_shape(jakarta_district) +  
  tm_polygons(
    col = "district",         
    palette = "Blues",     
    border.col = "black",     
    lwd = 0.5,                
    popup.vars = "district"    
  ) +
  tm_text("district", size = 0.6, col = "black") + 
  tm_basemap("OpenStreetMap")

tmap_mode("plot") 
```

# 3. Data Wrangling

## 3.1 Categorising Point of Interests (POIs) Data

I assisted my team mate, Jia Le, with handling some of the data cleaning process of the project. This includes **re-categorising** the **205 POIs** identified for each district into its correct category as the initial categories were previously classified wrongly.

There are a total of **9 unique categories** that needed some re-categorisation.

-   Facilities_Services
-   Essentials
-   Offices_Business
-   Cultural_Attractions
-   Restaurants_Food
-   Recreation_Entertainment
-   Others
-   Shops
-   Tourism_Spots

For instance, the 'taxi' POI was initially classified as 'Others' instead of something more related like **'Facilities_Services'**.

![](images/clipboard-1845745824.png){width="727"}

## 3.2 Aggregate the Population Dataset

It is worth noting that we have two lakes that are considered districts here - Danau Sunter and Danau Sunter DII - which explains why they have 0 population size. We also do not have population data for districts outside of Jakarta here.

```{r}
population <- population %>%
  group_by(district) %>%
  summarise(population_count = sum(population_2019)) %>%
  mutate(district = tolower(district))

# Inspect
population
```

## 3.3 Prepare the Augmented *POIs* Dataset

For a more useful analysis, we can break it down by POI category types and get the count of POIs within each category for each district, as shown in the `pois_num` tibble below.

```{r}
# Count the number of POIs by district
pois_num <- pois %>%
  st_drop_geometry() %>%
  group_by(district) %>%
  summarise(num_of_pois = n(), .groups = 'drop')

# Inspect
pois_num
```

## 3.4 Prepare the Augmented *Trips* Dataset

I noticed that we have records where destination districts are found outside of Jakarta's boundary. For the purpose of analysing Grab trends within Jakarta, I will filter these trip records out.

```{r}
trips <- trips %>%
  filter(destination_district != "outside of jakarta" |
         origin_district != "outside of jakarta")

# Inspect
head(trips)
```

Next, I will leverage the `trips` tibble dataframe to group all trips by `destination_district` and summarise them by number of trips, average duration (minutes) and average distance travelled (km).

```{r}
trips_dest <- trips %>%
  group_by(destination_district) %>%
  summarise(
    num_of_trips = n(), 
    avg_duration_minutes = mean(total_duration_minutes, na.rm = TRUE), 
    avg_distance_km = mean(total_distance_km, na.rm = TRUE)  
  ) %>%
  rename(district = destination_district) %>%
  mutate(district = tolower(district))

trips_origin <- trips %>%
  group_by(origin_district) %>%
  summarise(
    num_of_trips = n(), 
    avg_duration_minutes = mean(total_duration_minutes, na.rm = TRUE), 
    avg_distance_km = mean(total_distance_km, na.rm = TRUE)
  ) %>%
  rename(district = origin_district) %>%
  mutate(district = tolower(district))
```

I will also join the `pois_num` dataframe to `trips_dest` and `trips_origin` by the **district** column so we can append the total number of POIs for each destination district.

```{r}
trips_dest_pois <- trips_dest %>%
  inner_join(pois_num, by = "district")

trips_origin_pois <- trips_origin %>%
  inner_join(pois_num, by = "district")
```

Let's also include the population data from the `population` dataframe we imported into R.

```{r}
# For the destination
district_dest <- trips_dest_pois %>%
  left_join(population %>% mutate(district = tolower(district)), 
            by = "district")

district_dest
```

```{r}
# For the origin
district_origin <- trips_origin_pois %>%
  left_join(population %>% mutate(district = tolower(district)), 
            by = "district")

district_origin
```

## 3.5 Prepare the Dataframe for Weather by Origin District

For a more aggregated analysis of the weather conditions influencing commuters to pay for Grab services, I will do a count of all number of trips based on each **weather description** (e.g. fog, haze, heavy rain) and based on each **weather** **category** (e.g. rain or no rain). Take note that I will remove all values returned as "outside of jakarta" since we do not have weather data for trip origins found outside of Jakarta.

```{r}
weather_descriptions <- c(
  "broken clouds", "scattered clouds",
  "light rain", "overcast clouds", "moderate rain", 
  "haze", "fog", "few clouds", "heavy rain"
)

trips_origin_weather <- trips %>%
  filter(origin_weather_description %in% weather_descriptions) %>%
  group_by(origin_district, origin_weather_description) %>%
  summarise(num_of_trips = n(), .groups = 'drop') %>%
  pivot_wider(
    names_from = origin_weather_description,
    values_from = num_of_trips,
    values_fill = list(num_of_trips = 0)
  ) %>%
  rename(district = origin_district) %>%
  mutate(district = tolower(district))

category_counts <- trips %>%
  filter(origin_weather_description %in% weather_descriptions) %>%
  group_by(origin_district, origin_weather_description_category) %>%
  summarise(total_category_count = n(), .groups = 'drop') %>%
  pivot_wider(
    names_from = origin_weather_description_category,
    values_from = total_category_count,
    values_fill = list(total_category_count = 0)
  ) %>%
  rename(district = origin_district) %>%
  mutate(district = tolower(district))

trips_origin_weather <- trips_origin_weather %>%
  left_join(category_counts, by = "district")

trips_origin_weather
```

Let's do an `inner_join()` to combine the weather data with our `district_origin` dataframe.

```{r}
district_origin <- district_origin %>%
  left_join(trips_origin_weather, by = "district") %>%
  select(-ends_with(".x"), -ends_with(".y"))

# Inspect
district_origin
```

## 3.6 Calculate Centroid of Each District's Polygon

Finally, I will calculate the centroid of each polygon in `jakarta_district` and add the latitude and longitude coordinates of these centroids as new columns. We can also remove the `province` and `city` columns.

-   **`st_centroid(geometry)`**: Calculates the centroid of each polygon in the `geometry` column of `jakarta_district`, returning a point that represents the center of each districtâ€™s shape.

-   **`centroid_lat` and `centroid_lng`**:

    -   **`st_coordinates(centroid)[, 2]`**: Extracts the latitude (y-coordinate) from each centroid and stores it in `centroid_lat`.

    -   **`st_coordinates(centroid)[, 1]`**: Extracts the longitude (x-coordinate) from each centroid and stores it in `centroid_lng`.

```{r}
jakarta_district_centroid <- jakarta_district %>%
  mutate(
    geometry = st_centroid(geometry), 
    centroid_lat = st_coordinates(geometry)[, 2],
    centroid_lng = st_coordinates(geometry)[, 1]   
  ) %>%
  select(district, centroid_lat, centroid_lng, geometry)  # Select the necessary columns

# Display the result
jakarta_district_centroid
```

# 4. Exploratory Data Analysis (EDA)

In this EDA process, I will leverage the datasets we've imported and wrangled to identify charts that produce the most interesting insights in terms of traffic pattersn, demand for Grab trends, temporal trends and POI analysis.

## 4.1 Traffic Trends & Demand Distribution

### **4.1.1 Distribution of Trips Origin and Destination By District**

In terms of trip origins, districts such as Setia Budi, Grogol Petamburan, and Kebayoran Baru have the **highest traffic volumes** moving out of the district, indicating areas of high trip demand. In terms of trip destinations, districts such as Tanah A bang and Setia Budi are most popular for Grab trips. In contrast, districts like Johar Baru, Dananu Sunter DII, and Danau Sunter experience the **lowest traffic volumes**, suggesting potential areas of **under-service** or potentially **low demand for Grab services**.

```{r fig.width=10, fig.height=8}
#| code-fold: true
# Count trips for origin districts
origin_counts <- trips %>%
  count(origin_district) %>%
  rename(total_trips = n)

# Count trips for destination districts
destination_counts <- trips %>%
  count(destination_district) %>%
  rename(total_trips = n)

# Create a bar plot for origin districts
p1 <- ggplot(origin_counts, aes(x = reorder(origin_district, -total_trips), y = total_trips)) +
  geom_bar(stat = "identity", fill = "skyblue2") +
  theme_gray() +
  labs(title = "Total Number of Grab Trips per Origin District",
       x = "Origin District",
       y = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"), # Center and style the title
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

# Create a bar plot for destination districts
p2 <- ggplot(destination_counts, aes(x = reorder(destination_district, -total_trips), y = total_trips)) +
  geom_bar(stat = "identity", fill = "pink2") +
  theme_gray() +
  labs(title = "Total Number of Grab Trips per Destination District",
       x = "Destination District",
       y = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"), # Center and style the title
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

p1 / p2 
```

We can also inspect how the population size of each district influences the number of trips taken to and from each district. Generally, districts with a **high number of trips per capita** from **origin** also displayed **more frequent** trips taken into the district.

Initially, there are districts with the **highest trips per capita** but in reality, they do NOT correspond to **high number of trips** (previous chart). For instance, Danau Sunter DII and Danau Sunter are districts with the lowest number of trips but since they also have a population of 0, resulting in a **seemingly high** number of trips per capita. Hence, we remove trip data from these two districts since it is not possible to divide a value by 0!

```{r}
#| code-fold: true
#| code-summary: Prepare data
destination_data <- district_dest %>%
  select(district, population_count, num_of_trips) %>%
  filter(district != "danau sunter dll" & district != "danau sunter") %>%
  mutate(trips_per_capita_dest = num_of_trips / population_count) %>%
  rename(district = district)

origin_data <- district_origin %>%
  select(district, population_count, num_of_trips) %>%
  filter(district != "danau sunter dll" & district != "danau sunter") %>%
  mutate(trips_per_capita_origin = num_of_trips / population_count) %>%
  rename(district = district)

combined_data <- destination_data %>%
  select(district, trips_per_capita = trips_per_capita_dest) %>%
  mutate(trip_type = "Destination") %>%
  bind_rows(
    origin_data %>%
      select(district, trips_per_capita = trips_per_capita_origin) %>%
      mutate(trip_type = "Origin")
  )
```

```{r fig.width=10, fig.height=6}
#| code-fold: true
# Create the line plot for trips per capita with specified colors and theme
ggplot(combined_data, aes(x = district, y = trips_per_capita, color = trip_type, group = trip_type)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2) +
  labs(
    title = "Number of Trips Per Capita by District",
    x = "District",
    y = "Trips Per Capita"
  ) +
  theme_gray() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5), 
    axis.text.x = element_text(angle = 90, hjust = 1)
  ) +
  scale_color_manual(values = c("Origin" = "lightblue3", "Destination" = "pink3"))
```

Instead, we can just separate the number of trips and the population size as such. Generally, we do not see any trends, meaning that the population size has no effect on the number of trips taken.

```{r}
#| code-fold: true
#| code-summary: Prepare data
district_data <- district_dest %>%
  select(district, population_count, num_of_trips) %>%
  rename(trips = num_of_trips)

district_data <- district_data %>%
  bind_rows(
    district_origin %>%
      select(district, population_count, num_of_trips) %>%
      rename(trips = num_of_trips)
  ) %>%
  group_by(district) %>%
  summarise(
    population_count = mean(population_count, na.rm = TRUE),
    total_trips = mean(trips, na.rm = TRUE)
  ) %>%
  arrange(desc(population_count))
```

```{r fig.width=10, fig.height=7}
#| code-fold: true
ggplot(district_data) +
  geom_line(aes(x = reorder(district, population_count), y = total_trips, group = 1, color = "Average Trips Taken"), linewidth = 1.2) +  # Updated label
  geom_line(aes(x = reorder(district, population_count), y = population_count * max(total_trips) / max(population_count), group = 2, color = "Population Count"), linewidth = 1.2) +
  geom_point(aes(x = reorder(district, population_count), y = total_trips, color = "Average Trips Taken"), size = 3) +  # Updated label
  geom_point(aes(x = reorder(district, population_count), y = population_count * max(total_trips) / max(population_count), color = "Population Count"), size = 3) +
  labs(
    title = "Mean Number of Trips and Population Count by District",
    x = "District",
    y = "Mean Number of Trips",
    color = "Legend"
  ) +
  theme_gray() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Center, bold, size 16
    axis.text.x = element_text(angle = 90, hjust = 1),
    legend.position = "top"
  ) +
  scale_color_manual(values = c("Average Trips Taken" = "lightblue3", "Population Count" = "pink3")) +  # Updated color mapping
  scale_y_continuous(
    sec.axis = sec_axis(~ . * max(district_data$population_count) / max(district_data$total_trips), name = "Population Count")  # Secondary axis
  )
```

### **4.1.2 *Top* Origins and Destinations for Ride-hailing Trips**

Next, we will prepare the top 5 districts with the most number of Grab trips based on trip origin and trip destinations.

```{r}
#| code-fold: true
#| code-summary: Prepare data
# Calculate top 5 districts for origin_district
top_5_origin_districts <- trips %>%
  count(origin_district) %>%
  rename(total_trips = n) %>%
  arrange(desc(total_trips)) %>%
  slice(1:5)

# Calculate top 5 districts for destination_district
top_5_destination_districts <- trips %>%
  count(destination_district) %>%
  rename(total_trips = n) %>%
  arrange(desc(total_trips)) %>%
  slice(1:5)
```

By plotting a bar chart, we can identify districts with the most demand for Grab services for both in-flow and out-flow of Grab trips. In particular, we can see that districts with most Grab trips **originating** from it **corresponds** with the highest number of Grab trips **arriving into it** (e.g. Setia Budi).

Such alignment suggests that these districts function as key hubs of movement within the city, likely due to high-density residential, commercial, or mixed-use areas.

```{r fig.width=10, fig.height=5}
# Plot for Top 5 Origin Districts
p1 <- ggplot(top_5_origin_districts, aes(y = reorder(origin_district, total_trips), x = total_trips)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  theme_gray() +
  labs(title = "Most Popular Origin Districts", y = "District", x = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

# Plot for Top 5 Destination Districts
p2 <- ggplot(top_5_destination_districts, aes(y = reorder(destination_district, total_trips), x = total_trips)) +
  geom_bar(stat = "identity", fill = "pink2") +
  theme_gray() +
  labs(title = "Most Popular Destination Districts", y = "District", x = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

p1 + p2
```

### **4.1.3 *Least popular* origins and destinations for ride-hailing trips**

We can also gather origin and destination districts with the least trips by arranging the `total_trips` in descending order and filtering districts with the **lowest 5** number of trips.

```{r}
#| code-fold: true
#| code-summary: Prepare data

# Calculate counts for origin districts
orig_count <- trips %>%
  count(origin_district) %>%
  rename(trips = n) %>%
  arrange(desc(trips))

dest_count <- trips %>%
  count(destination_district) %>%
  rename(trips = n) %>%
  arrange(desc(trips))

bottom_5_orig <- orig_count %>%
  slice_tail(n = 5)

bottom_5_dest <- dest_count %>%
  slice_tail(n = 5)

bottom_5_orig$origin_district <- factor(bottom_5_orig$origin_district, 
                                        levels = bottom_5_orig$origin_district)
bottom_5_dest$destination_district <- factor(bottom_5_dest$destination_district, 
                                             levels = bottom_5_dest$destination_district)
```

Here I plot the `geom_bar()` of the ggplot2 package. The results aligns with what we mentioned earlier, where the same origin districts with the least out-flow of Grab trips also happen to be districts with the least in-flow of Grab trips.

```{r fig.width=10, fig.height=5}
#| code-fold: true
p1 <- ggplot(bottom_5_orig, aes(y = origin_district, x = trips)) +
  geom_bar(stat = "identity", fill = "lightblue") +
  labs(title = "Least Popular Origin Districts", y = "District", x = "Trips") +
  theme_gray() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))

p2 <- ggplot(bottom_5_dest, aes(y = destination_district, x = trips)) +
  geom_bar(stat = "identity", fill = "pink2") +
  labs(title = "Least Popular Destination Districts", y = "District", x = "Trips") +
  theme_gray() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))

p1 + p2
```

### 4.1.4 Popularity of Districts Based on Driving Mode

When using the `geom_density()` function to create density plots, we can see a smoothed version of the trip distance (in kilometres), further drilled down by the mode of driving (car vs motorcycle). There is almost no difference in relative distance travelled by cars or motorcycles.

For **longer distances traveled**, cars are slightly more preferredthan motorcycles, while for **shorter** trip distances, both driving modes are **equally demanded**.Thus, we only see **some instances** where **cars are preferred** for when journeys are longer.

```{r}
#| code-fold: true
ggplot(trips, aes(x = total_distance_km, fill = driving_mode)) +
  geom_density(alpha = 0.8) +
  labs(title = "Trip Distance (km) by Driving Mode (All Trips)",
       x = "Total Distance (km)",
       y = "Density") +
  theme_gray() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +
  scale_fill_manual(values = c("lightblue", "pink2"))
```

This is the adjusted plot when we completely remove all trips with origins and destinations outside of Jakarta. The distance of Grab journeys significantly decrease from 80km to \~20km, and observations of popularity of the driving mode remains the same.

```{r}
#| code-fold: true
trips_inside_jakarta <- trips %>%
  filter(origin_district != 'Outside of Jakarta', destination_district != 'Outside of Jakarta')

ggplot(trips_inside_jakarta, aes(x = total_distance_km, fill = driving_mode)) +
  geom_density(alpha = 0.8) +
  labs(title = "Trip Distance (km) by Driving Mode (Within Jakarta)",
       x = "Total Distance (km)",
       y = "Density") +
  theme_gray() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +
  scale_fill_manual(values = c("lightblue", "pink2"))
```

We can further break this down into popular origins and destinations for **car** and **motorcycle** drivers respectively. It is rather intriguing that both modes of driving have similar top origin and destinations, as well as least popular origin and destinations travelled. Once again, indicating how both vehicle types are **equally demanded** in Jakarta.

**1) For Car Drivers**

```{r fig.width=10, fig.height=10}
#| code-fold: true
# Filter trips for cars only
car_trips <- trips %>%
  filter(driving_mode == 'car')

# Calculate counts for origin districts
origin_counts <- car_trips %>%
  count(origin_district) %>%
  rename(total_trips = n) %>%
  arrange(desc(total_trips))

# Get top 5 origin districts
top_5_origin_districts <- origin_counts %>%
  slice_head(n = 5)

# Get least 5 origin districts
bottom_5_origin_districts <- origin_counts %>%
  slice_tail(n = 5)

# Set factor levels for top and bottom origin districts
top_5_origin_districts$origin_district <- factor(top_5_origin_districts$origin_district, 
                                                  levels = top_5_origin_districts$origin_district)

bottom_5_origin_districts$origin_district <- factor(bottom_5_origin_districts$origin_district, 
                                                     levels = bottom_5_origin_districts$origin_district)

# Plot for Top 5 Origin Districts in descending order
p1 <- ggplot(top_5_origin_districts, aes(y = reorder(origin_district, total_trips), x = total_trips)) +
  geom_bar(stat = "identity", fill = "lightgreen") +
  theme_gray() +
  labs(title = "Top 5 Popular Origin (Cars)", y = "District", x = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

# Plot for Least 5 Origin Districts
p2 <- ggplot(bottom_5_origin_districts, aes(y = origin_district, x = total_trips)) +
  geom_bar(stat = "identity", fill = "lightcoral") +
  theme_gray() +
  labs(title = "Least 5 Popular Origin (Cars)", y = "District", x = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

# Calculate counts for destination districts
destination_counts <- car_trips %>%
  count(destination_district) %>%
  rename(total_trips = n) %>%
  arrange(desc(total_trips))

# Get top 5 destination districts
top_5_destination_districts <- destination_counts %>%
  slice_head(n = 5)

# Get least 5 destination districts
bottom_5_destination_districts <- destination_counts %>%
  slice_tail(n = 5)

# Set factor levels for top and bottom destination districts
top_5_destination_districts$destination_district <- factor(top_5_destination_districts$destination_district, 
                                                             levels = top_5_destination_districts$destination_district)

bottom_5_destination_districts$destination_district <- factor(bottom_5_destination_districts$destination_district, 
                                                               levels = bottom_5_destination_districts$destination_district)

# Plot for Top 5 Destination Districts
p3 <- ggplot(top_5_destination_districts, aes(y = reorder(destination_district, total_trips), x = total_trips)) +
  geom_bar(stat = "identity", fill = "lightblue") +
  theme_gray() +
  labs(title = "Top 5 Popular Destination (Cars)", y = "District", x = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

# Plot for Least 5 Destination Districts
p4 <- ggplot(bottom_5_destination_districts, aes(y = destination_district, x = total_trips)) +
  geom_bar(stat = "identity", fill = "pink2") +
  theme_gray() +
  labs(title = "Least 5 Popular Destination (Cars)", y = "District", x = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

grid.arrange(p1, p2, p3, p4, ncol = 2)
```

**2) For Motorcycle Drivers**

```{r fig.width=10, fig.height=10}
#| code-fold: true
# Filter trips for motorcycles only
motorcycle_trips <- trips %>%
  filter(driving_mode == 'motorcycle')

# Calculate counts for origin districts
origin_counts <- motorcycle_trips %>%
  count(origin_district) %>%
  rename(total_trips = n) %>%
  arrange(desc(total_trips))

# Get top 5 origin districts
top_5_origin_districts <- origin_counts %>%
  slice_head(n = 5)

# Get least 5 origin districts
bottom_5_origin_districts <- origin_counts %>%
  slice_tail(n = 5)

# Set factor levels for top and bottom origin districts
top_5_origin_districts$origin_district <- factor(top_5_origin_districts$origin_district, 
                                                  levels = top_5_origin_districts$origin_district)

bottom_5_origin_districts$origin_district <- factor(bottom_5_origin_districts$origin_district, 
                                                     levels = bottom_5_origin_districts$origin_district)

# Plot for Top 5 Origin Districts in descending order
p1 <- ggplot(top_5_origin_districts, aes(y = reorder(origin_district, total_trips), x = total_trips)) +
  geom_bar(stat = "identity", fill = "lightgreen") +
  theme_gray() +
  labs(title = "Top 5 Popular Origin (Motorcycles)", y = "District", x = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

# Plot for Least 5 Origin Districts
p2 <- ggplot(bottom_5_origin_districts, aes(y = origin_district, x = total_trips)) +
  geom_bar(stat = "identity", fill = "lightcoral") +
  theme_gray() +
  labs(title = "Least 5 Popular Origin (Motorcycles)", y = "District", x = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

# Calculate counts for destination districts
destination_counts <- motorcycle_trips %>%
  count(destination_district) %>%
  rename(total_trips = n) %>%
  arrange(desc(total_trips))

# Get top 5 destination districts
top_5_destination_districts <- destination_counts %>%
  slice_head(n = 5)

# Get least 5 destination districts
bottom_5_destination_districts <- destination_counts %>%
  slice_tail(n = 5)

# Set factor levels for top and bottom destination districts
top_5_destination_districts$destination_district <- factor(top_5_destination_districts$destination_district, 
                                                             levels = top_5_destination_districts$destination_district)

bottom_5_destination_districts$destination_district <- factor(bottom_5_destination_districts$destination_district, 
                                                               levels = bottom_5_destination_districts$destination_district)

# Plot for Top 5 Destination Districts
p3 <- ggplot(top_5_destination_districts, aes(y = reorder(destination_district, total_trips), x = total_trips)) +
  geom_bar(stat = "identity", fill = "lightblue") +
  theme_gray() +
  labs(title = "Top 5 Popular Destination (Motorcycles)", y = "District", x = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

# Plot for Least 5 Destination Districts
p4 <- ggplot(bottom_5_destination_districts, aes(y = destination_district, x = total_trips)) +
  geom_bar(stat = "identity", fill = "pink2") +
  theme_gray() +
  labs(title = "Least 5 Popular Destination (Motorcycles)", y = "District", x = "Number of Trips") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

grid.arrange(p1, p2, p3, p4, ncol = 2)
```

## 4.2 Temporal Trends

### **4.2.1 Distribution of Trips Throughout the [*Week*]{.underline}**

It will also be interesting to investigate how the demand for Grab trips changes based on time, in particular by day of week. Here, I counted the number of trips for each day of the week and driving mode by using functions from the `dplyr` package.

We plot the `geom_bar()` from `ggplot2` package here. We can see that **weekends** have **slightly fewer** number of trips taken than during the **weekdays**. Additionally, the choice between motorcycle or car is almost equal, with a **marginally higher number of motorcycle trips** taken across all days. Out of all days of the week, Thursdays have the highest number of trips taken which coincides with a school and work day, while Sunday which coincides with a rest day showed the least number of trips.

```{r fig.width=8, fig.height=8}
#| code-fold: true
weekly_trips <- trips %>%
  group_by(origin_day, driving_mode) %>%
  summarise(total_trips = n(), .groups = 'drop') %>%
  arrange(match(origin_day, c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")))

weekly_trips$origin_day <- factor(weekly_trips$origin_day, 
                                   levels = c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"))

ggplot(weekly_trips, aes(x = origin_day, y = total_trips, fill = driving_mode)) +
  geom_bar(stat = "identity", position = "stack") +  # Stacked bar chart
  labs(title = "Number of Trips Throughout the Week by Driving Mode",
       x = "Day of the Week",
       y = "Number of Trips") +
  scale_fill_manual(values = c("car" = "lightblue", "motorcycle" = "pink2")) +  # Custom colors
  theme_gray() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    axis.text.x = element_text(angle = 0, hjust = 1),
    legend.position = "top"
  ) +
  geom_text(aes(label = total_trips), 
            position = position_stack(vjust = 0.5), 
            color = "black", 
            size = 4, 
            show.legend = FALSE)  
```

### **4.2.2 Distribution of number of trips throughout the [*Day*]{.underline}**

**1) By Individual Hours**

By using the `geom_bar` function, we can plot the count of Grab trips taken for each hour of a day. The peak traffic time appears to be at **10am** while the quietest period is at **7pm** in the evening. We cna also see the the demand for traffic rising from 12am onward which then declines in number of Grab trips past 10am.

```{r}
#| code-fold: true
hourly_trips <- trips %>%
  group_by(origin_hour) %>%
  summarise(number_of_trips = n(), .groups = 'drop') %>%
  arrange(origin_hour)

hourly_trips$origin_hour <- factor(hourly_trips$origin_hour, 
                                    levels = sort(unique(trips$origin_hour)))

ggplot(hourly_trips, aes(x = origin_hour, y = number_of_trips, group = 1)) +  # Set group = 1
  geom_line(color = "lightblue3", linewidth = 1) + 
  geom_point(color = "lightblue3", size = 2) + 
  geom_text(aes(label = number_of_trips), vjust = -0.5, color = "black", size = 3) +
  labs(title = "Distribution of Number of Trips Throughout the Day",
       x = "Hour of the Day",
       y = "Number of Trips") +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis text for readability
  ) +
  theme(legend.position = "none")
```

**2) By Aggregated Hour Category**

Additionally, we can also aggregate the `hour_category` column into morning, afternoon, evening and midnight, including whether they are peak or lull periods, as such. This allows for easier interpretability of the data charts.

```{r}
#| code-fold: true
#| code-summary: Prepare data
trips <- trips %>%
  mutate(hour_category = case_when(
    origin_hour %in% 1:3 ~ "midnight_peak",
    origin_hour %in% 4:6 ~ "midnight_lull",
    origin_hour %in% 7:9 ~ "morning_peak",
    origin_hour %in% 10:12 ~ "morning_lull",
    origin_hour %in% 13:15 ~ "afternoon_peak",
    origin_hour %in% 16:18 ~ "afternoon_lull",
    origin_hour %in% 19:21 ~ "evening_peak",
    origin_hour %in% c(22:24,0) ~ "evening_lull"
  )) %>%
  mutate(hour_category = factor(hour_category, 
                                 levels = c("midnight_peak", "midnight_lull", 
                                            "morning_peak", "morning_lull", 
                                            "afternoon_peak", "afternoon_lull", 
                                            "evening_peak", "evening_lull")))
```

As shown, the **morning peak** hours of 6am to 9am have the **highest number of Grab trips** while the **evening peak** periods of 6pm to 9pm have the least number of trips taken.

```{r}
#| code-fold: true
hourly_trips <- trips %>% 
  group_by(hour_category) %>% 
  summarise(number_of_trips = n(), .groups = 'drop')

hourly_trips$hour_category <- factor(hourly_trips$hour_category, 
                                     levels = unique(hourly_trips$hour_category))

ggplot(hourly_trips, aes(x = hour_category, y = number_of_trips, group = 1)) +
  geom_line(color = "lightblue3", linewidth = 1) + 
  geom_point(color = "lightblue3", size = 2) +
  geom_text(aes(label = number_of_trips), vjust = -0.5, color = "black", size = 3.5) +
  labs(title = "Distribution of Number of Trips By Hour Category",
       x = "Hour Category",
       y = "Number of Trips") +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  theme(legend.position = "none")
```

### **4.2.3 Distribution of Trip Duration**

**1) By Time of Day**

Similar to the distribution of trip distance, by using `geom_violin()` from ggplot2 package, we can visualise the spread of **trip duration (in minutes)** from origin to destination, based on each **hour category**. Here, we randomly sample **2000 trip data** to enable more readability since plotting the entire dataset will result in a chunk of dots that do not offer insights into the spread of trip distance.

Across each hour category, the total duration spent on Grab journeys tend to be **similar** in their median values. Perhaps, we see the most outliers in trip distances for trips taken during the **morning lull** and **evening lull** where extremely long trip distances are observed.

```{r}
#| code-fold: true
sampled_trips <- trips %>%
  sample_n(2000)

ggplot(sampled_trips, aes(x = hour_category, y = total_duration_minutes, fill = hour_category)) +
  geom_violin(trim = FALSE, alpha = 0.6, draw_quantiles = c("0.5")) +
  geom_jitter(width = 0.2, size = 0.5, alpha = 0.2, color = "black") +  
  labs(title = "Distribution of Trip Duration (minutes) by Hour Category",
       x = "Hour Category",
       y = "Total Duration (minutes)") +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)  # Tilt x-axis labels
  ) +
  scale_fill_manual(values = c("lightblue", "lightcoral", "green3", "lightpink", "lightyellow", "lightgray", "lightcyan", "lightgoldenrod")) +
  theme(legend.position = "none") 
```

When I remove outliers in `total_duration_minutes` that fall below Q1 - 1.5 \* IQR or above Q3 + 1.5 \* IQR, we can once again observe that the median duration taken is the same across all time of day.

```{r}
#| code-fold: true
# Calculate IQR and filter outliers in total_duration_minutes
filtered_trips <- trips %>%
  filter(between(total_duration_minutes, 
                 quantile(total_duration_minutes, 0.25) - 1.5 * IQR(total_duration_minutes), 
                 quantile(total_duration_minutes, 0.75) + 1.5 * IQR(total_duration_minutes))) %>%
  sample_n(2000)

# Plot without outliers
ggplot(filtered_trips, aes(x = hour_category, y = total_duration_minutes, fill = hour_category)) +
  geom_violin(trim = FALSE, alpha = 0.6, draw_quantiles = c("0.5")) +
  geom_jitter(width = 0.2, size = 0.5, alpha = 0.2, color = "black") +  
  labs(title = "Distribution of Trip Duration (minutes) by Hour Category - No Outliers",
       x = "Hour Category",
       y = "Total Duration (minutes)") +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)  # Tilt x-axis labels
  ) +
  scale_fill_manual(values = c("lightblue", "lightcoral", "green3", "lightpink", "lightyellow", "lightgray", "lightcyan", "lightgoldenrod")) +
  theme(legend.position = "none")
```

**2) By Day of Week**

In terms of day of the week, **Mondays, Tuesdays** and **Wednesdays** tend to have a slightly shorter trip duration than the rest of the days of the week.

```{r}
#| code-fold: true
# Sample 2000 trips
sampled_trips <- trips %>%
  sample_n(2000)

# Reorder origin_day as a factor with levels from Monday to Sunday
sampled_trips$origin_day <- factor(sampled_trips$origin_day, 
                                    levels = c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"))

# Create the violin plot
ggplot(sampled_trips, aes(x = origin_day, y = total_duration_minutes, fill = origin_day)) +
  geom_violin(trim = FALSE, alpha = 0.6, draw_quantiles = c("0.5")) +
  geom_jitter(width = 0.2, size = 0.5, alpha = 0.2, color = "black") +  
  labs(title = "Distribution of Trip Duration (minutes) by Day of Week",
       x = "Day of Week",
       y = "Trip Duration (minutes)") +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)  # Tilt x-axis labels
  ) +
  scale_fill_manual(values = c("lightblue", "lightcoral", "green3", "lightpink", "lightyellow", "lightgray", "lightcyan")) +
  theme(legend.position = "none")
```

We have a clearer view of the spread of trip duration when we remove all outliers. We can see that trips taken on **Wednesday** tend to be shorter journeys than other days of the week.

```{r}
#| code-fold: true
# Remove outliers based on IQR and then sample 2000 trips
filtered_trips <- trips %>%
  filter(between(total_duration_minutes, 
                 quantile(total_duration_minutes, 0.25) - 1.5 * IQR(total_duration_minutes), 
                 quantile(total_duration_minutes, 0.75) + 1.5 * IQR(total_duration_minutes))) %>%
  sample_n(2000)

# Reorder origin_day as a factor with levels from Monday to Sunday
filtered_trips$origin_day <- factor(filtered_trips$origin_day, 
                                    levels = c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"))

# Create the violin plot without outliers
ggplot(filtered_trips, aes(x = origin_day, y = total_duration_minutes, fill = origin_day)) +
  geom_violin(trim = FALSE, alpha = 0.6, draw_quantiles = c("0.5")) +
  geom_jitter(width = 0.2, size = 0.5, alpha = 0.2, color = "black") +  
  labs(title = "Distribution of Trip Duration (minutes) by Day of Week - No Outliers",
       x = "Day of Week",
       y = "Trip Duration (minutes)") +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)  # Tilt x-axis labels
  ) +
  scale_fill_manual(values = c("lightblue", "lightcoral", "green3", "lightpink", "lightyellow", "lightgray", "lightcyan")) +
  theme(legend.position = "none")
```

**3) By Driving Mode**

We can also use the `driving_mode` column of the **trips** data to plot the distribution of trip duration. We can see that **motorcycles** are slighty more preferred for **shorter trip duration** than cars,though cars are almost equally as demanded. In terms of longer journeys which involve more minutes, taking the **car** is more preferred as a mode of driving.

```{r}
#| code-fold: true
ggplot(trips, aes(x = total_duration_minutes, fill = driving_mode)) +
  geom_density(alpha = 0.8) +
  labs(title = "Trip Duration (minutes) by Driving Mode (All Trips)",
       x = "Total Duration (minutes)",
       y = "Density") +
  theme_gray() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +
  scale_fill_manual(values = c("lightblue", "pink2"))
```

We can also observe the distribution of trip duration **within Jakarta only**, meaning we filter out all origin and destinations that are discovered to be outside of Jakarta. Likewise, **cars** are slightly more preferred than **motorcycles** for longer trip duration.

```{r}
#| code-fold: true
ggplot(trips_inside_jakarta, aes(x = total_duration_minutes, fill = driving_mode)) +
  geom_density(alpha = 0.8) +
  labs(title = "Trip Duration (minutes) by Driving Mode (Within Jakarta)",
       x = "Total Duration (minutes)",
       y = "Density") +
  theme_gray() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +
  scale_fill_manual(values = c("lightblue", "pink2"))
```

### **4.2.4 Distribution of Trip Distance**

**1) By Time of Day**

Again, we randomly sample 2000 trip data to plot the violin plot of `total_distance_km` against hour categories. We can observe that longer distances are traveled during the **afternoon lull** and **evening peak** periods on average which could be attributed to high traffic volumes or jams on the road.

```{r}
#| code-fold: true
sampled_trips <- trips %>%
  sample_n(2000)

ggplot(sampled_trips, aes(x = hour_category, y = total_distance_km, fill = hour_category)) +
  geom_violin(trim = FALSE, alpha = 0.6, draw_quantiles = "0.5") +
  geom_jitter(width = 0.2, size = 0.5, alpha = 0.2, color = "black") +  
  labs(title = "Distribution of Trip Distance (km) by Hour Category",
       x = "Hour Category",
       y = "Total Distance (km)") +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)  # Tilt x-axis labels
  ) +
  scale_fill_manual(values = c("lightblue", "lightcoral", "green3", "lightpink", "lightyellow", "lightgray", "lightcyan", "lightgoldenrod")) +
  theme(legend.position = "none") 
```

**2) By Day of Week**

The chart suggests that trips taken on **Saturday** and **Sunday** have the highest average distance travelled, meaning that people are more willing to travel to destinations further away from where they stay on these days.

```{r}
#| code-fold: true
library(ggplot2)
library(dplyr)

# Sample 2000 trips
sampled_trips <- trips %>%
  sample_n(2000)

# Reorder origin_day as a factor with levels from Monday to Sunday
sampled_trips$origin_day <- factor(sampled_trips$origin_day, 
                                    levels = c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"))

# Create the violin plot
ggplot(sampled_trips, aes(x = origin_day, y = total_distance_km, fill = origin_day)) +
  geom_violin(trim = FALSE, alpha = 0.6, draw_quantiles = "0.5") +
  geom_jitter(width = 0.2, size = 0.5, alpha = 0.2, color = "black") +  
  labs(title = "Distribution of Trip Distance (km) by Day of Week",
       x = "Day of Week",
       y = "Total Distance (km)") +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)  # Tilt x-axis labels
  ) +
  scale_fill_manual(values = c("lightblue", "lightcoral", "green3", "lightpink", "lightyellow", "lightgray", "lightcyan")) +
  theme(legend.position = "none")
```

### 4.2.5 Day of Week and Hourly Patterns in Ride-hailing Demand

Now, let's generate a **heatmap** displaying the distribution of trips across different **days of the week** (using the `origin_day` column) and the specified **hour categories**, with the fill color indicating the **number of trips**. The days are ordered from Monday to Sunday, making it easier to interpret the data.

We can observe the **highest number of trips** taken during both morning peak and lull periods on Thursdays, as well as, Saturday midnight lull periods. On the other hand, Monday and Tuesday evening peaks have the **lowest number of trips**.

```{r fig.width=10, fig.height=8}
#| code-fold: true
# Create a new summary data frame using hour_category
heatmap_data <- trips %>%
  group_by(origin_day, hour_category) %>%
  summarise(number_of_trips = n(), .groups = 'drop') %>%
  arrange(origin_day, hour_category)

# Convert origin_day to a factor with specific order
heatmap_data$origin_day <- factor(heatmap_data$origin_day, 
                                   levels = c("monday", "tuesday", "wednesday", "thursday",
                                              "friday", "saturday", "sunday"))

# Convert hour_category to a factor for better ordering
heatmap_data$hour_category <- factor(heatmap_data$hour_category, 
                                      levels = c("midnight_peak", "midnight_lull", 
                                                 "morning_peak", "morning_lull", 
                                                 "afternoon_peak", "afternoon_lull", 
                                                 "evening_peak", "evening_lull")) 

# Create the heatmap
ggplot(heatmap_data, aes(x = hour_category, y = origin_day)) +
  geom_tile(aes(fill = number_of_trips), color = "white") +
  geom_text(aes(label = number_of_trips), color = "black", size = 4) +
  scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Number of Trips") +
  labs(title = "Heatmap of Number of Trips by Day and Hour Category",
       x = "Hour Category",
       y = "Day") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1) 
  )
```

## 4.3 Impact of Weather

### **4.3.1 Volume of Trips per District based on Weather Conditions (Rain or No Rain)**

We can visualise that the number of trips taken when there is no rain **outweights** the number of trips for **rainy weather** conditins rather significantly across all districts. This is good news for Grab since their ride-hailing services are still as **demanded** for not just during trip origins where rain might be seen as an inconvenience, but also during regular weather conditions where there is **no rain.**

```{r fig.width=6, fig.height=10}
#| code-fold: true
district_origin_long <- district_origin %>%
  select(district, not_rain, rain) %>%
  pivot_longer(cols = c(not_rain, rain), names_to = "weather_type", values_to = "trip_count")

# Plot the data
ggplot(district_origin_long, aes(x = district, y = trip_count, fill = weather_type)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(
    title = "Trip Counts by District and Weather Type",
    x = "District",
    y = "Number of Trips",
    fill = "Weather Type"
  ) +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(angle = 0, hjust = 1),
    legend.position = "top" 
  ) +
  scale_fill_manual(values = c("not_rain" = "skyblue", "rain" = "steelblue")) +
  coord_flip()

```

### **4.3.2 Volume of Trips based on Specific Weather Sub-Categories**

The most number of trips were taken when the weather condition for the origin was **'broken clouds', 'scattered clouds'** and **'overcast clouds'** which is Jakarta's most common weather condition throughout the year, with occasional wet weathers. This indicates that Grab services are as demanded even when there is no rain. In fact, we can notice that origin trips with **light rain** has more demand than trips found having **heavy rain**.

```{r fig.width=10, fig.height=7}
#| code-fold: true
# Summing trip counts by weather condition
weather_summary <- district_origin %>%
  summarise(across(starts_with("broken clouds"):starts_with("heavy rain"), sum)) %>%
  pivot_longer(cols = everything(), names_to = "weather_condition", values_to = "trip_count")

# Bar chart
ggplot(weather_summary, aes(x = reorder(weather_condition, -trip_count), y = trip_count)) +
  geom_bar(stat = "identity", fill = "lightblue3") +
  geom_text(aes(label = trip_count), vjust = -0.5, size = 4) +
  labs(
    title = "Number of Trips by Weather Condition",
    x = "Weather Condition",
    y = "Number of Trips"
  ) +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1) 
  )
```

### **4.3.3 Impact of Trip Duration on Trip Volume by Weather Conditions (Rain or No Rain)**

The analysis reveals that trips with **shorter durations** (measured in minutes) tend to have **higher demand**, with a greater number of trips recorded for shorter journeys compared to longer ones. This trend persists across different weather conditions, including both **rainy** and **non-rainy weather.**

This pattern suggests that weather conditionsâ€”whether rainy or no rainâ€”**do not significantly impact commuter behavio**r in relation to **trip length.** In other words, commuters are inclined to travel shorter distances more frequently, **regardless of weather**, while longer trips are less frequent under **all weather conditions.**

```{r fig.width=10, fig.height=6}
#| code-fold: true
district_long <- district_origin %>%
  pivot_longer(
    cols = c("rain","not_rain"),
    names_to = "weather_condition",
    values_to = "trip_count"
  )

ggplot(district_long, aes(x = avg_duration_minutes, y = trip_count, color = weather_condition)) +
  geom_point(alpha = 0.7) +
  geom_smooth(method="lm", se = TRUE) +
  facet_wrap(~ weather_condition, scales = "free_y") +
  scale_color_viridis_d(option = "plasma") +  
  labs(
    title = "Relationship Between Average Trip Duration and Trip Count by Weather Condition",
    x = "Average Trip Duration (minutes)",
    y = "Number of Trips"
  ) +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    legend.position = "none",  
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 14)
  )
```

### **4.3.4 Impact of Trip Duration on Trip Volume by Weather Sub-Categories**

Next, I will further drill down the `rain` and `not_rain` weather categories by its sub-categories. Interestingly, trip origins that are under **heavy rain** conditions tend to somewhat accumulate more trips especially for journeys that are **longer in duration (minutes).** This means that commuters likely expect for the heavy rain to last for a long time and would hence, result in a **greater** **demand** for Grab services when there is heavy rain. In contrast, start of trips with **light rain** shows the reverse trend where less trips are demanded for when duration of trip is longer.

```{r fig.width=10, fig.height=8}
#| code-fold: true
district_long <- district_origin %>%
  pivot_longer(
    cols = c("broken clouds", "scattered clouds", "light rain", "overcast clouds", 
             "moderate rain", "haze", "fog", "few clouds", "heavy rain"),
    names_to = "weather_condition",
    values_to = "trip_count"
  )

ggplot(district_long, aes(x = avg_duration_minutes, y = trip_count, color = weather_condition)) +
  geom_point(alpha = 0.7) +
  geom_smooth(method="lm", se = TRUE) +
  facet_wrap(~ weather_condition, scales = "free_y") +
  scale_color_viridis_d(option = "plasma") +  
  labs(
    title = "Relationship Between Average Trip Duration and Trip Count by Weather Condition",
    x = "Average Trip Duration (minutes)",
    y = "Number of Trips"
  ) +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    legend.position = "none",  
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

### **4.3.2 Impact of Weather on Trip Demand By *Motorcycles* and *Cars***

```{r}
#| code-fold: true
#| code-summary: Prepare data by aggregating district, weather & driving mode
trips_origin_weather_vehicle <- trips %>%
  filter(origin_weather_description %in% weather_descriptions) %>%
  group_by(origin_district, origin_weather_description, driving_mode) %>%
  summarise(num_of_trips = n(), .groups = 'drop') %>%
  # Create a new column for each combination of weather and driving mode
  pivot_wider(
    names_from = c(origin_weather_description, driving_mode),
    values_from = num_of_trips,
    values_fill = list(num_of_trips = 0)
  ) %>%
  rename(district = origin_district) %>%
  mutate(district = tolower(district))

# The rest remains the same
category_counts <- trips %>%
  group_by(origin_district, origin_weather_description_category) %>%
  summarise(total_category_count = n(), .groups = 'drop') %>%
  pivot_wider(
    names_from = origin_weather_description_category,
    values_from = total_category_count,
    values_fill = list(total_category_count = 0)
  ) %>%
  rename(district = origin_district) %>%
  mutate(district = tolower(district))

# Join the dataframes
trips_origin_weather_vehicle <- trips_origin_weather_vehicle %>%
  left_join(category_counts, by = "district")

# Prepare data by gathering columns into long format
plot_data <- trips_origin_weather_vehicle %>%
  select(district, contains("car"), contains("motorcycle")) %>%
  pivot_longer(
    cols = -district,
    names_to = c("weather", "driving_mode"),
    names_sep = "_",
    values_to = "num_of_trips"
  ) %>%
  filter(driving_mode %in% c("car", "motorcycle")) %>%
  group_by(weather, driving_mode) %>%
  summarise(total_trips = sum(num_of_trips, na.rm = TRUE), .groups = 'drop')

head(plot_data)
```

The **demand for** **cars** seem to be **higher** than motorcycles during trip origins with **light rain** and **overcast clouds.** This could be attributed to safety concerns of using motorcycles on slippery roads. Ironically, the trips taken during periods of **heavy rain** seem to be **dominated by motorcycles** than cars. Therefore, we cannot make much conclusions of how the weather impacts the mode of driving, but we can see that weather does **minimal impact** on **commuter's decision of their preferred vehicle.**

```{r fig.width=9, fig.height=6}
#| code-fold: true
ggplot(plot_data, aes(x = weather, y = total_trips, fill = driving_mode)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(
    aes(label = total_trips),
    position = position_dodge(width = 0.9),
    vjust = -0.5, color = "black", size = 3.5
  ) +
  scale_fill_manual(values = c("car" = "skyblue", "motorcycle" = "salmon")) +
  labs(
    title = "Comparison of Car and Motorcycle Trips Across Different Weather Conditions",
    x = "Weather Condition",
    y = "Total Number of Trips",
    fill = "Driving Mode"
  ) +
  theme_gray() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "top"
  )
```

## 4.4 Point of Interest (POI) Analysis

### **4.4.1 Distribution of POIs Across Districts**

We can visualise the distribution of POIs across each district using the `district_dest` augmented dataframe we created previously. With that said, we can observe that the top three highest number POIs are found in the districts Kebayoran Baru, Setia Budi and Grogol Petamburan.

```{r}
#| code-fold: true
# Plot the distribution of POIs across districts
ggplot(district_dest, aes(x = reorder(district, num_of_pois), y = num_of_pois)) +
  geom_bar(stat = "identity", fill = "lightblue3") +
  labs(title = "Distribution of POIs Across Districts",
       x = "District",
       y = "Number of POIs") +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

Next, let us use the `pois_num` dataframe created earlier. I will plot a heatmap plot using the `geom_tile()` function of the **ggplot2** package to understand how the number of trips demanded vary by district and POI category. We can evidently see that districts like ***Danau Sunter*** have **low to no POIs**, with only **essentials** (e.g. clinics, veteranarians) found in the district. However, in districts that may be more populated or urbanised, we see a higher number of POIs for the **office businesses, restaurants and food, and shops** as marked by the darker shades of blue below.

```{r fig.width=10, fig.height=10}
#| code-fold: true
# Count the number of POIs by district
pois_num_cat <- pois %>%
  st_drop_geometry() %>%
  group_by(district, category) %>%
  summarise(num_of_pois = n(), .groups = 'drop')

heatmap_plot <- ggplot(pois_num_cat, aes(x = category, y = district, fill = num_of_pois)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(
    title = "Heatmap of Points of Interest by District and Category",
    x = "POI Category",
    y = "District",
    fill = "Number of POIs"
  ) +
  theme_minimal() + # Clean theme
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold") 
  )

print(heatmap_plot)
```

### **4.4.2 Demand of Ride-hailing Services by POI**

To prepare the dataset for the analysis involving POIs, I will augment the `jakarta_pois.rds` dataset by aggregating the trips data from the `trips` simple dataframe. Restaurants, office businesses and shops seem to dominate the POIs available in Jakarta, while cultural attractions and recreation entertainment suggests to be less available.

```{r fig.width=10, fig.height=8}
#| code-fold: true
category_counts <- pois %>%
  group_by(category) %>%
  summarise(num_of_pois = n()) %>%
  arrange(desc(num_of_pois))

ggplot(category_counts, aes(x = reorder(category, -num_of_pois), y = num_of_pois, fill = num_of_pois)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = num_of_pois), vjust = -0.5, size = 4) +
  labs(
    title = "Distribution of POIs Across Jakarta",
    x = "Category",
    y = "Number of POIs"
  ) +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1, color = "grey30"),
    legend.position = "none"
  ) +
  scale_fill_gradient(low = "lightblue", high = "darkblue") 
```

We can also plot the number of POIs discovered across each POI category type by using a radar chart. Here, I am employing the **`radarchart()`** function of the **fmsb** package.

```{r fig.width=10, fig.height=10}
#| code-fold: true
category_counts <- pois %>%
  group_by(category) %>%
  summarise(num_of_pois = n()) %>%
  arrange(desc(num_of_pois))

max_value <- max(category_counts$num_of_pois)
min_value <- 0

radar_data <- rbind(
  rep(max_value, nrow(category_counts)),
  rep(min_value, nrow(category_counts)),
  t(category_counts$num_of_pois)
)

radar_data <- as.data.frame(radar_data)
colnames(radar_data) <- category_counts$category

radarchart(
  radar_data,
  axistype = 1,
  pcol = rgb(0.2, 0.4, 0.4, 0.6),  # Line color
  pfcol = rgb(0.2, 0.2, 0.2, 0.2),  # Fill color
  plwd = 2,  # Line width
  cglcol = "lightblue3",  # Grid line color
  cglty = 1,  # Grid line type
  axislabcol = "black",  # Axis label color
  caxislabels = seq(0, max_value, length.out = 5),  # Axis labels
  cglwd = 1.2,  # Grid line width
  vlcex = 1  # Category label size
)

title("Distribution of POIs Across Jakarta", cex.main = 1.4)
```

Next, I will go deeper into finding out how many Grab trips were taken to these destinations at the district level. It can be observed that a l**arger number of POIs** **(pink)** within a district lead to similarly **higher number of Grab trips taken (blue)** to the district.

```{r fig.width=10, fig.height=6}
#| code-fold: true
# Reshape the data for plotting
district_long <- district_dest %>%
  pivot_longer(cols = c(num_of_trips, num_of_pois), 
               names_to = "metric", 
               values_to = "count")

# Plot the line charts
ggplot(district_long, aes(x = district, y = count, group = metric, color = metric)) +
  geom_line(linewidth = 1) +
  geom_point(size = 2) +
  labs(
    title = "Trends in Number of Trips and Availability of POIs by District",
    x = "District",
    y = "Number of Trips",
    color = "Metric"
  ) +
  scale_color_manual(values = c("num_of_trips" = "lightblue3", "num_of_pois" = "pink3")) + 
  theme_gray() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
    legend.position = "top"
  )
```

The scatterplot below indicates that **more Grab trips** are taken for **smaller average distances travelled** from the passenger's origin, suggesting most trips are **bounded within shorter distances**. This is surprising since I would have assumed a higher demand for Grab services for when the destination is far from the passenger's origin.

In addition, we can also observe that destinations with a **higher number of POI** **(darker shades of blue)** tend to result in **more Grab trips** taken. This means that passengers are more likely to take a trip to districts in Jakarta that offer **more POIs.**

```{r fig.width=10, fig.height=6}
#| code-fold: true
district_pois_5 <- district_dest %>%
  mutate(pois_category = cut(num_of_pois, 
                              breaks = 5, 
                              labels = c("100", "200", "300", "400", "500"), 
                              include.lowest = TRUE))

color_palette <- c("100" = "#A3C6E4",   # Light blue
                   "200" = "#76A4D6",      # Medium light blue
                   "300" = "#4A83C6",   # Medium blue
                   "400" = "#1F5DA0",     # Dark blue
                   "500" = "#003C71") # Darker blue

ggplot(district_pois_5, aes(x = num_of_trips, y = avg_distance_km, size = num_of_pois, color = pois_category)) +
  geom_point(alpha = 0.7) +
  labs(
    title = "Correlation of Number of Trips and Average Distance by Number of POIs",
    x = "Number of Trips",
    y = "Average Distance (km)",
    size = "Number of POIs",
    color = "Number of POIs"  # Renamed here
  ) +
  scale_size(range = c(1, 6)) +  # Adjust point size range
  scale_color_manual(values = color_palette) +  # Apply custom color palette
  theme_gray() +
  theme(
    plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
    legend.position = "right"
  )
```

### **4.4.3 Correlation of Number of Trips and POIs**

We can observe a **positive correlation** between the number of trips taken to a destination and the availability of POIs in the destination district based on the linear regression model below. This means that more trips are demanded to the destination when there are more POIs available, typically these districts might be within the city with more amenities for people to eat, shop and work.

```{r fig.width=10, fig.height=6}
#| code-fold: true
# Calculate the correlation coefficient
correlation_result <- cor(district_dest$num_of_trips, district_dest$num_of_pois)

# Create a scatter plot with a regression line
ggplot(district_dest, aes(x = num_of_pois, y = num_of_trips)) +
  geom_point(color = "blue", size = 3, alpha = 0.6) +  # Points
  geom_smooth(method = "lm", se = TRUE, color = "red") +  # Linear regression line
  labs(
    title = "Correlation between Number of Trips and Number of POIs",
    x = "Number of POIs",
    y = "Number of Trips"
  ) +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
  )

# Print the correlation result
print(paste("Correlation between Number of Trips and Number of POIs:", round(correlation_result, 2)))
```

By including the average distance traveled, we can see that **fewer passengers** tend to take ride-hailing services like Grab for when the **average distance of trips are shorter.** For district destinations with higher number of POIs available, trip distances tend to be **shorter** too, which could mean that passengers likely **reside near to these POIs**.

```{r fig.width=10, fig.height=6}
#| code-fold: true
district_dist_6 <- district_dest %>%
  mutate(distance_category = cut(avg_distance_km, 
                                  breaks = 6, 
                                  labels = c("5.0", "5.5", "6.0", "6.5", "7.0", "7.5"), 
                                  include.lowest = TRUE))

distance_color_palette <- c("5.0" = "#A3C6E4",   # Light blue
                             "5.5" = "#76A4D6",   # Medium light blue
                             "6.0" = "#4A83C6",   # Medium blue
                             "6.5" = "#1F5DA0",   # Dark blue
                             "7.0" = "#003C71",   # Darker blue
                             "7.5" = "midnightblue")  # Deepest blue

district_dist_6 <- district_dist_6 %>%
  mutate(distance_category = factor(distance_category))

ggplot(district_dist_6, aes(x = num_of_trips, y = num_of_pois)) +
  geom_point(aes(color = distance_category, size = distance_category), alpha = 0.7) + 
  labs(
    title = "Relationship between Number of Trips and Number of POIs by Average Distance",
    x = "Number of Trips",
    y = "Number of POIs",
    size = "Average Distance Category (km)",  
    color = "Average Distance Category (km)"  
  ) +
  scale_size_manual(values = c(1, 2, 3, 4, 5, 6)) +  
  scale_color_manual(values = distance_color_palette) + 
  theme_gray() +
  theme(
    plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
    axis.title = element_text(size = 12),
    legend.position = "top"
  )
```

### **4.4.4 Traffic Volumes By Time of Day and POI Type**

Next, i will want to understand traffic volumes by Hour Category and POI Category. Before that, I will create a new dataframe `district_hour_pois` to aggregate the 8 hour categories into 4 instead, namely morning, afternoon, evening and midnight.

```{r}
#| code-fold: true
# Define time-of-day categories based on hour_category labels
trips_num <- trips %>%
  group_by(destination_district, hour_category) %>%
  summarise(num_of_trips = n(), .groups = 'drop') %>%
  rename(district = destination_district) %>%
  mutate(
    district = tolower(district),
    # Group hour_category into broader time-of-day groups
    time_of_day = case_when(
      hour_category %in% c("morning_peak", "morning_lull") ~ "morning",
      hour_category %in% c("afternoon_peak", "afternoon_lull") ~ "afternoon",
      hour_category %in% c("evening_peak", "evening_lull") ~ "evening",
      hour_category %in% c("midnight_peak", "midnight_lull") ~ "midnight",
      TRUE ~ "other"
    ),
    # Set specific ordering for time_of_day
    time_of_day = factor(time_of_day, levels = c("morning", "afternoon", "evening", "midnight"))
  ) %>%
  # Group by district and new time_of_day categories, summing num_of_trips
  group_by(district, time_of_day) %>%
  summarise(num_of_trips = sum(num_of_trips), .groups = 'drop')

# Count the number of POIs by district & category
pois_num_cat <- pois %>%
  st_drop_geometry() %>%
  group_by(district, category) %>%
  summarise(num_of_pois = n(), .groups = 'drop')

# Combine the two datasets by district
district_hour_pois <- trips_num %>%
  inner_join(pois_num_cat, by = "district", relationship = "many-to-many") %>%
  arrange(district, time_of_day)

# View the combined dataset
head(district_hour_pois)
```

Across all POI types, districts offering **restaurants** and **shops** tend to garner the **highest demand** for Grab services. In constrast, **recreation entertainment** showed to be **least demanded** by Grab users.

-   In the **morning**, Grab services are most demanded to destinations that offer **facilities services, shops and essentials**, where commuters are likely headed to work or settle household errands. This trend can also be observed in the **afternoon**.

-   When it comes to **evening** time, the number of trips taken to **restaurants** are seen to rise likely since commuters are done with the day and are headed for dinner. It is also surprising that Grab transport are also **highly active during midnight (12am - 6pm)**, namely where destinations are facilities services, shops and restaurants. This could be due to commuters ending work late or heading out for work in the early morning.

```{r fig.width=10, fig.height=8}
#| code-fold: true
aggregated_pois <- district_hour_pois %>%
  group_by(category, time_of_day) %>%
  summarise(num_of_trips = sum(num_of_trips, na.rm = TRUE), .groups = "drop")  

ggplot(aggregated_pois, aes(x = category, y = num_of_trips, fill = time_of_day)) +
  geom_bar(stat = "identity") + 
  geom_text(aes(label = num_of_trips), 
            position = position_stack(vjust = 0.5),  
            color = "black", 
            size = 3.5) +
  labs(
    title = "Number of POIs Visited Using Grab by Time of Day",
    x = "POI Category",
    y = "Number of POIs"
  ) +
  theme_gray() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), 
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top"
  ) + 
  scale_fill_brewer(palette = "Blues")
```

### 4.4.5 Number of Trips per POI

Finally, I can derive the total number of trips per POI found in a district by augmenting the `district_data` dataset. We can observe that the districts, **Cakung, Johar Bahru** and **Danau Suntar Dll** showed the most demand for Grab services for every POI available. However, Danau Suntar Dll is a lake with only **3 POIs** unlike other districts with 100s of POIs which will skew the results.

```{r fig.width=7, fig.height=10}
#| code-fold: true
trips_poi_all <- district_data %>%
  left_join(pois_num, by = 'district') %>%
  mutate(trips_per_poi = total_trips / num_of_pois) %>%
  select(district, trips_per_poi)

ggplot(trips_poi_all, aes(x = reorder(district, -trips_per_poi), y = trips_per_poi)) +
  geom_bar(stat = "identity", fill = "skyblue2") + 
  labs(
    title = "Total Number of Grab Trips per POI Across Districts",
    x = "Number of Trips per POI",
    y = "District"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"), 
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  coord_flip()
```

## **4.5 Origin-Destination Spatial Flows**

Next, we can also delve into the spatial flows between origin and destination districts. To do so, I will leverage the `geom_alluviam()` function of the **ggplot2** and **ggalluvial** packages to map the flows. I will also ientify the top 5 origin / destination districts by doing a filter() on the data as shown.

### **4.5.1 Flow from All Origins to Top 5 Destinations**

We can see how complex the spread of origin districts are, where a thicker line connecting the origin and destination resembles a higher demand for Grab. In this case, trips taken **outside of Jakarta** and moving into the district of **Kebayoran Lama** are the highest. The reverse is also true; Grab trips moving from **Kebayoran Lama** to **outside of Jakarta** are the highest.

```{r fig.width=10, fig.height=10}
#| code-fold: true
#| warning: false
# Identify the top 5 destination districts
top_5_destinations <- trips %>%
  count(destination_district) %>%
  top_n(5, wt = n) %>%
  pull(destination_district)

# Filter the data to include only top 5 destinations
flow_data <- trips %>%
  filter(destination_district %in% top_5_destinations) %>%
  count(origin_district, destination_district) %>%
  rename(count = n)

# Plot the alluvial diagram
ggplot(flow_data, aes(axis1 = origin_district, axis2 = destination_district, y = count)) +
  geom_alluvium(aes(fill = destination_district)) +
  geom_stratum() +
  geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
  labs(title = "Flow from Origin to Top 5 Destination Districts", 
       x = "Districts", 
       y = "Number of Trips") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
```

### **4.5.2 Flow Pattern from Top 5 Origins to All Destinations**

As for the trips moving out from the **top 5 origin** districts, we see that most trips come from outside of Jakarta, meaning that a substantial flow of Grab traffic comes from **outbound** of Jakarta. As compared to the previous flow chart, the destinations of these 5 origins seem to **spread evenly across all districts** of Jakarta. Perhaps, the most popular destination spots for Grab trips are found in **Kebayoran Lama, Setia Budi** and **Tanah Abang**.

```{r fig.width=10, fig.height=10}
#| code-fold: true
#| warning: false
# Identify the top 5 origin districts based on the number of trips
top_5_origins <- trips %>%
  count(origin_district) %>%
  top_n(5, wt = n) %>%
  pull(origin_district)

# Filter the data to include only top 5 origins and their corresponding destination districts
flow_data <- trips %>%
  filter(origin_district %in% top_5_origins) %>%
  count(origin_district, destination_district) %>%
  rename(count = n)

# Plot the alluvial diagram
ggplot(flow_data, aes(axis1 = origin_district, axis2 = destination_district, y = count)) +
  geom_alluvium(aes(fill = origin_district)) +  # Use origin_district for fill
  geom_stratum() +
  geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 4) +
  labs(title = "Flow from Top 5 Origin Districts to Destination Districts", 
       x = "Districts", 
       y = "Number of Trips") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        axis.text.x = element_text(angle = 45, hjust = 1))
```

### **4.5.3 Flow Patterns from Top 5 Origins to Top 5 Destinations**

I believe we can make the most meaningful analysis when just looking at the **top 5 originating** and **top** **5 destination** districts where these districts had the highest number of Grab trips taken. We can observe that Setia Budi is a popular origin and destination for Grab services, in fact, many of the trips are found **within the district** itself.

```{r fig.width=10, fig.height=10}
#| code-fold: true
#| warning: false
# Step 1: Identify the top 5 origin districts
top_5_origins <- trips %>%
  count(origin_district) %>%
  top_n(5, wt = n) %>%
  pull(origin_district)

# Step 2: Identify the top 5 destination districts
top_5_destinations <- trips %>%
  count(destination_district) %>%
  top_n(5, wt = n) %>%
  pull(destination_district)

# Step 3: Filter the trips data for top districts only
flow_data <- trips %>%
  filter(origin_district %in% top_5_origins & destination_district %in% top_5_destinations) %>%
  count(origin_district, destination_district) %>%
  rename(count = n)

# Step 4: Create a new column to distinguish origins and destinations
flow_data <- flow_data %>%
  mutate(district_type = ifelse(origin_district %in% top_5_origins, "Origin", "Destination"))

# Step 5: Plot the alluvial diagram
ggplot(flow_data, aes(axis1 = origin_district, axis2 = destination_district, y = count)) +
  geom_alluvium(aes(fill = origin_district)) + 
  geom_stratum() +
  geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 4, color = "black") +
  labs(title = "Flow of Trips Between Top 5 Origin and Top 5 Destination Districts in Jakarta", 
       x = "Districts", 
       y = "Number of Trips") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        axis.text.x = element_text(angle = 45, hjust = 1))
```

## 4.6 Piecing It Together

![EDA - Overall Trips Analysis, All Trip Type, Driving Mode, Weather, Time and Days](images/EDA%20Overall-01.png){width="1000"}

![EDA Prototype -By Point of Interest, All Trip Type, Driving Mode, Weather, Time and Days](images/EDA%20POI.png){width="1000"}

![EDA - Demand Analysis, All Trip Type, Driving Mode, Weather, Time and Days](images/EDA%20Demand%20Analysis.png){width="1000"}

![EDA - Impact of Weather Analysis, All Trip Type, Driving Mode, Weather, Time and Days](images/EDA%20-%20Weather.png){width="1000"}

# 5. Exploratory Spatial Data Analysis - Using Local Indicators of Spatial Association (LISA)

Now, I would also like to perform local spatial autocorrelation to identify specific areas of clustering of number of Grab tripsÂ **at a local district level**Â using LISA methods (Anselin, 1995).

To conduct LISA analysis, I will be using **Local Moranâ€™s Ii**Â which is an extension ofÂ **Global Moranâ€™s I**, designed to identifyÂ **local clusters**Â andÂ **spatial outliers**Â within a dataset.Â **Local Moranâ€™s Ii**Â provides a measure of autocorrelation at individual locations, identifying where significant clustering or outliers exist.

> **I will be conducting these LISA analysis on the**
>
> -   Overall Number of Trips
>
> -   Number of Trips by **Driving Mode** (Car/Motorcycle)
>
> -   Number of Trips by **Weather** (Rain/No Rain)
>
> -   Number of **POIs**
>
> -   Number of Trips **per POI**
>
> -   Number of Trips **per Capita** (i.e. population size)

## 5.1 **Computing Contiguity Neighbours**

Firstly, let's create a `district_geom` simple feature dataframe containing the polygon geometry data of each unique district of Jakarta.

```{r}
district_geom <- jakarta_district %>%
  select(district, geometry) %>% 
  st_transform(crs = 4326)

# Inspect
district_geom
```

Next, we append the `geometry` column to the existing `district_dest` dataframe

::: panel-tabset
### district_origin

```{r}
district_origin <- district_origin %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

# Inspect
district_origin
```

### district_dest

```{r}
district_dest <- district_dest %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

# Inspect
district_dest
```
:::

We can now derive ourÂ **neighbour list object**Â by utilising theÂ `st_contiguity()`Â function from theÂ `sfdep`Â package to create contiguity weight matrices for the study area. Let us configure different `queen` parameters that I will eventually like users of the ShinyApp to play with.

-   **queen = TRUE:** refers to computing the neighbour list by **queen contiguity** (neighbours share a common edge and or corner)

-   **queen = FALSE**: refers to computing the neighbour list by **rook contiguity** (similar to bishop, where neighbours share a common edge only)

::: panel-tabset
### Queen - origin

Using `district_origin` sf dataframe and `queen = TRUE`

```{r}
origin_nb_queen <- st_contiguity(district_origin$geometry, queen=TRUE)
summary(origin_nb_queen)
```

### Queen - dest

Using `district_dest`sf dataframe and `queen = TRUE`

```{r}
dest_nb_queen <- st_contiguity(district_dest$geometry, queen=TRUE)
summary(dest_nb_queen)
```

### Rook - origin

Using `district_origin` sf dataframe and `queen = FALSE`

```{r}
origin_nb_rook <- st_contiguity(district_origin$geometry, queen=FALSE)
summary(origin_nb_rook)
```

### Rook - dest

Using `district_dest` sf dataframe and `queen = FALSE`

```{r}
dest_nb_rook <- st_contiguity(district_dest$geometry, queen=FALSE)
summary(dest_nb_rook)
```
:::

## **5.2 Computing Row-Standardised Weight Matrix**

::: panel-tabset
### Queen - origin

```{r}
origin_wt_queen <- st_weights(origin_nb_queen, style = "W", allow_zero = TRUE)
```

We will mutate the newly created neighbour list objectÂ `origin_nb_queen` and weight matrixÂ `origin_wt_queen` into our existingÂ `district_origin`. This results in a newly created object calledÂ `origin_queen_wm`.

```{r}
origin_queen_wm <- district_origin %>%
  mutate(nb = origin_nb_queen,
         wt = origin_wt_queen,
         .before = 1) 

# Inspect
origin_queen_wm
```

### Queen - dest

```{r}
dest_wt_queen <- st_weights(dest_nb_queen, style = "W", allow_zero = TRUE)
```

We will mutate the newly created neighbour list objectÂ `dest_nb_queen` and weight matrixÂ `dest_wt_queen` into our existingÂ `district_dest`. This results in a newly created object calledÂ `dest_queen_wm`.

```{r}
dest_queen_wm <- district_dest %>%
  mutate(nb = dest_nb_queen,
         wt = dest_wt_queen,
         .before = 1) 

# Inspect
dest_queen_wm
```

### Rook - origin

```{r}
origin_wt_rook <- st_weights(origin_nb_rook, style = "W", allow_zero = TRUE)
```

We will mutate the newly created neighbour list objectÂ `origin_nb_rook` and weight matrixÂ `origin_wt_rook` into our existingÂ `district_origin`. This results in a newly created object calledÂ `origin_rook_wm`.

```{r}
origin_rook_wm <- district_origin %>%
  mutate(nb = origin_nb_rook,
         wt = origin_wt_rook,
         .before = 1) 

# Inspect
origin_rook_wm
```

### Rook - dest

```{r}
dest_wt_rook <- st_weights(dest_nb_rook, style = "W", allow_zero = TRUE)
```

We will mutate the newly created neighbour list objectÂ `dest_nb_rook` and weight matrixÂ `dest_wt_rook` into our existingÂ `district_dest`. This results in a newly created object calledÂ `dest_rook_wm`.

```{r}
dest_rook_wm <- district_dest %>%
  mutate(nb = dest_nb_rook,
         wt = dest_wt_rook,
         .before = 1) 

# Inspect
dest_rook_wm
```
:::

## **5.3 Computing Local *Moranâ€™s I~i~***

**Local Moranâ€™s I~i~** is an extension of **Global Moranâ€™s I**, designed to identify **local clusters** and **spatial outliers** within a dataset. **Local Moranâ€™s I~i~** provides a measure of autocorrelation at individual locations, identifying where significant clustering or outliers exist.

Letâ€™s utilise theÂ `local_moran()`Â function of **sfdep** to handle the computations.

::: panel-tabset
### Queen - origin

```{r}
lisa_queen_origin <- origin_queen_wm %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

# Inspect
lisa_queen_origin
```

### Queen - dest

```{r}
lisa_queen_dest <- dest_queen_wm %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

# Inspect
lisa_queen_dest
```

### Rook - origin

```{r}
lisa_rook_origin <- origin_rook_wm %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

# Inspect
lisa_rook_origin
```

### Rook - dest

```{r}
lisa_rook_dest <- dest_rook_wm %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

# Inspect
lisa_rook_dest
```
:::

## **5.4 Visualising Local *Moranâ€™s I~i~***

To ease our analysis, an approach we can take is to plot the local Moranâ€™s I values across to visualise the observed values across each district. Weâ€™ll use a choropleth map from the `tmap` package to analyse the spatial patterns.

::: panel-tabset
### Queen - origin

```{r fig.width=7, fig.height=4}
tm_shape(lisa_queen_origin) +
  tm_fill("ii", 
          palette = c("#B3EBF2","green1","orange","red"),
          title = "Local Moran's I",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Spatial Autocorrelation of Trip Origins in Jakarta (Local Moran's I)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
tmap_mode("view")
lisa_queen_origin <- lisa_queen_origin %>% 
  mutate(label = paste("District:", district, "| Local Moran's I:", round(ii, 3)))

tm_shape(lisa_queen_origin) +
  tm_fill("ii", 
          palette = c("#B3EBF2", "green1", "orange", "red"),
          title = "Local Moran's I",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```

### Queen - dest

```{r fig.width=7, fig.height=4}
tm_shape(lisa_queen_dest) +
  tm_fill("ii", 
          palette = c("#B3EBF2","green1","orange","red"),
          title = "Local Moran's I",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Spatial Autocorrelation of Trip Destinations in Jakarta (Local Moran's I)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
lisa_queen_dest <- lisa_queen_dest %>% 
  mutate(label = paste("District:", district, "| Local Moran's I:", round(ii, 3)))

tmap_mode("view")
tm_shape(lisa_queen_dest) +
  tm_fill("ii", 
          palette = c("#B3EBF2", "green1", "orange", "red"),
          title = "Local Moran's I",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```

### Rook - origin

```{r fig.width=7, fig.height=4}
tm_shape(lisa_rook_origin) +
  tm_fill("ii", 
          palette = c("#B3EBF2","green1","orange","red"),
          title = "Local Moran's I",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Spatial Autocorrelation of Trip Origins in Jakarta (Local Moran's I)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.6,
            legend.text.size = 0.6,
            legend.hist.size = 0.6,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
lisa_rook_origin <- lisa_rook_origin %>% 
  mutate(label = paste("District:", district, "| Local Moran's I:", round(ii, 3)))

tmap_mode("view")
tm_shape(lisa_rook_origin) +
  tm_fill("ii", 
          palette = c("#B3EBF2", "green1", "orange", "red"),
          title = "Local Moran's I",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```

### Rook - dest

```{r fig.width=7, fig.height=4}
tm_shape(lisa_rook_dest) +
  tm_fill("ii", 
          palette = c("#B3EBF2","green1","orange","red"),
          title = "Local Moran's I",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Spatial Autocorrelation of Trip Destinations in Jakarta (Local Moran's I)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
lisa_rook_dest <- lisa_rook_dest %>% 
  mutate(label = paste("District:", district, "| Local Moran's I:", round(ii, 3)))

tmap_mode("view")
tm_shape(lisa_rook_dest) +
  tm_fill("ii", 
          palette = c("#B3EBF2", "green1", "orange", "red"),
          title = "Local Moran's I",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```
:::

## **5.5 Visualising Local *Moranâ€™s I~i~* P-value**

As mentioned in the section above, we shall not hastily conclude the clustering results observed. Instead, let us also evaluate whether the observed clustering (high-high or low-low) isÂ **statistically significant**Â orÂ **could have occurred by chance**. Hence, we can derive the p-values from Local Moranâ€™s I by using theÂ `p_ii_sim`Â field to determine statistical signficance across districts.

::: panel-tabset
### Queen - origin

```{r fig.width=7, fig.height=4}
tm_shape(lisa_queen_origin) +
  tm_fill("p_ii_sim", 
          palette = c("green3","lightyellow","orange","red"),
          title = "p-value",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Statistically Significant Spatial Autocorrelation of Trip Origins (p-value)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
lisa_queen_origin <- lisa_queen_origin %>% 
  mutate(label = paste("District:", district, "| P-value:", round(p_ii_sim, 3)))

tmap_mode("view")
tm_shape(lisa_queen_origin) +
  tm_fill("p_ii_sim", 
          palette = c("green3","lightyellow","orange","red"),
          title = "P-value",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```

### Queen - dest

```{r fig.width=7, fig.height=4}
tm_shape(lisa_queen_dest) +
  tm_fill("p_ii_sim", 
          palette = c("green3","lightyellow","orange","red"),
          title = "p-value",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Statistically Significant Spatial Autocorrelation of Trip Destinations (p-value)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
lisa_queen_dest <- lisa_queen_dest %>% 
  mutate(label = paste("District:", district, "| P-value:", round(p_ii_sim, 3)))

tmap_mode("view")
tm_shape(lisa_queen_dest) +
  tm_fill("p_ii_sim", 
          palette = c("green3","lightyellow","orange","red"),
          title = "P-value",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```

### Rook - origin

```{r fig.width=7, fig.height=4}
tm_shape(lisa_rook_origin) +
  tm_fill("p_ii_sim", 
          palette = c("green3","lightyellow","orange","red"),
          title = "p-value",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Statistically Significant Spatial Autocorrelation of Trip Origins (p-value)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
lisa_rook_origin <- lisa_rook_origin %>% 
  mutate(label = paste("District:", district, "| P-value:", round(p_ii_sim, 3)))

tmap_mode("view")
tm_shape(lisa_rook_origin) +
  tm_fill("p_ii_sim", 
          palette = c("green3","lightyellow","orange","red"),
          title = "P-value",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```

### Rook - dest

```{r fig.width=7, fig.height=4}
tm_shape(lisa_rook_dest) +
  tm_fill("p_ii_sim", 
          palette = c("green3","lightyellow","orange","red"),
          title = "p-value",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Statistically Significant Spatial Autocorrelation of Trip Destinations (p-value)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
lisa_rook_dest <- lisa_rook_dest %>% 
  mutate(label = paste("District:", district, "| P-value:", round(p_ii_sim, 3)))

tmap_mode("view")
tm_shape(lisa_rook_dest) +
  tm_fill("p_ii_sim", 
          palette = c("green3","lightyellow","orange","red"),
          title = "P-value",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```
:::

## **5.6 Visualising Statistically Significant Local *Moranâ€™s I~i~***

With that said, I would like to switch our focus to districts that display statistically significant localÂ *Moranâ€™s I*Â values. To execute this, I will attempt toÂ **remove**Â all localÂ *Moranâ€™s I*Â values withÂ **p-values greater than 0.05**. Subsequently, I will use theÂ `tmap`Â function to plot the choropleth of statistically significant local spatial autocorrelation on the map of Jakarta.

::: panel-tabset
### Queen - origin

```{r fig.width=7, fig.height=4}
#| warning: false
lisa_queen_origin_sig <- lisa_queen_origin  %>%
  filter(p_ii_sim < 0.05)

tm_shape(lisa_queen_origin)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
tm_shape(lisa_queen_origin_sig) +
  tm_fill("ii", 
          palette = c("#B3EBF2",'green3',"green3","lightyellow","orange","orange4","red"),
          title = "Local Moran's I (p-value < 0.05)",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Statistically Significant Spatial Autocorrelation of Trip Origins (Local Moran's I)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
#| warning: false
lisa_queen_origin_sig <- lisa_queen_origin_sig %>% 
  mutate(label = paste("District:", district, "| Local Moran's I:", round(ii, 3)))

tmap_mode("view")
tm_shape(lisa_queen_origin) +
  tm_polygons(id = "") +
  tm_borders(col = "black", alpha = 0.6)+
tm_shape(lisa_queen_origin_sig) +
  tm_fill("ii", 
          palette = c("#B3EBF2",'green3',"green3","lightyellow","orange","orange4","red"),
          title = "Local Moran's I (p-value < 0.05)",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```

### Queen - dest

```{r fig.width=7, fig.height=4}
#| warning: false
lisa_queen_dest_sig <- lisa_queen_dest  %>%
  filter(p_ii_sim < 0.05)

tm_shape(lisa_queen_dest)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
tm_shape(lisa_queen_dest_sig) +
  tm_fill("ii", 
          palette = c("#B3EBF2",'green3',"green3","lightyellow","orange","orange4","red"),
          title = "Local Moran's I (p-value < 0.05)",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Statistically Significant Spatial Autocorrelation of Trip Destinations (Local Moran's I)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
#| warning: false
lisa_queen_dest_sig <- lisa_queen_dest_sig %>% 
  mutate(label = paste("District:", district, "| Local Moran's I:", round(ii, 3)))

tmap_mode("view")
tm_shape(lisa_queen_dest) +
  tm_polygons(id = "") +
  tm_borders(col = "black", alpha = 0.6)+
tm_shape(lisa_queen_dest_sig) +
  tm_fill("ii", 
          palette = c("#B3EBF2",'green3',"green3","lightyellow","orange","orange4","red"),
          title = "Local Moran's I (p-value < 0.05)",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```

### Rook - origin

```{r fig.width=7, fig.height=4}
#| warning: false
lisa_queen_origin_sig <- lisa_queen_origin  %>%
  filter(p_ii_sim < 0.05)

tm_shape(lisa_queen_origin)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
tm_shape(lisa_queen_origin_sig) +
  tm_fill("ii", 
          palette = c("#B3EBF2",'green3',"green3","lightyellow","orange","orange4","red"),
          title = "Local Moran's I (p-value < 0.05)",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Statistically Significant Spatial Autocorrelation of Trip Origins (Local Moran's I)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
#| warning: false
lisa_queen_origin_sig <- lisa_queen_origin_sig %>% 
  mutate(label = paste("District:", district, "| Local Moran's I:", round(ii, 3)))

tmap_mode("view")
tm_shape(lisa_queen_origin) +
  tm_polygons(id = "") +
  tm_borders(col = "black", alpha = 0.6)+
tm_shape(lisa_queen_origin_sig) +
  tm_fill("ii", 
          palette = c("#B3EBF2",'green3',"green3","lightyellow","orange","orange4","red"),
          title = "Local Moran's I (p-value < 0.05)",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```

### Rook - dest

```{r fig.width=7, fig.height=4}
#| warning: false
lisa_rook_dest_sig <- lisa_rook_dest  %>%
  filter(p_ii_sim < 0.05)

tm_shape(lisa_rook_dest)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
tm_shape(lisa_rook_dest_sig) +
  tm_fill("ii", 
          palette = c("#B3EBF2",'green3',"green3","lightyellow","orange","orange4","red"),
          title = "Local Moran's I (p-value < 0.05)",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.2) +
  tm_borders(col = "black", alpha = 0.5) +
  tm_layout(main.title = "Statistically Significant Spatial Autocorrelation of Trip Destinations (Local Moran's I)",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.8,
            legend.text.size = 0.8,
            legend.hist.size = 0.8,
            legend.outside = TRUE,
            legend.outside.position = "right",
            asp = 1.2,
            frame = TRUE) +
  tm_compass(type = "8star", text.size = 0.7, size = 3, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.5) +
  tm_grid(labels.size = 0.6, alpha = 0.1)
```

```{r}
#| code-fold: true
#| message: false
#| warning: false
lisa_rook_dest_sig <- lisa_rook_dest_sig %>% 
  mutate(label = paste("District:", district, "| Local Moran's I:", round(ii, 3)))

tmap_mode("view")
tm_shape(lisa_rook_dest) +
  tm_polygons(id = "") +
  tm_borders(col = "black", alpha = 0.6)+
tm_shape(lisa_rook_dest_sig) +
  tm_fill("ii", 
          palette = c("#B3EBF2",'green3',"green3","lightyellow","orange","orange4","red"),
          title = "Local Moran's I (p-value < 0.05)",
          midpoint = NA,
          id = "label"
  ) +
  tm_borders(col = "black", alpha = 0.5) 
tmap_mode("plot")
```
:::

## **5.7 LISA Classification Categories**

A LISA (Local Indicators of Spatial Association) map is a visualisation tool suitable for our spatial analysis in illustrating the results of Local Moranâ€™s I. By doing so, we can identify **spatial patterns, clusters,** and **outliers** in the **demand for Grab services** by mapping the local statistics for each district in Jakarta.

> **These are the key components of the LISA maps we will plot:**
>
> -   **High-High (HH)**: Areas with high no. of Grab trips surrounded by other high values (hotspots).
>
> -   **Low-Low (LL)**: Areas with low no. of Grab trips surrounded by other low values (cold spots).
>
> -   **High-Low (HL)**: Areas with high no. of Grab trips surrounded by low values (outliers).
>
> -   **Low-High (LH)**: Areas with low no. of Grab trips surrounded by high values (outliers).
>
> **\*I will only be plotting statistically significant (p-value \< 0.05) LISA results for this exercise.**

### **5.7.1 Visualising *Overall* LISA of Number of Trips in Jakarta Study Area**

::: panel-tabset
#### Queen - origin

```{r}
# Let's inspect the 'mean' column
summary_table <- summary(lisa_queen_origin$mean) %>% as.data.frame()

# Display the summary table
kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

#### Queen - dest

```{r}
# Let's inspect the 'mean' column
summary_table <- summary(lisa_queen_dest$mean) %>% as.data.frame()

# Display the summary table
kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

#### Rook - origin

```{r}
# Let's inspect the 'mean' column
summary_table <- summary(lisa_rook_origin$mean) %>% as.data.frame()

# Display the summary table
kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

#### Rook - dest

```{r}
# Let's inspect the 'mean' column
summary_table <- summary(lisa_rook_dest$mean) %>% as.data.frame()

# Display the summary table
kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```
:::

To plot our LISA classifications across districts in Jakarta, weâ€™ll leverage theÂ `mean`Â category of the output of ourÂ `lisa`Â calculations, used as a reference point to determine if individual districts have higher or lower values compared to this average. This provides a baseline for detecting theseÂ **spatial clusters**Â andÂ **outliers**Â in the dataset based on the categories mentioned above. We will produce both **overall** and **statistically significant** LISA maps below. There is almost **no difference** in the spread of LISA categories when **`queen`** and **`rook`** contiguity methods are used.

::: panel-tabset
#### Overall LISA - Queen

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin <- tm_shape(lisa_queen_origin) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation of Grab Trip Origins in Jakarta - Queen",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin, asp=1.2)
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest <- tm_shape(lisa_queen_dest) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation of Grab Trip Destinations in Jakarta - Queen",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest, asp=1.2)
```

#### Overall LISA - Rook

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin <- tm_shape(lisa_rook_origin) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation of Grab Trip Origins in Jakarta - Rook",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin, asp=1.2)
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest <- tm_shape(lisa_rook_dest) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation of Grab Trip Destinations in Jakarta - Rook",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest, asp=1.2)
```
:::

We can also visualise all **statistically significant** LISA categories where p-value \< 0.05.

We can see that the `queen` method leads to **fewer high-high** categories and **more low-high** categories than when the `rook` method was used. It might suggest that the broader neighborhood definitions are causing the high-value districts to i**nteract more with low-value ones**, thus affecting the overall clustering results.

::: panel-tabset
#### Statistically Significant LISA - Queen

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false

lisa_queen_origin_sig <- lisa_queen_origin %>%
  filter(p_ii_sim < 0.05)

lisa_cat_origin_sig <- tm_shape(lisa_queen_origin)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(
    main.title = "Statistically Significant LISA Map of Grab Trip Origins in Jakarta - Queen",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin_sig, asp=1.2)
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_queen_dest_sig <- lisa_queen_dest %>%
  filter(p_ii_sim < 0.05)

lisa_cat_dest_sig <- tm_shape(lisa_queen_dest)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Grab Trip Destinations in Jakarta - Queen",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest_sig, asp=1.2)
```

#### Statistically Significant LISA - Rook

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_rook_origin_sig <- lisa_rook_origin %>%
  filter(p_ii_sim < 0.05)

lisa_cat_origin_sig <- tm_shape(lisa_rook_origin) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Grab Trip Origins in Jakarta - Rook",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin_sig, asp=1.2)
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_rook_dest_sig <- lisa_rook_dest %>%
  filter(p_ii_sim < 0.05)

lisa_cat_dest_sig <- tm_shape(lisa_rook_dest) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Grab Trip Destinations in Jakarta - Rook",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest_sig, asp=1.2)
```
:::

Here's the **interactive** version of the static plots above for more readability using `tmap_mode('view')`. Each district, when hovered above, shows the district name and LISA category, unless it is not statistically significant then it will just show the district name.

::: panel-tabset
#### Queen - origin

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# Filter significant districts
lisa_queen_origin_sig <- lisa_queen_origin %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

# First map: Overall LISA Spatial Autocorrelation
lisa_cat <- tm_shape(lisa_queen_origin) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_queen_origin_sig <- lisa_queen_origin_sig %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_queen_origin) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Queen - dest

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# Filter significant districts
lisa_queen_dest_sig <- lisa_queen_dest %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

# First map: Overall LISA Spatial Autocorrelation
lisa_cat <- tm_shape(lisa_queen_dest) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_queen_dest_sig <- lisa_queen_dest_sig %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_queen_dest) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Rook - origin

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# Filter significant districts
lisa_rook_origin_sig <- lisa_rook_origin %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

# First map: Overall LISA Spatial Autocorrelation
lisa_cat <- tm_shape(lisa_rook_origin) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_rook_origin_sig <- lisa_rook_origin_sig %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_rook_origin) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Rook - dest

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# Filter significant districts
lisa_rook_dest_sig <- lisa_rook_dest %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

# First map: Overall LISA Spatial Autocorrelation
lisa_cat <- tm_shape(lisa_rook_dest) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_rook_dest_sig <- lisa_rook_dest_sig %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_rook_dest) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```
:::

### **5.7.2 Visualising LISA of Jakarta Study Area by *Driving Mode***

Conducting LISA classification of the **number of Grab trips** taken by **driving mode** can provide valuable insights into spatial disparities in travel demand across districts, by car and motorcycle. We will prepare the `car_origin, car_dest, motorcycle_origin` and `motorcycle_dest` **dataframes** to store the total number of trips for each origin and destination district of Grab trips. Note that I will remove districts 'outside of Jakarta' since we do not have geometry values for those districts.

-   **Car-focused clusters** might highlight districts where road infrastructure, socioeconomic factors, and parking policies influence car travel demand.
-   **Motorcycle-focused clusters** can point to areas where motorcycles are essential for accessibility, affordability, and maneuverability, especially in highly congested or densely populated districts.
-   **Car-focused outliers**: Districts with high car trips surrounded by low-use areas may highlight unique features attracting car users, requiring tailored infrastructure solutions.
-   **Motorcycle-focused outliers**: Areas with high motorcycle use amidst low surrounding usage may indicate critical transit hubs needing efficient drop-off zones and integrated transport solutions.

::: panel-tabset
#### Prepare Origin Data

```{r}
origin_driving_mode <- trips %>%
  filter(origin_district != 'outside of jakarta') %>%
  group_by(origin_district, driving_mode) %>%
  summarise(num_of_trips = n(), .groups = "drop") %>%
  pivot_wider(names_from = driving_mode, values_from = num_of_trips) %>%
  rename(district = origin_district)

car_origin <- origin_driving_mode %>%
  select(district, car) %>%
  rename(num_of_trips = car) %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

motorcycle_origin <- origin_driving_mode %>%
  select(district, motorcycle) %>%
  rename(num_of_trips = motorcycle) %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

# Inspect
car_origin
```

#### Prepare Destination Data

```{r}
dest_driving_mode <- trips %>%
  filter(destination_district != 'outside of jakarta') %>%
  group_by(destination_district, driving_mode) %>%
  summarise(num_of_trips = n(), .groups = "drop") %>%
  pivot_wider(names_from = driving_mode, values_from = num_of_trips) %>%
  rename(district = destination_district)

car_dest <- dest_driving_mode %>%
  select(district, car) %>%
  rename(num_of_trips = car) %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

motorcycle_dest <- dest_driving_mode %>%
  select(district, motorcycle) %>%
  rename(num_of_trips = motorcycle) %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

# Inspect
car_dest
```
:::

Next, I will compute Local Moran's I down to the granularity of **origin/destination, queen/rook** and **car/motorcycle.** For instance, `queen - origin - car` will only focus on cars moving from the start of trip, using the queen contiguity method to locate its neighbours.

::: panel-tabset
#### Queen - origin - car

```{r}
car_origin_nb_queen <- st_contiguity(car_origin$geometry, queen=TRUE)

car_origin_wt_queen <- st_weights(car_origin_nb_queen, style = "W", allow_zero = TRUE)

car_origin_wm_queen <- car_origin %>%
  mutate(nb = car_origin_nb_queen,
         wt = car_origin_wt_queen,
         .before = 1) 

lisa_queen_origin_car <- car_origin_wm_queen %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Queen - dest - car

```{r}
car_dest_nb_queen <- st_contiguity(car_dest$geometry, queen = TRUE)

car_dest_wt_queen <- st_weights(car_dest_nb_queen, style = "W", allow_zero = TRUE)

car_dest_wm_queen <- car_dest %>%
  mutate(nb = car_dest_nb_queen,
         wt = car_dest_wt_queen,
         .before = 1) 

lisa_queen_dest_car <- car_dest_wm_queen %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Rook - origin - car

```{r}
car_origin_nb_rook <- st_contiguity(car_origin$geometry, queen = FALSE)

car_origin_wt_rook <- st_weights(car_origin_nb_rook, style = "W", allow_zero = TRUE)

car_origin_wm_rook <- car_origin %>%
  mutate(nb = car_origin_nb_rook,
         wt = car_origin_wt_rook,
         .before = 1) 

lisa_rook_origin_car <- car_origin_wm_rook %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Rook - dest - car

```{r}
car_dest_nb_rook <- st_contiguity(car_dest$geometry, queen = FALSE)

car_dest_wt_rook <- st_weights(car_dest_nb_rook, style = "W", allow_zero = TRUE)

car_dest_wm_rook <- car_dest %>%
  mutate(nb = car_dest_nb_rook,
         wt = car_dest_wt_rook,
         .before = 1) 

lisa_rook_dest_car <- car_dest_wm_rook %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

```

#### Queen - origin - motorcycle

```{r}
motorcycle_origin_nb_queen <- st_contiguity(motorcycle_origin$geometry, queen=TRUE)

motorcycle_origin_wt_queen <- st_weights(motorcycle_origin_nb_queen, style = "W", allow_zero = TRUE)

motorcycle_origin_wm_queen <- motorcycle_origin %>%
  mutate(nb = motorcycle_origin_nb_queen,
         wt = motorcycle_origin_wt_queen,
         .before = 1) 

lisa_queen_origin_motorcycle <- motorcycle_origin_wm_queen %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Queen - dest - motorcycle

```{r}
motorcycle_dest_nb_queen <- st_contiguity(motorcycle_dest$geometry, queen = TRUE)

motorcycle_dest_wt_queen <- st_weights(motorcycle_dest_nb_queen, style = "W", allow_zero = TRUE)

motorcycle_dest_wm_queen <- motorcycle_dest %>%
  mutate(nb = motorcycle_dest_nb_queen,
         wt = motorcycle_dest_wt_queen,
         .before = 1) 

lisa_queen_dest_motorcycle <- motorcycle_dest_wm_queen %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Rook - origin - motorcycle

```{r}
motorcycle_origin_nb_rook <- st_contiguity(motorcycle_origin$geometry, queen=FALSE)

motorcycle_origin_wt_rook <- st_weights(motorcycle_origin_nb_rook, style = "W", allow_zero = TRUE)

motorcycle_origin_wm_rook <- motorcycle_origin %>%
  mutate(nb = motorcycle_origin_nb_rook,
         wt = motorcycle_origin_wt_rook,
         .before = 1) 

lisa_rook_origin_motorcycle <- motorcycle_origin_wm_rook %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Rook - dest - motorcycle

```{r}
motorcycle_dest_nb_rook <- st_contiguity(motorcycle_dest$geometry, queen = FALSE)

motorcycle_dest_wt_rook <- st_weights(motorcycle_dest_nb_rook, style = "W", allow_zero = TRUE)

motorcycle_dest_wm_rook <- motorcycle_dest %>%
  mutate(nb = motorcycle_dest_nb_rook,
         wt = motorcycle_dest_wt_rook,
         .before = 1) 

lisa_rook_dest_motorcycle <- motorcycle_dest_wm_rook %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```
:::

Now, we can visualise how spatial clusterings of Grab trips form based on driving modes, namely by car and motorcycle. We will only be looking at **statistically significant** LISA values i.e. **p-value \< 0.05**.

::: panel-tabset
#### Queen: Origin Car vs Origin Motorcycle

```{r}
lisa_queen_origin_car_sig <- lisa_queen_origin_car %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_origin_car_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin_car <- tm_shape(lisa_queen_origin_car) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_origin_car_sig) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Origins in Jakarta by Car",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin_car, asp=1.2)
```

```{r}
lisa_queen_origin_motorcycle_sig <- lisa_queen_origin_motorcycle %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_origin_motorcycle_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin_motorcycle <- tm_shape(lisa_queen_origin_motorcycle) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_origin_motorcycle_sig) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Origins in Jakarta by Motorcycle",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin_motorcycle, asp=1.2)
```

#### Queen: Dest Car vs Dest Motorcycle

```{r}
lisa_queen_dest_car_sig <- lisa_queen_dest_car %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_dest_car_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest_car <- tm_shape(lisa_queen_dest_car) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_dest_car_sig) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Destinations in Jakarta by Car",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.7,
            legend.text.size = 0.7,
            legend.hist.size = 0.7,
            legend.position = c("right", "bottom"),
            legend.width = 0.15,  
            frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)


tmap_arrange(lisa_cat_dest_car, asp=1.2)
```

```{r}
lisa_queen_dest_motorcycle_sig <- lisa_queen_dest_motorcycle %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_dest_motorcycle_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest_motorcycle <- tm_shape(lisa_queen_dest_motorcycle) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_dest_motorcycle_sig) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Destinations in Jakarta by Motorcycle",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.7,
            legend.text.size = 0.7,
            legend.hist.size = 0.7,
            legend.position = c("right", "bottom"),
            legend.width = 0.15,  
            frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest_motorcycle, asp=1.2)
```

#### Rook: Origin Car vs Origin Motorcycle

```{r}
lisa_rook_origin_car_sig <- lisa_rook_origin_car %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_origin_car_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin_car <- tm_shape(lisa_rook_origin_car) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_rook_origin_car_sig) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Origins in Jakarta by Car",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin_car, asp=1.2)
```

```{r}
lisa_rook_origin_motorcycle_sig <- lisa_rook_origin_motorcycle %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_origin_motorcycle_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin_motorcycle <- tm_shape(lisa_rook_origin_motorcycle) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_rook_origin_motorcycle_sig) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Origins in Jakarta by Motorcycle",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin_motorcycle, asp=1.2)
```

#### Rook: Dest Car vs Dest Motorcycle

```{r}
lisa_rook_dest_car_sig <- lisa_rook_dest_car %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_dest_car_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest_car <- tm_shape(lisa_rook_dest_car) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_rook_dest_car_sig) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Destinations in Jakarta by Car",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest_car, asp=1.2)
```

```{r}
lisa_rook_dest_motorcycle_sig <- lisa_rook_dest_motorcycle %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_dest_motorcycle_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest_motorcycle <- tm_shape(lisa_rook_dest_motorcycle) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_rook_dest_motorcycle_sig) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Destinations in Jakarta by Motorcycle",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest_motorcycle, asp=1.2)
```
:::

Here's the **interactive** version of the static plots above for more readability using `tmap_mode('view')`. Each district, when hovered above, shows the district name and LISA category, unless it is not statistically significant then it will just show the district name.

::: panel-tabset
#### Queen: Origin Car vs Origin Motorcycle

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# First map: Overall LISA Spatial Autocorrelation
lisa_queen_origin_car_sig <- lisa_queen_origin_car %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_car <- tm_shape(lisa_queen_origin_car) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_origin_car_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - Car",
          id = "label")

# Second map: LISAal Significant LISA Map
lisa_queen_origin_motorcycle_sig <- lisa_queen_origin_motorcycle %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_motorcycle <- tm_shape(lisa_queen_origin_motorcycle) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_origin_motorcycle_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - Motorcycle",
          id = "label")
tmap_arrange(lisa_cat_sig_car, lisa_cat_sig_motorcycle, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Queen: Dest Car vs Dest Motorcycle

```{r}
tmap_mode("view")
```

```{r}
# First map: Overall LISA Spatial Autocorrelation
lisa_queen_dest_car_sig <- lisa_queen_dest_car %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_car <- tm_shape(lisa_queen_dest_car) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_dest_car_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - Car",
          id = "label")

# Second map: LISAal Significant LISA Map
lisa_queen_dest_motorcycle_sig <- lisa_queen_dest_motorcycle %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_motorcycle <- tm_shape(lisa_queen_dest_motorcycle) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_dest_motorcycle_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - Motorcycle",
          id = "label")
tmap_arrange(lisa_cat_sig_car, lisa_cat_sig_motorcycle, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Rook: Origin Car vs Origin Motorcycle

```{r}
tmap_mode("view")
```

```{r}
# First map: Overall LISA Spatial Autocorrelation
lisa_rook_origin_car_sig <- lisa_rook_origin_car %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_car <- tm_shape(lisa_rook_origin_car) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_origin_car_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - Car",
          id = "label")

# Second map: Significant LISA Map
lisa_rook_origin_motorcycle_sig <- lisa_rook_origin_motorcycle %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_motorcycle <- tm_shape(lisa_rook_origin_motorcycle) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_origin_motorcycle_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - Motorcycle",
          id = "label")

tmap_arrange(lisa_cat_sig_car, lisa_cat_sig_motorcycle, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Rook: Dest Car vs Dest Motorcycle

```{r}
tmap_mode("view")
```

```{r}
# First map: Overall LISA Spatial Autocorrelation
lisa_rook_dest_car_sig <- lisa_rook_dest_car %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_car <- tm_shape(lisa_rook_dest_car) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_dest_car_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - Car",
          id = "label")

# Second map: Significant LISA Map
lisa_rook_dest_motorcycle_sig <- lisa_rook_dest_motorcycle %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_motorcycle <- tm_shape(lisa_rook_dest_motorcycle) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_dest_motorcycle_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - Motorcycle",
          id = "label")

tmap_arrange(lisa_cat_sig_car, lisa_cat_sig_motorcycle, asp = 1, ncol = 2)
tmap_mode("plot")
```
:::

### **5.7.3 Visualising LISA of Jakarta Study Area by *Weather (Rain / No Rain)***

Next, we will analyse how the **number of Grab trips** in one district may influence clusters of Grab trips surrounding it. It is worth noting that we have only acquired weather data for **trip origins** since we are most interested in determining how the current weather influence commuters in deciding to book a Grab.

-   **Rain clusters:** Districts with low trip counts during rain reflect a lack of reliance on ride-hailing services, possibly due to insufficient demand or alternative transport options.

-   **No-rain clusters:** Areas with high trip counts in dry conditions indicate robust travel demand and may reflect socioeconomic activity or tourism, necessitating infrastructure support to accommodate high volumes.

-   **Rain outliers:** Districts with low trip counts in rainy conditions surrounded by high usage may indicate barriers to accessing ride-hailing services, suggesting opportunities for improving transport accessibility.

-   **No-rain outliers:** Areas with high trip volumes in dry conditions surrounded by low-use districts may indicate popularity as a destination, warranting improved connectivity and transport services.

```{r}
trip_weather <- trips %>%
  select(origin_district, origin_weather_description_category) %>%
  filter(origin_weather_description_category != 'Outside of Jakarta') %>%
  group_by(origin_district, origin_weather_description_category) %>%
  summarise(num_of_trips = n(), .groups = 'drop') %>%  
  pivot_wider(names_from = origin_weather_description_category, 
              values_from = num_of_trips, values_fill = list(num_of_trips = 0)) %>%
  rename(district = origin_district)

no_rain_origin <- trip_weather %>%
  select(district, not_rain) %>%
  rename(num_of_trips = not_rain) %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

rain_origin <- trip_weather %>%
  select(district, rain) %>%
  rename(num_of_trips = rain) %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

# Inspect
no_rain_origin
```

Likewise, I compute Local Moran's I down to the granularity of **origin, queen/rook** and **rain/no rain** For instance, `queen - origin - rain` will only focus on cars moving from the start of trip, in wet weather condition, using the queen contiguity method to locate its neighbours.

::: panel-tabset
#### Queen - origin - rain

```{r}
rain_origin_nb_queen <- st_contiguity(rain_origin$geometry, queen=TRUE)

rain_origin_wt_queen <- st_weights(rain_origin_nb_queen, style = "W", allow_zero = TRUE)

rain_origin_wm_queen <- rain_origin %>%
  mutate(nb = rain_origin_nb_queen,
         wt = rain_origin_wt_queen,
         .before = 1) 

lisa_queen_rain <- rain_origin_wm_queen %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Rook - origin - rain

```{r}
rain_origin_nb_rook <- st_contiguity(rain_origin$geometry, queen=FALSE)

rain_origin_wt_rook <- st_weights(rain_origin_nb_rook, style = "W", allow_zero = TRUE)

rain_origin_wm_rook <- rain_origin %>%
  mutate(nb = rain_origin_nb_rook,
         wt = rain_origin_wt_rook,
         .before = 1) 

lisa_rook_rain <- rain_origin_wm_rook %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Queen - origin - no rain

```{r}
no_rain_origin_nb_queen <- st_contiguity(no_rain_origin$geometry, queen=TRUE)

no_rain_origin_wt_queen <- st_weights(no_rain_origin_nb_queen, style = "W", allow_zero = TRUE)

no_rain_origin_wm_queen <- no_rain_origin %>%
  mutate(nb = no_rain_origin_nb_queen,
         wt = no_rain_origin_wt_queen,
         .before = 1) 

lisa_queen_no_rain <- no_rain_origin_wm_queen %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Rook - origin - no rain

```{r}
no_rain_origin_nb_rook <- st_contiguity(no_rain_origin$geometry, queen=FALSE)

no_rain_origin_wt_rook <- st_weights(no_rain_origin_nb_rook, style = "W", allow_zero = TRUE)

no_rain_origin_wm_rook <- no_rain_origin %>%
  mutate(nb = no_rain_origin_nb_rook,
         wt = no_rain_origin_wt_rook,
         .before = 1) 

lisa_rook_no_rain <- no_rain_origin_wm_rook %>% 
  mutate(local_moran = local_moran(num_of_trips, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```
:::

Now, let's visualise how spatial clustering of Grab trips form based on weather (rain/no rain), namely by car and motorcycle. We will only be looking at **statistically significant** LISA values i.e. **p-value \< 0.05**.

::: panel-tabset
#### Queen: Origin Rain vs Origin No Rain

```{r}
lisa_queen_rain_sig <- lisa_queen_rain %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_rain_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_queen_rain <- tm_shape(lisa_queen_rain) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_rain_sig) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Origins in Jakarta (Rain)",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_queen_rain, asp=1.2)
```

```{r}
lisa_queen_no_rain_sig <- lisa_queen_no_rain %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_no_rain_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_queen_no_rain <- tm_shape(lisa_queen_no_rain) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_no_rain_sig) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Origins in Jakarta (No Rain)",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_queen_no_rain, asp=1.2)
```

#### Rook: Origin Rain vs Origin No Rain

```{r}
lisa_rook_rain_sig <- lisa_rook_rain %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_rain_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_rook_rain <- tm_shape(lisa_rook_rain) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_rain_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Origins in Jakarta (Rain)",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_rook_rain, asp = 1.2)
```

```{r}
lisa_rook_no_rain_sig <- lisa_rook_no_rain %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_no_rain_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_rook_no_rain <- tm_shape(lisa_rook_no_rain) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_no_rain_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "LISA Spatial Autocorrelation of Grab Trip Origins in Jakarta (No Rain)",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)


tmap_arrange(lisa_cat_rook_no_rain, asp = 1.2)
```
:::

Here's the **interactive** version of the static plots above for more readability using `tmap_mode('view')`. Each district, when hovered above, shows the district name and LISA category, unless it is not statistically significant then it will just show the district name.

::: panel-tabset
#### Queen: Origin Rain vs Origin No Rain

```{r}
tmap_mode("view")
```

```{r}
# First map: Overall LISA Spatial Autocorrelation
lisa_queen_origin_rain_sig <- lisa_queen_rain %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_rain <- tm_shape(lisa_queen_rain) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_origin_rain_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - Rain",
          id = "label")

# Second map: LISAal Significant LISA Map
lisa_queen_origin_no_rain_sig <- lisa_queen_no_rain %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_no_rain <- tm_shape(lisa_queen_no_rain) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_origin_no_rain_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - No Rain",
          id = "label")
tmap_arrange(lisa_cat_sig_rain, lisa_cat_sig_no_rain, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Rook: Origin Rain vs Origin No Rain

```{r}
tmap_mode("view")
```

```{r}
# First map: Overall LISA Spatial Autocorrelation
lisa_rook_origin_rain_sig <- lisa_rook_rain %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_rain <- tm_shape(lisa_rook_rain) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_origin_rain_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - Rain",
          id = "label")

# Second map: Significant LISA Map
lisa_rook_origin_no_rain_sig <- lisa_rook_no_rain %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig_no_rain <- tm_shape(lisa_rook_no_rain) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_origin_no_rain_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA - No Rain",
          id = "label")

tmap_arrange(lisa_cat_sig_rain, lisa_cat_sig_no_rain, asp = 1, ncol = 2)
tmap_mode("plot")

```
:::

### **5.7.4 Visualising LISA of Jakarta Study Area by *Number of POIs***

Next, I will now perform LISA classification analysis on the number of Points of Interest (POIs) in each district. Analysing POIs with LISA can yield interesting spatial patterns.

-   **High-High clusters** might reveal regions with high concentrations of POIs, possibly indicating commercial or tourist hubs.

-   **Low-Low clusters** could indicate underdeveloped or residential areas.

-   **High-Low and Low-High outliers** could be of interest for urban planners or business analysts to identify potential areas for investment or improvement.

Let's quickly compute Local Moran's I down to the granularity of **queen** and **rook** methods to locate its neighbours. For this case, I will not be categorising the data by **origin** and **destination** since the distribution of POIs is uniform across districts, making it unnecessary to differentiate based on origin and destination.

```{r}
# Add geometry to pois_num
pois_num_sf <- pois_num %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

# Inspect
pois_num_sf
```

::: panel-tabset
#### Queen

```{r}
pois_nb_queen <- st_contiguity(pois_num_sf$geometry, queen=TRUE)

pois_wt_queen <- st_weights(pois_nb_queen, style = "W", allow_zero = TRUE)

pois_wm_queen <- pois_num_sf %>%
  mutate(nb = pois_nb_queen,
         wt = pois_wt_queen,
         .before = 1) 

lisa_queen_pois <- pois_wm_queen %>% 
  mutate(local_moran = local_moran(num_of_pois, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Rook

```{r}
pois_nb_rook <- st_contiguity(pois_num_sf$geometry, queen=FALSE)

pois_wt_rook <- st_weights(pois_nb_rook, style = "W", allow_zero = TRUE)

pois_wm_rook <- pois_num_sf %>%
  mutate(nb = pois_nb_rook,
         wt = pois_wt_rook,
         .before = 1) 

lisa_rook_pois <- pois_wm_rook %>% 
  mutate(local_moran = local_moran(num_of_pois, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```
:::

Next, we can visualise the LISA categories associated to each district via plotting it on a choropleth map below.

::: panel-tabset
#### Overall LISA - Queen

```{r}
summary_table <- summary(lisa_queen_pois$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_queen_pois <- tm_shape(lisa_queen_pois)+
  tm_borders(col = "black", alpha = 0.6)+
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Map of Points of Interests in Jakarta",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_queen_pois, asp=1.2)
```

#### Overall LISA - Rook

```{r}
summary_table <- summary(lisa_rook_pois$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_rook_pois <- tm_shape(lisa_rook_pois) +
  tm_borders(col = "black", alpha = 0.6) +
  tm_polygons("mean", 
              palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
              title = "LISA Classification",
              midpoint = NA,
              legend.hist = TRUE, 
              legend.is.portrait = TRUE,
              legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Map of Points of Interests in Jakarta",
              main.title.position = "center",
              main.title.size = 1,
              main.title.fontface = "bold",
              legend.title.size = 0.7,
              legend.text.size = 0.7,
              legend.hist.size = 0.7,
              legend.position = c("right", "bottom"),
              legend.width = 0.15,  
              frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_rook_pois, asp = 1.2)
```
:::

We can filter the **statistically significant** LISA observations (p-value \> 0.05) and plot them on a map as shown.

::: panel-tabset
#### Statistically Significant LISA - Queen

```{r}
lisa_queen_pois_sig <- lisa_queen_pois %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_pois_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_queen_pois_sig <- tm_shape(lisa_queen_pois)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_pois_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Points of Interests in Jakarta",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_queen_pois_sig, asp=1.2)
```

#### Statistically Significant LISA - Rook

```{r}
lisa_rook_pois_sig <- lisa_rook_pois %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_pois_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_rook_pois_sig <- tm_shape(lisa_rook_pois) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_pois_sig) +
  tm_polygons("mean", 
              palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
              title = "LISA Classification",
              midpoint = NA,
              legend.hist = TRUE, 
              legend.is.portrait = TRUE,
              legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Points of Interests in Jakarta",
            main.title.position = "center",
            main.title.size = 1,
            main.title.fontface = "bold",
            legend.title.size = 0.7,
            legend.text.size = 0.7,
            legend.hist.size = 0.7,
            legend.position = c("right", "bottom"),
            legend.width = 0.15,  
            frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_rook_pois_sig, asp = 1.2)
```
:::

Let's also visualise the **interactive** version of the both overall and statistically significant LISA plots for both the queen and rook contiguity method.

::: panel-tabset
#### Interactive Map of LISA - Queen

```{r}
#| code-fold: true
#| warning: false
#| message: false

tmap_mode("view")
# Filter significant districts
lisa_queen_pois <- lisa_queen_pois %>%
  mutate(label = paste("District:", district, "| ", mean))

# First map: Overall LISA Spatial Autocorrelation
lisa_cat <- tm_shape(lisa_queen_pois) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_queen_pois_sig <- lisa_queen_pois_sig %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_queen_pois) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_pois_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Interactive Map of LISA - Rook

```{r fig.width=7, fig.height=4}
#| code-fold: true
#| warning: false
#| message: false

tmap_mode("view")
# Filter significant districts
lisa_rook_pois <- lisa_rook_pois %>%
  mutate(label = paste("District:", district, "| ", mean))

# First map: Overall LISA Spatial Autocorrelation
lisa_cat <- tm_shape(lisa_rook_pois) +
  tm_polygons("mean", 
              palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
              title = "Overall LISA Classification",
              id = "label") 

# Second map: LISAal Significant LISA Map
lisa_rook_pois_sig <- lisa_rook_pois_sig %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_rook_pois) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_pois_sig) +
  tm_polygons("mean", 
              palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
              title = "Significant LISA Classification",
              id = "label")

tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```
:::

### **5.7.5 Visualising LISA of Jakarta Study Area by *Number of Trips per POI***

Plotting the LISA categories of the number of trips per point of interest (POI) for each district can help us understand spatial patterns in travel demand intensity relative to the availability of POIs. This approach reveals insights into:

1.  **High-High and Low-Low Clusters**: Districts with either high or low numbers of trips per POI may indicate varying levels of demand per resource, which can be associated with underlying factors such as accessibility, infrastructure, or population density. High-High clusters, for example, could highlight high-demand areas with limited POIs, indicating potential needs for additional amenities or services.

2.  **High-Low and Low-High Outliers**: These outliers can identify unique districts where the number of trips per POI differs significantly from surrounding areas. For instance, a Low-High outlier would signal a district where the trip count per POI is lower than in neighboring districts, possibly pointing to underutilized facilities or areas that donâ€™t attract much traffic despite available resources.

::: panel-tabset
#### Prepare Origin Data

```{r}
# Create trips_poi_origin
trips_poi_origin <- trips %>%
  filter(origin_district != "outside of jakarta") %>%
  group_by(origin_district) %>%
  summarise(num_of_trips = n()) %>%
  rename(district = origin_district) %>%
  left_join(pois_num, by = 'district') %>%
  mutate(trips_per_poi = num_of_trips/num_of_pois) %>%
  select(district, trips_per_poi) %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

head(trips_poi_origin)
```

#### Prepare Destination Data

```{r}
# Create trips_poi_dest
trips_poi_dest <- trips %>%
  filter(destination_district != "outside of jakarta") %>%
  group_by(destination_district) %>%
  summarise(num_of_trips = n()) %>%
  rename(district = destination_district) %>%
  left_join(pois_num, by = 'district') %>%
  mutate(trips_per_poi = num_of_trips/num_of_pois) %>%
  select(district, trips_per_poi) %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

head(trips_poi_dest)
```
:::

Next, I will compute Local Moran's I down to the granularity of **origin/destination** and **queen/rook**. For instance, `queen - origin` will only focus on trips at the point of origin, using the queen contiguity method to locate its neighbours.

::: panel-tabset
#### Queen - origin

```{r}
trips_poi_origin_nb_queen <- st_contiguity(trips_poi_origin$geometry, queen=TRUE)

trips_poi_origin_wt_queen <- st_weights(trips_poi_origin_nb_queen, style = "W", allow_zero = TRUE)

trips_poi_origin_wm_queen <- trips_poi_origin %>%
  mutate(nb = trips_poi_origin_nb_queen,
         wt = trips_poi_origin_wt_queen,
         .before = 1) 

lisa_queen_origin_trips_poi <- trips_poi_origin_wm_queen %>% 
  mutate(local_moran = local_moran(trips_per_poi, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Queen - dest

```{r}
trips_poi_dest_nb_queen <- st_contiguity(trips_poi_dest$geometry, queen=TRUE)

trips_poi_dest_wt_queen <- st_weights(trips_poi_dest_nb_queen, style = "W", allow_zero = TRUE)

trips_poi_dest_wm_queen <- trips_poi_dest %>%
  mutate(nb = trips_poi_dest_nb_queen,
         wt = trips_poi_dest_wt_queen,
         .before = 1) 

lisa_queen_dest_trips_poi <- trips_poi_dest_wm_queen %>% 
  mutate(local_moran = local_moran(trips_per_poi, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Rook - origin

```{r}
trips_poi_origin_nb_rook <- st_contiguity(trips_poi_origin$geometry, queen=FALSE)

trips_poi_origin_wt_rook <- st_weights(trips_poi_origin_nb_rook, style = "W", allow_zero = TRUE)

trips_poi_origin_wm_rook <- trips_poi_origin %>%
  mutate(nb = trips_poi_origin_nb_rook,
         wt = trips_poi_origin_wt_rook,
         .before = 1) 

lisa_rook_origin_trips_poi <- trips_poi_origin_wm_rook %>% 
  mutate(local_moran = local_moran(trips_per_poi, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

```

#### Rook - dest

```{r}
trips_poi_dest_nb_rook <- st_contiguity(trips_poi_dest$geometry, queen=FALSE)

trips_poi_dest_wt_rook <- st_weights(trips_poi_dest_nb_rook, style = "W", allow_zero = TRUE)

trips_poi_dest_wm_rook <- trips_poi_dest %>%
  mutate(nb = trips_poi_dest_nb_rook,
         wt = trips_poi_dest_wt_rook,
         .before = 1) 

lisa_rook_dest_trips_poi <- trips_poi_dest_wm_rook %>% 
  mutate(local_moran = local_moran(trips_per_poi, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```
:::

Next, we can visualise the LISA categories associated to each district via plotting it on a choropleth map below.

::: panel-tabset
#### Overall LISA - Queen

```{r}
summary_table <- summary(lisa_queen_origin_trips_poi$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin <- tm_shape(lisa_queen_origin_trips_poi) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation of Number of Trips Per POI for Trip Origins",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin, asp=1.2)
```

```{r}
summary_table <- summary(lisa_queen_dest_trips_poi$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest <- tm_shape(lisa_queen_dest_trips_poi) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation of Number of Trips Per POI for Trip Destinations",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest, asp=1.2)
```

#### Overall LISA - Rook

```{r}
summary_table <- summary(lisa_rook_origin_trips_poi$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin <- tm_shape(lisa_rook_origin_trips_poi) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation Number of Trips Per POI for Trip Destinations",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin, asp=1.2)
```

```{r}
summary_table <- summary(lisa_rook_dest_trips_poi$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest <- tm_shape(lisa_rook_dest_trips_poi) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation Number of Trips Per POI for Trip Destinations",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest, asp=1.2)
```
:::

We can also visualise all **statistically significant** LISA categories where p-value \< 0.05 for both origin and destination trips.

::: panel-tabset
#### Statistically Significant LISA - Queen

```{r}
lisa_queen_origin_sig <- lisa_queen_origin_trips_poi %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_origin_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin_sig <- tm_shape(lisa_queen_origin_trips_poi)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Number of Trips Per POI for Trip Origins",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin_sig, asp=1.2)
```

```{r}
lisa_queen_dest_sig <- lisa_queen_dest_trips_poi %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_dest_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest_sig <- tm_shape(lisa_queen_dest_trips_poi)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Number of Trips Per POI for Trip Destinations",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest_sig, asp=1.2)
```

#### Statistically Significant LISA - Rook

```{r}
lisa_rook_origin_sig <- lisa_rook_origin_trips_poi %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_origin_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin_sig <- tm_shape(lisa_rook_origin_trips_poi) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Number of Trips Per POI for Trip Origins",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin_sig, asp=1.2)
```

```{r}
lisa_rook_dest_sig <- lisa_rook_dest_trips_poi %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_dest_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest_sig <- tm_shape(lisa_rook_dest_trips_poi) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Number of Trips Per POI for Trip Destinations",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest_sig, asp=1.2)
```
:::

Here's the **interactive** version of the static plots above for more readability using `tmap_mode('view')`. Each district, when hovered above, shows the district name and LISA category, unless it is not statistically significant then it will just show the district name.

::: panel-tabset
#### Queen - origin

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# First map: Overall LISA Spatial Autocorrelation
lisa_queen_origin <- lisa_queen_origin_trips_poi %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat <- tm_shape(lisa_queen_origin) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_queen_origin_sig <- lisa_queen_origin_trips_poi %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_queen_origin) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Queen - dest

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# First map: Overall LISA Spatial Autocorrelation
lisa_queen_dest <- lisa_queen_dest_trips_poi %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat <- tm_shape(lisa_queen_dest) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_queen_dest_sig <- lisa_queen_dest_trips_poi %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_queen_dest) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Rook - origin

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# First map: Overall LISA Spatial Autocorrelation
lisa_rook_origin <- lisa_rook_origin_trips_poi %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat <- tm_shape(lisa_rook_origin) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_rook_origin_sig <- lisa_rook_origin_trips_poi %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_rook_origin) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Rook - dest

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# First map: Overall LISA Spatial Autocorrelation
lisa_rook_dest <- lisa_rook_dest_trips_poi %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat <- tm_shape(lisa_rook_dest) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_rook_dest_sig <- lisa_rook_dest_sig %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_rook_dest) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```
:::

### **5.7.6 Visualising LISA of Jakarta Study Area by *Number of Trips per Capita***

Using LISA categories based on the **number of trips per capita** for each district can be particularly insightful, as it accounts for the population size and provides a clearer picture of **travel demand relative to the resident base**.

1.  **High-High and Low-Low Clusters**: Districts with high trips per capita **(High-High clusters)** could indicate areas where residents are especially **reliant** on Grab transportation services, potentially due to factors like limited local amenities, employment patterns, or population density. **Low-Low clusters,** on the other hand, might represent districts with lower overall travel needs or **alternative forms of local transportation** and amenities.

2.  **High-Low and Low-High Outliers**: Outliers can reveal unique spatial patterns; for example, a **Low-High** outlier (low trips per capita in a high-demand neighboring area) might suggest that residents are **less dependent** on transportation services, potentially due to robust local infrastructure. Conversely, a **High-Low** outlier may indicate a district with high per capita trip demand in an otherwise low-demand region, possibly due to the district being a **main city** with more amenities.

Take note that there are two districts, namely **Danau Sunter Dll** and **Danua Sunter** that have **0 population size** as they are lakes found in Jakarta. Hence, I will **exclude** them from the LISA classifications since we will end up with an infinite value for its number of trips per capita.

::: panel-tabset
#### Prepare Origin Data

I will use the `population` dataframe previously imported into the project which contains the population size per district, i.e. `population_count`.

```{r}
# Create trips_capita_origin
trips_capita_origin <- trips %>%
  filter(origin_district != "outside of jakarta") %>%
  group_by(origin_district) %>%
  summarise(num_of_trips = n()) %>%
  rename(district = origin_district) %>%
  left_join(population, by = 'district') %>%
  mutate(trips_per_capita = num_of_trips/population_count) %>%
  select(district, trips_per_capita) %>%
  filter(district != 'danau sunter dll' & district != 'danau sunter') %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf()

trips_capita_origin
```

#### Prepare Destination Data

```{r}
# Create trips_capita_dest
trips_capita_dest <- trips %>%
  filter(destination_district != "outside of jakarta") %>%
  group_by(destination_district) %>%
  summarise(num_of_trips = n()) %>%
  rename(district = destination_district) %>%
  left_join(population, by = 'district') %>%
  mutate(trips_per_capita = num_of_trips/population_count) %>%
  select(district, trips_per_capita) %>%
  filter(district != 'danau sunter dll' & district != 'danau sunter') %>%
  left_join(district_geom, by = 'district') %>%
  st_as_sf() 

trips_capita_dest
```
:::

Next, I will compute Local Moran's I down to the granularity of **origin/destination** and **queen/rook**. For instance, `queen - origin` will only focus on trips at the point of origin, using the queen contiguity method to locate its neighbours.

::: panel-tabset
#### Queen - origin

```{r}
trips_capita_origin_nb_queen <- st_contiguity(trips_capita_origin$geometry, queen=TRUE)

trips_capita_origin_wt_queen <- st_weights(trips_capita_origin_nb_queen, style = "W", allow_zero = TRUE)

trips_capita_origin_wm_queen <- trips_capita_origin %>%
  mutate(nb = trips_capita_origin_nb_queen,
         wt = trips_capita_origin_wt_queen,
         .before = 1) 

lisa_queen_origin_trips_capita <- trips_capita_origin_wm_queen %>% 
  mutate(local_moran = local_moran(trips_per_capita, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Queen - dest

```{r}
trips_capita_dest_nb_queen <- st_contiguity(trips_capita_dest$geometry, queen=TRUE)

trips_capita_dest_wt_queen <- st_weights(trips_capita_dest_nb_queen, style = "W", allow_zero = TRUE)

trips_capita_dest_wm_queen <- trips_capita_dest %>%
  mutate(nb = trips_capita_dest_nb_queen,
         wt = trips_capita_dest_wt_queen,
         .before = 1) 

lisa_queen_dest_trips_capita <- trips_capita_dest_wm_queen %>% 
  mutate(local_moran = local_moran(trips_per_capita, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Rook - origin

```{r}
trips_capita_origin_nb_rook <- st_contiguity(trips_capita_origin$geometry, queen=FALSE)

trips_capita_origin_wt_rook <- st_weights(trips_capita_origin_nb_rook, style = "W", allow_zero = TRUE)

trips_capita_origin_wm_rook <- trips_capita_origin %>%
  mutate(nb = trips_capita_origin_nb_rook,
         wt = trips_capita_origin_wt_rook,
         .before = 1) 

lisa_rook_origin_trips_capita <- trips_capita_origin_wm_rook %>% 
  mutate(local_moran = local_moran(trips_per_capita, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### Rook - dest

```{r}
trips_capita_dest_nb_rook <- st_contiguity(trips_capita_dest$geometry, queen=FALSE)

trips_capita_dest_wt_rook <- st_weights(trips_capita_dest_nb_rook, style = "W", allow_zero = TRUE)

trips_capita_dest_wm_rook <- trips_capita_dest %>%
  mutate(nb = trips_capita_dest_nb_rook,
         wt = trips_capita_dest_wt_rook,
         .before = 1) 

lisa_rook_dest_trips_capita <- trips_capita_dest_wm_rook %>% 
  mutate(local_moran = local_moran(trips_per_capita, nb, wt, 
                                   zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```
:::

Next, we can visualise the LISA categories associated to each district via plotting it on a choropleth map below.

::: panel-tabset
#### Overall LISA - Queen

```{r}
summary_table <- summary(lisa_queen_origin_trips_capita$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin <- tm_shape(lisa_queen_origin_trips_capita) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation of Number of Trips Per Capita for Trip Origins",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin, asp=1.2)
```

```{r}
summary_table <- summary(lisa_queen_dest_trips_capita$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest <- tm_shape(lisa_queen_dest_trips_capita) +
  tm_polygons("mean", 
          # blue, orange, green, red
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation of Number of Trips Per Capita for Trip Destinations",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest, asp=1.2)
```

#### Overall LISA - Rook

```{r}
summary_table <- summary(lisa_rook_origin_trips_capita$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin <- tm_shape(lisa_rook_origin_trips_capita) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation Number of Trips Per Capita for Trip Origins",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin, asp=1.2)
```

```{r}
summary_table <- summary(lisa_rook_dest_trips_capita$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest <- tm_shape(lisa_rook_dest_trips_capita) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Overall LISA Spatial Autocorrelation Number of Trips Per Capita for Trip Destinations",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest, asp=1.2)
```
:::

We can also visualise all **statistically significant** LISA categories where p-value \< 0.05 for both trip origins and destinations.

::: panel-tabset
#### Statistically Significant LISA - Queen

```{r}
lisa_queen_origin_sig <- lisa_queen_origin_trips_capita %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_origin_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin_sig <- tm_shape(lisa_queen_origin_trips_capita)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Signifcant LISA Map of Number of Trips Per Capita for Trip Origins",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin_sig, asp=1.2)
```

```{r}
lisa_queen_dest_sig <- lisa_queen_dest_trips_poi %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_queen_dest_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest_sig <- tm_shape(lisa_queen_dest_trips_capita)+
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6)+
  tm_shape(lisa_queen_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Signifcant LISA Map of Number of Trips Per Capita for Trip Destinations",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest_sig, asp=1.2)
```

#### Statistically Significant LISA - Rook

```{r}
lisa_rook_origin_sig <- lisa_rook_origin_trips_capita %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_origin_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_origin_sig <- tm_shape(lisa_rook_origin_trips_capita) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Number of Trips Per Capita for Trip Origins",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_origin_sig, asp=1.2)
```

```{r}
lisa_rook_dest_sig <- lisa_rook_dest_trips_capita %>%
  filter(p_ii_sim < 0.05)

summary_table <- summary(lisa_rook_dest_sig$mean) %>% as.data.frame()

kable(summary_table, col.names = c("LISA", "Count"), caption = "Summary of LISA Categories Using Local Moran's I")
```

```{r fig.width=7, fig.height=6}
#| code-fold: true
#| warning: false
lisa_cat_dest_sig <- tm_shape(lisa_rook_dest_trips_capita) +
  tm_polygons() +
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64","green3", "#d21b1c"),
          title = "LISA Classification",
          midpoint = NA,
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Statistically Significant LISA Map of Number of Trips Per Capita for Trip Destinations",
          main.title.position = "center",
          main.title.size = 1,
          main.title.fontface = "bold",
          legend.title.size = 0.7,
          legend.text.size = 0.7,
          legend.hist.size = 0.7,
          legend.position = c("right", "bottom"),
          legend.width = 0.15,  
          frame = FALSE) +
  tm_compass(type = "8star", text.size = 1, size = 2, position = c("RIGHT", "TOP")) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), text.size = 0.7)

tmap_arrange(lisa_cat_dest_sig, asp=1.2)
```
:::

Here's the **interactive** version of the static plots above for more readability using `tmap_mode('view')`. Each district, when hovered above, shows the district name and LISA category, unless it is not statistically significant then it will just show the district name.

::: panel-tabset
#### Queen - origin

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# First map: Overall LISA Spatial Autocorrelation
lisa_queen_origin <- lisa_queen_origin_trips_capita %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat <- tm_shape(lisa_queen_origin) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_queen_origin_sig <- lisa_queen_origin_trips_capita %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_queen_origin) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Queen - dest

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# First map: Overall LISA Spatial Autocorrelation
lisa_queen_dest <- lisa_queen_dest_trips_capita %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat <- tm_shape(lisa_queen_dest) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_queen_dest_sig <- lisa_queen_dest_trips_capita %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_queen_dest) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_queen_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Rook - origin

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# First map: Overall LISA Spatial Autocorrelation
lisa_rook_origin <- lisa_rook_origin_trips_capita %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat <- tm_shape(lisa_rook_origin) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_rook_origin_sig <- lisa_rook_origin_trips_capita %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_rook_origin) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_origin_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```

#### Rook - dest

```{r}
tmap_mode("view")
```

```{r}
#| code-fold: true
#| warning: false
# First map: Overall LISA Spatial Autocorrelation
lisa_rook_dest <- lisa_rook_dest_trips_capita %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat <- tm_shape(lisa_rook_dest) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Overall LISA Classification",
          id = "label") 

# Second map: LISAal Significant LISA Map
lisa_rook_dest_sig <- lisa_rook_dest_trips_capita %>%
  filter(p_ii_sim < 0.05) %>%
  mutate(label = paste("District:", district, "| ", mean))

lisa_cat_sig <- tm_shape(lisa_rook_dest) +
  tm_polygons(id = "") +  
  tm_borders(col = "black", alpha = 0.6) +
  tm_shape(lisa_rook_dest_sig) +
  tm_polygons("mean", 
          palette = c("lightblue1", "#ec9a64", "green3", "#d21b1c"),
          title = "Significant LISA Classification",
          id = "label")
tmap_arrange(lisa_cat, lisa_cat_sig, asp = 1, ncol = 2)
tmap_mode("plot")
```
:::

## 5.8 Piecing It Together

![ESDA Prototype - Origin, All Driving Mode, All Weather, Queen Method, Statistically Significant](images/LISA%201.png){width="1000"}

![ESDA Prototype - Destination, All Driving Mode, All Weather, Queen Method, Statistically Significant](images/LISA 2-02.png){width="1000"}

![ESDA Prototype - Origin, Car, All Weather, Queen Method, Statistically Significant](images/LISA 3-02.png){width="1000"}

# 6. Conclusions

This marks the end of Take-home Exercise 3 where I explored an in-depth **exploratory data analysis** of the demand distribution and travel patterns of Grab commuters in Jakarta at the district level. Additionally, I have also conducted exploratory spatial data analysis by leveraging **LISA spatial autocorrelation** for various combinatinos of origin/destination, car/motocycle, rain/no rain and queen/rook contiguity methods.

Now, we are ready to head towards building the ShinyApp dashboard for the final group project! ðŸ™Œ Feel free to find my group's project Netlify site here <https://is415-projectgrab-g2.netlify.app/>.
